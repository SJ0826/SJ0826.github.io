<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-26T17:33:49+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Sometimes we fall, then we rise ⛵</title><subtitle>프론트엔드 엔지니어가 되기까지</subtitle><author><name>Sujin Kim</name></author><entry><title type="html">🍸 칵테일 러브 좀비</title><link href="http://localhost:4000/books/books-cocktail-love-jombie/" rel="alternate" type="text/html" title="🍸 칵테일 러브 좀비" /><published>2023-03-26T00:00:00+09:00</published><updated>2023-03-26T22:06:00+09:00</updated><id>http://localhost:4000/books/books-cocktail-love-jombie</id><content type="html" xml:base="http://localhost:4000/books/books-cocktail-love-jombie/"><![CDATA[<p><img src="https://image.yes24.com/goods/89913383/XL" alt="칵테일, 러브, 좀비" /></p>

<p>▪ 제목: 칵테일, 러브, 좀비<br />
▪ 작가: 조예은<br />
▪ 출판사: 안전가옥<br />
▪ 독서 기간: ? ~ 2023/03/16<br />
▪ 읽은 방식: 전자책</p>

<hr />

<p>칵테일, 러브, 좀비는 4개의 단편소설로 구성된 한국 미스터리소설이다.
반전과 미스테리를 좋아하는 독자라면 필수로 읽어야 하는 작품집이라 생각한다. 그만큼 유명하기도 하다.</p>

<p>수록된 작품 중 가장 인상깊었던 작품을 고르자면 습지와 오버랩 나이프, 나이프라 할 수 있겠는데 이유는 서로 다르다.</p>

<p>습지는 귀신이 나오지만 무섭지 않다. 오히려 긴장감 넘치는 책 분위기 속에서 살짝 긴장을 풀고 차분하게 읽을 수 있는 분위기를 풍기는 내용이다. 미스테리 스릴러 소설이라고 무조건 빠른 호흡과 높은 텐션이 필수일 필요가 없다는 점을 새로이 알게 해준 작품이다.</p>

<p>이에 반해 오버랩 나이프, 나이프는 읽는 내내 책 종이가 넘어가는게 아까울 정도로 빠져들었다. 이때 혼자 카페에 앉아 책을 읽었는데 반전을 맞이할 때마다 표정관리하느라 꽤나 힘들었다. 조예은 작가님의 작품은 스토리가 흔하지 않고 결말이 뻔하지 않다. 작품의 제목조차 처음에는 어떤 뜻인지 알 수 없다. 오버랩 나이프, 나이프. 어떤 내용이 전개될지 도통 알기 힘들다. 작품을 다 읽고 다시 제목을 보았을 때 제목에서 다 알려주고 있다는걸 깨닫고는 무언가 당해버린 기분이 든다. 미루고 미뤘던 젤리장수 대학살도 조만간 읽어야 겠다.</p>]]></content><author><name>Sujin Kim</name></author><category term="books" /><category term="칵테일 러브 좀비" /><category term="조예은" /><category term="안전가옥" /><category term="추리/미스테리" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">[Leaning Typescript] system of a clown</title><link href="http://localhost:4000/typescript/typescript-learning-typescript-clowning-around/" rel="alternate" type="text/html" title="[Leaning Typescript] system of a clown" /><published>2023-03-23T00:00:00+09:00</published><updated>2023-03-23T22:06:00+09:00</updated><id>http://localhost:4000/typescript/typescript-learning-typescript-clowning-around</id><content type="html" xml:base="http://localhost:4000/typescript/typescript-learning-typescript-clowning-around/"><![CDATA[<h1 id="-system-of-a-clown">🤡 system of a clown</h1>

<blockquote>
  <p>🎈 Help me, please!<br />
I planned an elaborate clown-themed surprise party for my best friend. The whole event was planned using a few files of TypeScript code I’d written.<br />
My friend somehow caught wind of the party and enlisted the clowns’ help to vandalize the program. Not only did the clowns remove or make incorrect my TypeScript type annotations, they introduced subtle bugs by subtly changing some of the values.<br />
Could you please add correct type annotations in my files and fix any bugs detected by TypeScript? You’re my surprise clown celebration’s last hope! 🤡</p>
</blockquote>

<p>🎈 도와주라주!<br />
내 베프를 위해 삐에로 컨셉의 깜짝 파티를 준비했어.
모든 이벤트가 내가 쓴 몇개의 타입스크립트 파일로 준비되어 있지.<br />
근데 내 친구가 어떻게든 정보를 들어가지고 프로그램을 파괴하기 위해 삐에로들한테 도움을 요청한거야!
삐에로들은 내 타입스크립트 애너테이션을 지우고 망가뜨리는것 뿐만 아니라, 일부 값들을 교묘하게 바꿔버리며 버그마저 도입해버렸어.<br />
내 파일에 올바른 애너테이션을 추가하고 버그를 잡아줄 수 있어? 너는 내 깜짝 삐에로 파티의 마지막 희망이야! 🤡</p>

<blockquote>
  <p>타입 애너테이션 (type annotation)? 타입에 주석을 다는 것으로 변수나 함수의 타입을 설정하는 것.<br /> ex) let name: string = ‘sujin’</p>
</blockquote>

<h2 id="-step-1-clowning-around">🎈 Step 1: Clowning Around</h2>

<blockquote>
  <p>The first area of code I’ll need you to fix is the activity assignment engine. It repeatedly creates groups of size 5-10 guests. Each group is directed to go to an activity, which can hold up to a certain number of them at a time. <br />
It looks like the clowns didn’t change too much on this one. They mostly just removed a few type annotations and changed one value. <br />
Could you please add back missing type annotations to avoid evolving or implicit anys, and fix the wrong value?</p>
</blockquote>

<p><strong>▪ 요약: 액티비티 할당 엔진에서 타입 애너테이션을 추가하고 오류난 부분을 고쳐라!</strong></p>

<h3 id="-문제-코드">📃 문제 코드</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">remainingGuests</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
<span class="nf">while </span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Each group of guests will be size 5-10</span>
  <span class="kd">const</span> <span class="nx">guestsToAssign</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">5</span><span class="p">)</span> <span class="o">+</span> <span class="mi">5</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">activity</span><span class="p">;</span> <span class="c1">// Those were some nice type annotations you had here!</span>
  <span class="kd">let</span> <span class="nx">capacity</span><span class="p">;</span> <span class="c1">// It'd be a shame if we ... *erased* them! 😈</span>
  <span class="kd">let</span> <span class="nx">requiresSupplies</span><span class="p">;</span>
  <span class="nf">switch </span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">5</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">case</span> <span class="mi">0</span><span class="p">:</span>
      <span class="nx">activity</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">balloon animals</span><span class="dl">"</span><span class="p">;</span>
      <span class="nx">capacity</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
      <span class="nx">requiresSupplies</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
      <span class="nx">activity</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">face painting</span><span class="dl">"</span><span class="p">;</span>
      <span class="nx">capacity</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">;</span>
      <span class="nx">requiresSupplies</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
      <span class="nx">activity</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">juggling</span><span class="dl">"</span><span class="p">;</span>
      <span class="nx">capacity</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
      <span class="nx">requiresSupplies</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="nl">default</span><span class="p">:</span>
      <span class="nx">activity</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">dancing</span><span class="dl">"</span><span class="p">;</span>
      <span class="nx">capacity</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">guestsToAssign</span><span class="p">}</span><span class="s2"> of us will enjoy </span><span class="p">${</span><span class="nx">activity</span><span class="p">}</span><span class="s2">.`</span><span class="p">);</span>
  <span class="nf">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">guestsToAssign</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="nx">capacity</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`\t</span><span class="p">${</span><span class="nx">capacity</span><span class="p">}</span><span class="s2"> will enter the </span><span class="p">${</span><span class="nx">activity</span><span class="p">}</span><span class="s2"> activity.`</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nx">remainingGuests</span> <span class="o">-=</span> <span class="nx">guestsToAssign</span><span class="p">;</span>
  <span class="nf">if </span><span class="p">(</span><span class="nx">remainingGuests</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`We have </span><span class="p">${</span><span class="nx">remainingGuests</span><span class="p">}</span><span class="s2"> remaining guests to entertain.\n`</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="s2">All done!</span><span class="dl">"</span><span class="p">);</span>
<span class="k">export</span> <span class="p">{};</span>
</code></pre></div></div>

<p>문제로 나온 이 코드를 tsc명령어를 이용해 컴파일하면 다음과 같은 오류가 발생합니다.</p>

<p><img src="https://user-images.githubusercontent.com/56298540/227079353-886f9cad-aacd-4b8d-9a5c-08c359f7481b.png" alt="image" /></p>

<p>산술 연산자에 <code class="language-plaintext highlighter-rouge">string</code>값이 할당되고 있는 상황입니다.</p>

<h3 id="-풀이-과정">📃 풀이 과정</h3>

<p>오류가 난 부분을 보니, 산술 연산자에 <code class="language-plaintext highlighter-rouge">string</code>값이 할당되어 컴파일과정에서 막혀버렸습니다.</p>

<p>해당 변수 <code class="language-plaintext highlighter-rouge">capacity</code>를 찾습니다.</p>

<p>switch문안에서 문자열로 되어 있는 <code class="language-plaintext highlighter-rouge">capacity</code>를 찾아 숫자로 고칩니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
      <span class="nx">activity</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">face painting</span><span class="dl">"</span><span class="p">;</span>
      <span class="c1">// capacity = "1";</span>
      <span class="nx">capacity</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 수정</span>
      <span class="nx">requiresSupplies</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
</code></pre></div></div>

<p>요구사항대로 변수가 선언된 부분에서 타입 애너테이션도 추가합니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">activity</span><span class="p">;</span> <span class="c1">// Those were some nice type annotations you had here!</span>
<span class="kd">let</span> <span class="nx">capacity</span><span class="p">;</span> <span class="c1">// It'd be a shame if we ... *erased* them! 😈</span>
<span class="kd">let</span> <span class="nx">requiresSupplies</span><span class="p">;</span>
</code></pre></div></div>

<p>✔ 수정된 전체 코드</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">remainingGuests</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>

<span class="nf">while </span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Each group of guests will be size 5-10</span>
  <span class="kd">const</span> <span class="nx">guestsToAssign</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">5</span><span class="p">)</span> <span class="o">+</span> <span class="mi">5</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">activity</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span> <span class="c1">// Those were some nice type annotations you had here!</span>
  <span class="kd">let</span> <span class="nx">capacity</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span> <span class="c1">// It'd be a shame if we ... *erased* them! 😈</span>
  <span class="kd">let</span> <span class="nx">requiresSupplies</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span>

  <span class="nf">switch </span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">5</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">case</span> <span class="mi">0</span><span class="p">:</span>
      <span class="nx">activity</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">balloon animals</span><span class="dl">"</span><span class="p">;</span>
      <span class="nx">capacity</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
      <span class="nx">requiresSupplies</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
      <span class="nx">activity</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">face painting</span><span class="dl">"</span><span class="p">;</span>
      <span class="nx">capacity</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
      <span class="nx">requiresSupplies</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
      <span class="nx">activity</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">juggling</span><span class="dl">"</span><span class="p">;</span>
      <span class="nx">capacity</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
      <span class="nx">requiresSupplies</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="nl">default</span><span class="p">:</span>
      <span class="nx">activity</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">dancing</span><span class="dl">"</span><span class="p">;</span>
      <span class="nx">capacity</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">guestsToAssign</span><span class="p">}</span><span class="s2"> of us will enjoy </span><span class="p">${</span><span class="nx">activity</span><span class="p">}</span><span class="s2">.`</span><span class="p">);</span>

  <span class="nf">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">guestsToAssign</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="nx">capacity</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`\t</span><span class="p">${</span><span class="nx">capacity</span><span class="p">}</span><span class="s2"> will enter the </span><span class="p">${</span><span class="nx">activity</span><span class="p">}</span><span class="s2"> activity.`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">remainingGuests</span> <span class="o">-=</span> <span class="nx">guestsToAssign</span><span class="p">;</span>
  <span class="nf">if </span><span class="p">(</span><span class="nx">remainingGuests</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`We have </span><span class="p">${</span><span class="nx">remainingGuests</span><span class="p">}</span><span class="s2"> remaining guests to entertain.\n`</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="s2">All done!</span><span class="dl">"</span><span class="p">);</span>

<span class="k">export</span> <span class="p">{};</span>
</code></pre></div></div>

<h2 id="-step-2-clown-availability">🎈 Step 2: Clown Availability</h2>

<blockquote>
  <p>The second and -thank heavens- final area of code I’ll need you to fix is my clown assignment planner.
I use this to print which clowns will be partying with which guests. <br />
Oh, and they introduced several unsettling clown puns in comments.<br />
It’s because of those puns that I can’t fix the code myself.<br />
The clowns again changed a few things around, but nothing more than an incorrect type annotation or different value for a variable.<br />
Could you please fix up the file to have no TypeScript complaints? x</p>
</blockquote>]]></content><author><name>Sujin Kim</name></author><category term="TypeScript" /><category term="learning typescript" /><category term="type system" /><category term="clowning around" /><summary type="html"><![CDATA[책 learning typescript 2장 타입 시스템 실습 프로젝트 입니다.]]></summary></entry><entry><title type="html">tsconfig.json 파일 살펴보기</title><link href="http://localhost:4000/typescript/typescript-tsconfig/" rel="alternate" type="text/html" title="tsconfig.json 파일 살펴보기" /><published>2023-03-22T00:00:00+09:00</published><updated>2023-03-22T22:06:00+09:00</updated><id>http://localhost:4000/typescript/typescript-tsconfig</id><content type="html" xml:base="http://localhost:4000/typescript/typescript-tsconfig/"><![CDATA[<h2 id="-tsconfigjson-파일이란">📄 tsconfig.json 파일이란?</h2>
<p>tsconfig.json 파일은 타입스크립트 프로젝트에서 타입스크립트에 관한 환경설정을 할 수 있는 <strong>타입스크립트 컴파일러 설정파일</strong>입니다.</p>

<h2 id="-tsconfigjson-파일에서-사용하는-옵션">📄 tsconfig.json 파일에서 사용하는 옵션</h2>

<p>tsconfig.json 파일에는 다양한 옵션이 있지만, 자주 사용되는 옵션을 정리했습니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="dl">"</span><span class="s2">compilerOptions</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">module</span><span class="dl">"</span> <span class="p">:</span><span class="dl">"</span><span class="s2">CommonJS</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">target</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">es5</span><span class="dl">"</span><span class="p">,</span>  
    <span class="dl">"</span><span class="s2">esModuleInterop</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>                            
    <span class="dl">"</span><span class="s2">moduleResolution</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">node</span><span class="dl">"</span><span class="p">,</span>                          
    <span class="dl">"</span><span class="s2">outDir</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">dist</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">baseUrl</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">.</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">sourceMap</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">downlevelIteration</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">noImplicitAny</span><span class="dl">"</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">paths</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span><span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">node_modules/*</span><span class="dl">"</span><span class="p">]}</span>                               
  <span class="p">},</span>
  <span class="dl">"</span><span class="s2">include</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">src/**/*</span><span class="dl">"</span><span class="p">]</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">include</code>: 타입스크립트 컴파일러 대상이 되는 경로</li>
</ul>

<h3 id="-module-키">▪ module 키</h3>
<ul>
  <li>컴파일된 ES5 자바스크립트 코드는 웹브라우저와 노드제이에스에서 양쪽에서 동작해야 한다.</li>
  <li>하지만, 웹브라우저와 노드제이에스는 동작방식이 다르다. (웹 브라우저: <code class="language-plaintext highlighter-rouge">amd</code>, 노드제이에스: <code class="language-plaintext highlighter-rouge">commonjs</code> )</li>
  <li>따라서, module키로 동작 대상 플랫폼이 무엇인지 구분해주는 역할을 한다.</li>
</ul>

<h3 id="-moduleresolution-키">▪ moduleResolution 키</h3>
<ul>
  <li>moduule이 어떤 값을 가지느냐에 따라 다르게 설정된다.</li>
  <li><code class="language-plaintext highlighter-rouge">commonjs</code>는 <code class="language-plaintext highlighter-rouge">node</code>로 설정하고, <code class="language-plaintext highlighter-rouge">amd</code>는 <code class="language-plaintext highlighter-rouge">classic</code>으로 설정한다.</li>
</ul>

<h3 id="-target-키">▪ target 키</h3>
<ul>
  <li>트랜스파일할 대상 자바스크립트의 버전을 설정한다.</li>
  <li>보통 es5를 설정한다.</li>
</ul>

<h3 id="-baseurl--outdir-키">▪ baseUrl &amp; OutDir 키</h3>
<ul>
  <li>트랜스파일된 자바스크립트 파일을 저장하는 경로</li>
  <li><code class="language-plaintext highlighter-rouge">OutDir</code>은 baseUrl 설정값을 기준으로 하위 디렉토리를 뜻한다.</li>
</ul>

<h3 id="-paths-키">▪ paths 키</h3>
<ul>
  <li>소스 파일의 import 문에서 from 부분을 해석할 때 찾아야 하는 디렉토리를 설정한다.</li>
  <li><code class="language-plaintext highlighter-rouge">node-module</code>을 포함한 이유는 찾아야하는 소스가 외부 패키지일 경우를 위해 설정한 것이다.</li>
</ul>

<h3 id="-esmoduleinterop-키">▪ esModuleInterop 키</h3>
<ul>
  <li>웹 브라우저에서 동작한다는 가정으로 만들어진 오픈소스 자바스크립트 라이브러리가 CommonJS방식으로 동작하는 타입스크립트 코드에서 실행될 수 있도록 설정</li>
</ul>

<h3 id="-sourcemap-키">▪ sourceMap 키</h3>
<ul>
  <li>소스맵 파일 생성 유무를 설정한다.</li>
  <li>소스맵 파일에는 변환된 자바스크립트 코드가 타입스크립트 코드의 어느 부분에 해당하는지 보여준다.</li>
</ul>

<h3 id="-downleveliteration-키">▪ downlevelIteration 키</h3>
<ul>
  <li>타입스크립트의 생성기(generator) 구문이 정상적으로 동작하도록 설정</li>
</ul>

<h3 id="-nolmplicitany-키">▪ nolmplicitAny 키</h3>
<ul>
  <li>지정하지 않은 타입을 암시적으로 <code class="language-plaintext highlighter-rouge">any</code>로 설정하게 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">false</code>로 설정하면 타입을 지정하지 않았을 때, 에러메세지가 표시되지 않고 넘어간다.</li>
</ul>

<h2 id="참고">참고</h2>

<ul>
  <li>Do It 타입스크립트 프로그래밍 (책)</li>
</ul>]]></content><author><name>Sujin Kim</name></author><category term="TypeScript" /><category term="tsconfig" /><summary type="html"><![CDATA[tsconfig.json 파일 구조를 살펴보자]]></summary></entry><entry><title type="html">[모여봐요 코딩의 늪] useState 비동기 에러 처리하기</title><link href="http://localhost:4000/coding-swamp/projects-codingswamp-useState-asynchronous/" rel="alternate" type="text/html" title="[모여봐요 코딩의 늪] useState 비동기 에러 처리하기" /><published>2023-03-21T00:00:00+09:00</published><updated>2023-03-21T22:06:00+09:00</updated><id>http://localhost:4000/coding-swamp/projects-codingswamp-useState-asynchronous</id><content type="html" xml:base="http://localhost:4000/coding-swamp/projects-codingswamp-useState-asynchronous/"><![CDATA[<h2 id="-문제발생">🐞 문제발생</h2>

<p>사용자의 프로필을 수정하는 과정에서 <code class="language-plaintext highlighter-rouge">useState</code>를 사용해 form을 변경하는데, state가 업데이트 되지 않았다.</p>

<h3 id="-문제-코드">▪ 문제 코드</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="p">...</span>
<span class="kd">const</span> <span class="nx">initialEditForm</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">profileUrl</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
  <span class="na">imageFile</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="na">username</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
  <span class="na">imageUrl</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="p">[</span><span class="nx">memberForm</span><span class="p">,</span> <span class="nx">setMemberForm</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="nx">initialEditForm</span><span class="p">)</span>

<span class="p">...</span>

<span class="kd">const</span> <span class="nx">onChangeProfileImg</span> <span class="o">=</span> <span class="nf">useCallback</span><span class="p">(</span>
    <span class="nf">async </span><span class="p">(</span><span class="nx">e</span><span class="p">:</span> <span class="nx">ChangeEvent</span><span class="o">&lt;</span><span class="nx">HTMLElement</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">ImageFiles</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span> <span class="k">as</span> <span class="nx">HTMLInputElement</span><span class="p">).</span><span class="nx">files</span>
      <span class="nf">if </span><span class="p">(</span><span class="nx">ImageFiles</span> <span class="o">&amp;&amp;</span> <span class="nx">ImageFiles</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">URL</span><span class="p">.</span><span class="nf">createObjectURL</span><span class="p">(</span><span class="nx">ImageFiles</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="nf">setMemberForm</span><span class="p">({</span> <span class="p">...</span><span class="nx">memberForm</span><span class="p">,</span> <span class="na">imageFile</span><span class="p">:</span> <span class="nx">ImageFiles</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">})</span> <span class="c1">// 문제부분</span>
        <span class="nf">setMemberForm</span><span class="p">({</span> <span class="p">...</span><span class="nx">memberForm</span><span class="p">,</span> <span class="na">imageUrl</span><span class="p">:</span> <span class="nx">url</span> <span class="p">})</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="p">[</span><span class="nx">imgInputRef</span><span class="p">],</span>
  <span class="p">)</span>

</code></pre></div></div>

<p>이 부분을 해결하려고 imageFile만 담는 state를 생성했을 때는 값이 바뀌는 것을 확인했는데,
도대체 왜 처음 작성했던 코드에서는 state가 변경되지 않는지 너무 궁금해서 꽤 오래 코드를 수정하고 손봤다.</p>

<p>그래도 해결이 안되서 <a href="https://okky.kr/questions/1417086#answer-661188">오키</a>에 질문글을 작성하고 이유를 알 수 있었다.</p>

<h2 id="-문제해결">🔨 문제해결</h2>

<p>문제는 <strong><code class="language-plaintext highlighter-rouge">useState</code>의 비동기 처리 방식</strong>이었다.</p>

<p><code class="language-plaintext highlighter-rouge">useState</code>가 비동기로 동작한다는 것을 어렴풋이 알고있었지만 어떻게 처리가 진행되는지 몰라서 문제가 어디서 발생했는지 정확히 모르고 애먼 코드들만 뜯어보고 답답해했다.<br /> 왜 <code class="language-plaintext highlighter-rouge">imageUrl</code>은 변경이 적용되고 첫번째 setState를 호출해서 적용한 <code class="language-plaintext highlighter-rouge">imageFile</code>은 변경이 안될까?</p>

<p>💡 useState는 비동기적으로 처리가 진행되기 때문에 useState를 두번 호출할 때, 마지막 호출시 처음 state의 변경분은 반영되지 않기 때문이다!</p>

<p>리액트는 성능을 최적화하기 위해 setState가 연속 호출되면 배치처리를 통해 한번에 렌더링한다고 한다.</p>

<blockquote>
  <p>배치(batch)란? 리액트가 여러개의 state 업데이트를 하나의 리렌더링으로 묶는 것</p>
</blockquote>

<p>따라서, 위 코드에서 문제가 발생한 이유는 기존 <code class="language-plaintext highlighter-rouge">memberForm</code>에 imageFile이 더해진 상태로 변경된 것이 state에 적용되기 전에 <strong>다시 <code class="language-plaintext highlighter-rouge">memberForm</code>을 재사용</strong>하기 때문에 imageFile에 관한 변경사항이 적용되지 않고 imageUrl이 더해진 값으로 state가 적용되기 때문이었던 것이다.</p>

<h3 id="-변경된-코드">▪ 변경된 코드</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">setMemberForm</span><span class="p">({</span> <span class="p">...</span><span class="nx">memberForm</span><span class="p">,</span> <span class="na">imageFile</span><span class="p">:</span> <span class="p">...,</span> <span class="na">imageUrl</span><span class="p">:</span> <span class="nx">url</span> <span class="p">})</span>
</code></pre></div></div>

<p>setState를 한번만 호출해서 비동기 상황을 발생시키지 않게 고쳤고, 문제는 해결되었다.<br />
비동기에 관한 삽질은 api통신을 할 때만 생길줄 알았던 내 안일한 생각이 가장 큰 문제였다.<br />
안다고 다 아는게 아니라는 것을 다시 한번 뇌에 새기게 되었다.</p>]]></content><author><name>Sujin Kim</name></author><category term="coding-swamp" /><category term="모코늪" /><category term="useState" /><category term="비동기" /><summary type="html"><![CDATA[redux에서 관리하는 state를 객체로 다시 구조화]]></summary></entry><entry><title type="html">[모여봐요 코딩의 늪] 사용자 폼 관련 Slice 리팩토링 (state 객체로 관리하기)</title><link href="http://localhost:4000/coding-swamp/projects-coding-swamp/" rel="alternate" type="text/html" title="[모여봐요 코딩의 늪] 사용자 폼 관련 Slice 리팩토링 (state 객체로 관리하기)" /><published>2023-03-10T00:00:00+09:00</published><updated>2023-03-10T22:06:00+09:00</updated><id>http://localhost:4000/coding-swamp/projects-coding-swamp</id><content type="html" xml:base="http://localhost:4000/coding-swamp/projects-coding-swamp/"><![CDATA[<h2 id="-리팩토링-이유">❔ 리팩토링 이유</h2>

<p>좋은 코드는 코드만 보고 어떤 일을 하는지 알 수 있는 코드라고 배웠다.</p>

<p>하지만 나의 코드는 코드만 보고 무슨일을 하는 지 알 수 없었다.</p>

<h3 id="기존의-memberform-데이터-구조">기존의 MemberForm 데이터 구조</h3>

<h4 id="-storemembermemberformslicets">💾 store/member/memberFormSlice.ts</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">initialMemberForm</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">value</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">imageFile</span><span class="dl">"</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="na">isValidate</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
    <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">username</span><span class="dl">"</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span> <span class="na">isValidate</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="na">emailAuth</span><span class="p">:</span> <span class="kc">false</span> <span class="p">},</span>
    <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">email</span><span class="dl">"</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span> <span class="na">isValidate</span><span class="p">:</span> <span class="kc">false</span> <span class="p">},</span>
    <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">password</span><span class="dl">"</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span> <span class="na">isValidate</span><span class="p">:</span> <span class="kc">false</span> <span class="p">},</span>
  <span class="p">],</span>
<span class="p">};</span>
</code></pre></div></div>

<p>데이터 구조가 이렇게 되어있으면 값에 접근할 때 값의 이름이 아니라 <code class="language-plaintext highlighter-rouge">index</code>로 접근해야 했다.</p>

<p>처음 프로젝트를 시작할때 <code class="language-plaintext highlighter-rouge">File</code> 타입에 <code class="language-plaintext highlighter-rouge">null</code>이 할당되지 않아 객체 안에 굳이 <code class="language-plaintext highlighter-rouge">key</code>라는 이름의 <code class="language-plaintext highlighter-rouge">key</code>를 생성했다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">imageFile</span><span class="p">:</span> <span class="nx">File</span><span class="p">:</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">// error</span>
</code></pre></div></div>

<p>아마 내가 ‘imageFile’의 타입을 오로지 File로만 했던 모양인데 시간이 지나고 보니 코드가 굉장히 가독성이 없다는 것이 보였다.</p>

<h4 id="-componentssignupform">💾 Components/SignUpForm</h4>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">result</span><span class="p">:</span> <span class="nx">UserParam</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">imageFile</span><span class="p">:</span> <span class="nx">userData</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">value</span><span class="p">,</span>
  <span class="na">username</span><span class="p">:</span> <span class="nx">userData</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">value</span><span class="o">!</span><span class="p">,</span>
  <span class="na">email</span><span class="p">:</span> <span class="nx">userData</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">value</span><span class="o">!</span><span class="p">,</span>
  <span class="na">password</span><span class="p">:</span> <span class="nx">userData</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">value</span><span class="o">!</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">userData</code>에 <code class="language-plaintext highlighter-rouge">index</code>로 접근하기 때문에 해당 변수가 어떤 값을 가지고 있는지 알 수 없다.</p>

<p>이를 고치기 위해선 memberForm의 state 구조를 변경해야 했다.</p>

<h2 id="-리팩토링-결과">❕ 리팩토링 결과</h2>

<h4 id="-storemembermemberformslicets-1">💾 store/member/memberFormSlice.ts</h4>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">initialMemberForm</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">memberForm</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">imageFile</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">email</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
  <span class="p">}</span> <span class="k">as</span> <span class="nb">Omit</span><span class="o">&lt;</span><span class="nx">MemberFormParam</span><span class="p">,</span> <span class="dl">"</span><span class="s2">profileUrl</span><span class="dl">"</span> <span class="o">&amp;</span> <span class="dl">"</span><span class="s2">imageUrl</span><span class="dl">"</span><span class="o">&gt;</span><span class="p">,</span>
  <span class="na">emailAuth</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="na">isEditMode</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div>

<h4 id="-componentssignupform-1">💾 Components/SignUpForm</h4>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">result</span><span class="p">:</span> <span class="nx">UserParam</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">imageFile</span><span class="p">:</span> <span class="nx">memberForm</span><span class="p">.</span><span class="nx">imageFile</span><span class="p">,</span>
  <span class="na">username</span><span class="p">:</span> <span class="nx">memberForm</span><span class="p">.</span><span class="nx">username</span><span class="p">,</span>
  <span class="na">email</span><span class="p">:</span> <span class="nx">memberForm</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
  <span class="na">password</span><span class="p">:</span> <span class="nx">memberForm</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div>

<p>값에 이름으로 접근하니 어떤 데이터가 할당되는지 알 수 있게 되었다.</p>

<h2 id="-나의-생각">💬 나의 생각</h2>

<p>분명 코드를 작성할 때는 최선인 것 같았는데 지나고 보니 아닌 경우가 꽤 많다.</p>

<p>완성된 프로젝트라 하더라도 다시 보고 리팩토링을 계속 해주는 것이 좋겠다.</p>]]></content><author><name>Sujin Kim</name></author><category term="coding-swamp" /><category term="모코늪" /><category term="redux-toolkit" /><category term="데이터구조" /><summary type="html"><![CDATA[redux에서 관리하는 state를 객체로 다시 구조화]]></summary></entry><entry><title type="html">완주하지 못한 선수</title><link href="http://localhost:4000/programmers-lv1/programmers-notcolpletedplayer/" rel="alternate" type="text/html" title="완주하지 못한 선수" /><published>2023-03-07T00:00:00+09:00</published><updated>2023-03-07T22:06:00+09:00</updated><id>http://localhost:4000/programmers-lv1/programmers-notcolpletedplayer</id><content type="html" xml:base="http://localhost:4000/programmers-lv1/programmers-notcolpletedplayer/"><![CDATA[<h2 id="문제-">문제 📖</h2>

<p>수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.</p>

<p>마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.</p>

<ul>
  <li>마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.</li>
  <li>completion의 길이는 participant의 길이보다 1 작습니다.</li>
  <li>참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.</li>
  <li>참가자 중에는 동명이인이 있을 수 있습니다.</li>
</ul>

<h2 id="나의-풀이-1-️">나의 풀이 #1 🙋‍♀️</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">participant</span><span class="p">,</span> <span class="nx">completion</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">setParticipant</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Set</span><span class="p">(</span><span class="nx">participant</span><span class="p">);</span> <span class="c1">// 1</span>
  <span class="nf">if </span><span class="p">(</span><span class="nx">setParticipant</span><span class="p">.</span><span class="nx">size</span> <span class="o">&lt;</span> <span class="nx">participant</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 2</span>
    <span class="kd">const</span> <span class="nx">notCompletion</span> <span class="o">=</span> <span class="nx">participant</span><span class="p">.</span><span class="nf">filter</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nf">if </span><span class="p">(</span><span class="nx">setParticipant</span><span class="p">.</span><span class="nf">has</span><span class="p">(</span><span class="nx">item</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">setParticipant</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">item</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">});</span>
    <span class="k">return</span> <span class="nx">notCompletion</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="nx">answer</span> <span class="o">=</span> <span class="nx">participant</span><span class="p">.</span><span class="nf">filter</span><span class="p">((</span><span class="nx">person</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">!</span><span class="nx">completion</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// 3</span>
  <span class="k">return</span> <span class="nx">answer</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>

<ol>
  <li><code class="language-plaintext highlighter-rouge">Set</code>객체를 사용해서 <code class="language-plaintext highlighter-rouge">participant</code> 중복요소를 제거한다.</li>
  <li>중복요소를 제거한 <code class="language-plaintext highlighter-rouge">participant</code> 객체(<code class="language-plaintext highlighter-rouge">setParticipant</code>)의 크기가 <code class="language-plaintext highlighter-rouge">participant</code>보다 작다면, 동명이인이 있다는 뜻이므로 <code class="language-plaintext highlighter-rouge">filter</code>함수를 사용해 완주하지 못한 선수의 이름을 구한다.</li>
  <li>동명이인이 없는 경우 바로 완주하지 못한 선수의 이름을 구한다.</li>
</ol>

<p>이 코드를 제출하며 정확성 체크는 통과하지만 효율성 체크는 통과하지 못한다.</p>

<p>효율성까지 테스트하는 문제는 처음이라 시간이 좀 걸려서 코드를 고쳤다.</p>

<h2 id="나의-풀이-2-️">나의 풀이 #2 🙋‍♀️</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">participant</span><span class="p">,</span> <span class="nx">completion</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">sortedParticipant</span> <span class="o">=</span> <span class="nx">participant</span><span class="p">.</span><span class="nf">sort</span><span class="p">();</span> <span class="c1">// 1</span>
  <span class="kd">const</span> <span class="nx">sortedCompletion</span> <span class="o">=</span> <span class="nx">completion</span><span class="p">.</span><span class="nf">sort</span><span class="p">();</span>

  <span class="nf">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">sortedParticipant</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 2</span>
    <span class="nf">if </span><span class="p">(</span><span class="nx">sortedParticipant</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!==</span> <span class="nx">sortedCompletion</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
      <span class="c1">// 3</span>
      <span class="k">return</span> <span class="nx">sortedParticipant</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ol>
  <li>참가자 배열과 완주자 배열의 문자열을 abc차순으로 정리한다.</li>
  <li><code class="language-plaintext highlighter-rouge">for</code>문을 사용해서 참가자 수만큼 반복문을 실행한다.</li>
  <li>순차가 정리된 배열끼리 이름을 비교하게 되고, 이름이 같지 않으면 해당 이름을 정답으로 제출한다.</li>
</ol>

<p>효율성 체크는 수행 시간과 메모리를 기준으로 평가된다.</p>

<p>코드의 시간복잡도와 저장된 메모리를 고려해야 통과할 수 있다.</p>

<p>반복문을 사용하는 경우에는 원하는 값이 도출되었을 때, 바로 반복문을 종료시킬 수 있어야 효율성이 증가한다.</p>

<p>그런면에서 배열에 <code class="language-plaintext highlighter-rouge">for...in</code>을 사용하는 것은 좋지 않다.</p>

<p><code class="language-plaintext highlighter-rouge">for...in</code>은 모든 값을 조회해 효율성을 떨어뜨리기 때문이다.</p>

<h2 id="best-practice-">Best Practice 👍</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">participant</span><span class="p">,</span> <span class="nx">completion</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Map</span><span class="p">();</span> <span class="c1">// 1</span>

  <span class="nf">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">participant</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">participant</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span>
      <span class="nx">b</span> <span class="o">=</span> <span class="nx">completion</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>

    <span class="nx">map</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="p">(</span><span class="nx">map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="o">||</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// 2</span>
    <span class="nx">map</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="p">(</span><span class="nx">map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="o">||</span> <span class="mi">0</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// 3</span>
  <span class="p">}</span> <span class="c1">// 4</span>

  <span class="nf">for </span><span class="p">(</span><span class="kd">let</span> <span class="p">[</span><span class="nx">k</span><span class="p">,</span> <span class="nx">v</span><span class="p">]</span> <span class="k">of</span> <span class="nx">map</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 5</span>
    <span class="nf">if </span><span class="p">(</span><span class="nx">v</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">k</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="dl">"</span><span class="s2">nothing</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>해시의 컨셉을 정확히 접목시킨 풀이이다.</p>

<p>해시의 개념은 알고 있었지만 프로그래머스에서 이렇게 접목시킬 생각은 못했다.</p>

<ol>
  <li>우선 <code class="language-plaintext highlighter-rouge">Map</code>객체를 생성한다.</li>
  <li>참가자 수만큼 반복문을 돌려 <code class="language-plaintext highlighter-rouge">map</code>에 키는 참가자 이름으로, 값은 기존에 1을 더해준다.</li>
  <li>map에 완주자 이름의 키에 해당되는 값을 <code class="language-plaintext highlighter-rouge">-1</code>만큼 빼준다.</li>
  <li>처음 <code class="language-plaintext highlighter-rouge">for</code>문을 나온 <code class="language-plaintext highlighter-rouge">map</code>의 키는 참가자이름이고 값은 0 또는 1이 된다.</li>
  <li>완주하지 못한 참가자는 1의 값을 가지고 있으므로 해당 key의 값을 답으로 제출한다.</li>
  <li>동명이인이 있을 경우에는 해당 이름의 값에 두번 1이 더해지고 한번 1이 빼지므로 마찬가지로 1이 된다.</li>
</ol>

<p>풀이를 정리하자면 다음과 같게 된다.</p>

<p><img src="https://user-images.githubusercontent.com/56298540/223395946-3b217984-2284-408b-916f-8c85a22952fe.png" alt="image" /></p>

<p><code class="language-plaintext highlighter-rouge">sort</code>로 풀면 <strong>O(NlogN)</strong>의 시간이 걸리지만 해시로 풀면 <strong>O(N)</strong>의 시간 복잡도를 가진다.</p>

<p>다음 해시 문제를 풀때는 꼭 <code class="language-plaintext highlighter-rouge">Map</code>을 사용해서 답을 낼 것이다.</p>]]></content><author><name>Sujin Kim</name></author><category term="programmers-lv1" /><category term="프로그래머스" /><category term="완주하지 못한 선수" /><category term="해시" /><summary type="html"><![CDATA[프로그래머스 Lv1. 완주하지 못한 선수]]></summary></entry><entry><title type="html">github.io 블로그 시작하기</title><link href="http://localhost:4000/%EC%9D%BC%EC%83%81/first-post/" rel="alternate" type="text/html" title="github.io 블로그 시작하기" /><published>2023-03-05T00:00:00+09:00</published><updated>2023-03-05T22:06:00+09:00</updated><id>http://localhost:4000/%EC%9D%BC%EC%83%81/first-post</id><content type="html" xml:base="http://localhost:4000/%EC%9D%BC%EC%83%81/first-post/"><![CDATA[<p>GitHub Blog 서비스인 github.io 블로그 시작하기로 했다.</p>

<p>GitHub TIL레포에 공부내용을 기록해왔는데 이 블로그로 모든 내용을 옮겨야 한다.</p>

<p>내용이 꽤 많지만 전체적으로 한번씩 읽으면서 복습한다고 생각하고 여유롭게 이사해야겠다.</p>

<h3 id="til-레포에서-github-블로그로-이사하는-이유">TIL 레포에서 GitHub 블로그로 이사하는 이유</h3>

<p>우선, github 레포에서 보는 md파일은 가독성이 좋지 않다.
글씨의 크기나 간격이 편하게 읽기 좋은 정도는 아니다.
가장 큰 이유는 내가 지속적으로 관리하는 페이지를 가지고 싶었다.
이 블로그에 공부기록도 하지만 이외에 다양한 주제를 가지고 나를 표현하는 웹 사이트로 성장시킬 예정이다.</p>]]></content><author><name>Sujin Kim</name></author><category term="일상" /><category term="Blog" /><summary type="html"><![CDATA[GitHub Blog 서비스인 github.io 블로그 시작하기로 했다.]]></summary></entry><entry><title type="html">이벤트 버블링 (Event Bubbling), 이벤트 캡쳐 (Event Capture), 이벤트 위임 (Event Delegation)</title><link href="http://localhost:4000/javascript/javascript-eventBubbling/" rel="alternate" type="text/html" title="이벤트 버블링 (Event Bubbling), 이벤트 캡쳐 (Event Capture), 이벤트 위임 (Event Delegation)" /><published>2023-02-27T00:00:00+09:00</published><updated>2023-02-27T22:06:00+09:00</updated><id>http://localhost:4000/javascript/javascript-eventBubbling</id><content type="html" xml:base="http://localhost:4000/javascript/javascript-eventBubbling/"><![CDATA[<h2 id="-이벤트-버블링-event-bubbling">📄 이벤트 버블링 (Event Bubbling)</h2>

<p>이벤트 버블링은 특정 요소에서 이벤트가 발생했을 때, 해당 이벤트가 더 <strong>상위 요소로 전달</strong>되는 과정입니다.</p>

<p>브라우저는 특정 요소에서 이벤트가 발생했을 때 그 이벤트를 최상위에 있는 요소까지 전파합니다.</p>

<p>이러한 과정을 이벤트 버블링이라고 합니다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// html</span>
<span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">div</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">one</span><span class="dl">"</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">two</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">three</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/body&gt;</span><span class="err">;
</span>
<span class="c1">// js</span>
<span class="kd">var</span> <span class="nx">divs</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="dl">"</span><span class="s2">div</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">divs</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">div</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">div</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="nx">logEvent</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">function</span> <span class="nf">logEvent</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">.</span><span class="nx">className</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>✔ 결과</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">three</span><span class="p">;</span>
<span class="nx">two</span><span class="p">;</span>
<span class="nx">one</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="-이벤트-캡처-event-capture">📄 이벤트 캡처 (Event Capture)</h2>

<p>이벤트 캡처는 이벤트 버블링과 반대로 진행되는 이벤트 전달 과정입니다.</p>

<p>이벤트 캡처는 이벤트 버블링과 반대로 <strong>상위요소에서 하위요소로</strong> 이벤트 전달 과정이 진행됩니다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// html</span>
<span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">div</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">one</span><span class="dl">"</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">two</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">three</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/body&gt;</span><span class="err">;
</span>
<span class="c1">// js</span>
<span class="kd">var</span> <span class="nx">divs</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="dl">"</span><span class="s2">div</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">divs</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">div</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">div</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="nx">logEvent</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">capture</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// default 값은 false입니다.</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="kd">function</span> <span class="nf">logEvent</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">.</span><span class="nx">className</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>✔ 결과</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">one</span><span class="p">;</span>
<span class="nx">two</span><span class="p">;</span>
<span class="nx">three</span><span class="p">;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">addEventListener</code>의 세번째 파라미터로 <code class="language-plaintext highlighter-rouge">capture: true</code>를 설정해주면
이벤트 캡처가 진행되어 가장 상위 요소에 적용된 이벤트가 먼저 발생합니다.</p>

<h2 id="-이벤트-진행을-막고싶을-때는-어떻게-할까">📄 이벤트 진행을 막고싶을 때는 어떻게 할까?</h2>

<p>이벤트 버블링이나 이벤트 캡처를 구현할때 적용한 모든 요소에 이벤트를 실행하지 않고 중간에 멈추기 위한 속성이 있습니다.
<code class="language-plaintext highlighter-rouge">event.stopPropagation()</code>을 사용하면 이벤트의 진행과정을 중단시킬 수 있습니다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 이벤트 버블링 예제</span>
<span class="nx">divs</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">div</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">div</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="nx">logEvent</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">function</span> <span class="nf">logEvent</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">event</span><span class="p">.</span><span class="nf">stopPropagation</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">.</span><span class="nx">className</span><span class="p">);</span> <span class="c1">// three</span>
<span class="p">}</span>

<span class="c1">// 이벤트 캡쳐 예제</span>
<span class="nx">divs</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">div</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">div</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="nx">logEvent</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">capture</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// default 값은 false입니다.</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="kd">function</span> <span class="nf">logEvent</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">event</span><span class="p">.</span><span class="nf">stopPropagation</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">.</span><span class="nx">className</span><span class="p">);</span> <span class="c1">// one</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="-이벤트-위임-event-delegation">📄 이벤트 위임 (Event Delegation)</h2>

<p>이벤트 위임은 하위 요소에 각각 이벤트를 붙이지 않고 <strong>상위 요소에서 하위 요소의 이벤트들을 제어</strong>하는 방식입니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>오늘의 할 일<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"itemList"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;li&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"checkbox"</span> <span class="na">id=</span><span class="s">"item1"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"item1"</span><span class="nt">&gt;</span>이벤트 버블링 학습<span class="nt">&lt;/label&gt;</span>
  <span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"checkbox"</span> <span class="na">id=</span><span class="s">"item2"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"item2"</span><span class="nt">&gt;</span>이벤트 캡쳐 학습<span class="nt">&lt;/label&gt;</span>
  <span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 새 리스트 아이템을 추가하는 코드</span>
<span class="kd">var</span> <span class="nx">itemList</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">.itemList</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">li</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">li</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">input</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">label</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">label</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">labelText</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createTextNode</span><span class="p">(</span><span class="dl">"</span><span class="s2">이벤트 위임 학습</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">input</span><span class="p">.</span><span class="nf">setAttribute</span><span class="p">(</span><span class="dl">"</span><span class="s2">type</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">checkbox</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">input</span><span class="p">.</span><span class="nf">setAttribute</span><span class="p">(</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">item3</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">label</span><span class="p">.</span><span class="nf">setAttribute</span><span class="p">(</span><span class="dl">"</span><span class="s2">for</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">item3</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">label</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">labelText</span><span class="p">);</span>
<span class="nx">li</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">input</span><span class="p">);</span>
<span class="nx">li</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">label</span><span class="p">);</span>
<span class="nx">itemList</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">li</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">itemList</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">.itemList</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">itemList</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="nf">function </span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">clicked</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>아이템이 새로 추가될 때마다 이벤트를 새로 추가하지 않고
상위 요소인 <code class="language-plaintext highlighter-rouge">.itemList</code>에 이벤트를 달아줌으로써 하위요소에도 이벤트가 등록되었습니다.</p>

<h2 id="출처">출처</h2>

<ul>
  <li><a href="https://joshua1988.github.io/web-development/javascript/event-propagation-delegation/">캡틴 판교-이벤트 버블링, 이벤트 캡처 그리고 이벤트 위임까지</a></li>
</ul>]]></content><author><name>Sujin Kim</name></author><category term="JavaScript" /><category term="JavaScript" /><category term="이벤트 버블링" /><category term="이벤트 캡처" /><category term="이벤트 위임" /></entry><entry><title type="html">🚨 Assignment to constant variable.</title><link href="http://localhost:4000/javascript/javascript-assignment-to-constant-variable/" rel="alternate" type="text/html" title="🚨 Assignment to constant variable." /><published>2023-02-27T00:00:00+09:00</published><updated>2023-02-27T22:06:00+09:00</updated><id>http://localhost:4000/javascript/javascript-assignment%20to%20constant%20variable</id><content type="html" xml:base="http://localhost:4000/javascript/javascript-assignment-to-constant-variable/"><![CDATA[<h2 id="-assignment-to-constant-variable">🚨 Assignment to constant variable.</h2>

<p>자바스크립트 퀴즈를 푸는데 코드에 빨간 표시도 안났는데 에러가 떴다.</p>

<p>직역하면 <strong>상수값을 변수에 할당</strong>했다는 뜻이다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">countBiggerThanTen</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="nx">numbers</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">number</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">if </span><span class="p">(</span><span class="nx">number</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">sum</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// TypeError: Assignment to constant variable.</span>
    <span class="p">}</span>
  <span class="p">});</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="원인">원인</h2>

<p>이미 선언한 const 변수에 새로운 값을 할당했을 때 발생한다.</p>

<p>위 코드에서 계속 값이 바뀌는 sum을 상수로 선언했다.</p>

<h2 id="해결">해결</h2>

<p>값을 재할당에서 사용할 수 있는 <code class="language-plaintext highlighter-rouge">let</code>으로 바꾸어 주었더니 정상적으로 동작했다.</p>]]></content><author><name>Sujin Kim</name></author><category term="JavaScript" /><category term="JavaScript" /><category term="에러" /><category term="상수" /><category term="변수" /></entry><entry><title type="html">약수의 합</title><link href="http://localhost:4000/programmers-lv1/sumofdivisor/" rel="alternate" type="text/html" title="약수의 합" /><published>2023-02-20T00:00:00+09:00</published><updated>2023-02-20T22:06:00+09:00</updated><id>http://localhost:4000/programmers-lv1/sumofdivisor</id><content type="html" xml:base="http://localhost:4000/programmers-lv1/sumofdivisor/"><![CDATA[<h2 id="문제-">문제 📖</h2>

<p>정수 n을 입력받아 n의 약수를 모두 더한 값을 리턴하는 함수, solution을 완성해주세요.</p>

<ul>
  <li>n은 0 이상 3000이하인 정수입니다.</li>
</ul>

<h2 id="나의-풀이-️">나의 풀이 🙋‍♀️</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">n</span><span class="p">;</span>
  <span class="nf">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nx">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">if </span><span class="p">(</span><span class="nx">n</span> <span class="o">%</span> <span class="nx">i</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">i</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">sum</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>간단하게 <code class="language-plaintext highlighter-rouge">for</code>문을 사용했다.</p>

<p>어차피 주어진 수 <code class="language-plaintext highlighter-rouge">n</code>의 절반까지만 정답의 유효 범위이기 때문에 반복 횟수를 조금이라도 줄이려고 신경썼다.</p>

<p>반복문을 통해 주어진 수 <code class="language-plaintext highlighter-rouge">n</code>을 정수로 나눈 값이 0일 경우, 총합 <code class="language-plaintext highlighter-rouge">sum</code>에 더해준다.</p>]]></content><author><name>Sujin Kim</name></author><category term="programmers-lv1" /><category term="프로그래머스" /><category term="약수의 합" /><summary type="html"><![CDATA[프로그래머스 Lv1. 약수의 합 풀이]]></summary></entry></feed>