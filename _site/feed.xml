<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-08T18:14:36+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Sometimes we fall, then we rise ⛵</title><subtitle>프론트엔드 엔지니어가 되기까지</subtitle><author><name>Sujin Kim</name></author><entry><title type="html">완주하지 못한 선수</title><link href="http://localhost:4000/programmers-lv1/programmers-notcolpletedplayer/" rel="alternate" type="text/html" title="완주하지 못한 선수" /><published>2023-03-07T00:00:00+09:00</published><updated>2023-03-07T22:06:00+09:00</updated><id>http://localhost:4000/programmers-lv1/programmers-notcolpletedplayer</id><content type="html" xml:base="http://localhost:4000/programmers-lv1/programmers-notcolpletedplayer/"><![CDATA[<h2 id="문제-">문제 📖</h2>

<p>수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.</p>

<p>마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.</p>

<ul>
  <li>마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.</li>
  <li>completion의 길이는 participant의 길이보다 1 작습니다.</li>
  <li>참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.</li>
  <li>참가자 중에는 동명이인이 있을 수 있습니다.</li>
</ul>

<h2 id="나의-풀이-1-️">나의 풀이 #1 🙋‍♀️</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">participant</span><span class="p">,</span> <span class="nx">completion</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">setParticipant</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Set</span><span class="p">(</span><span class="nx">participant</span><span class="p">);</span> <span class="c1">// 1</span>
  <span class="nf">if </span><span class="p">(</span><span class="nx">setParticipant</span><span class="p">.</span><span class="nx">size</span> <span class="o">&lt;</span> <span class="nx">participant</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 2</span>
    <span class="kd">const</span> <span class="nx">notCompletion</span> <span class="o">=</span> <span class="nx">participant</span><span class="p">.</span><span class="nf">filter</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nf">if </span><span class="p">(</span><span class="nx">setParticipant</span><span class="p">.</span><span class="nf">has</span><span class="p">(</span><span class="nx">item</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">setParticipant</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">item</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">});</span>
    <span class="k">return</span> <span class="nx">notCompletion</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="nx">answer</span> <span class="o">=</span> <span class="nx">participant</span><span class="p">.</span><span class="nf">filter</span><span class="p">((</span><span class="nx">person</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">!</span><span class="nx">completion</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// 3</span>
  <span class="k">return</span> <span class="nx">answer</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>

<ol>
  <li><code class="language-plaintext highlighter-rouge">Set</code>객체를 사용해서 <code class="language-plaintext highlighter-rouge">participant</code> 중복요소를 제거한다.</li>
  <li>중복요소를 제거한 <code class="language-plaintext highlighter-rouge">participant</code> 객체(<code class="language-plaintext highlighter-rouge">setParticipant</code>)의 크기가 <code class="language-plaintext highlighter-rouge">participant</code>보다 작다면, 동명이인이 있다는 뜻이므로 <code class="language-plaintext highlighter-rouge">filter</code>함수를 사용해 완주하지 못한 선수의 이름을 구한다.</li>
  <li>동명이인이 없는 경우 바로 완주하지 못한 선수의 이름을 구한다.</li>
</ol>

<p>이 코드를 제출하며 정확성 체크는 통과하지만 효율성 체크는 통과하지 못한다.</p>

<p>효율성까지 테스트하는 문제는 처음이라 시간이 좀 걸려서 코드를 고쳤다.</p>

<h2 id="나의-풀이-2-️">나의 풀이 #2 🙋‍♀️</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">participant</span><span class="p">,</span> <span class="nx">completion</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">sortedParticipant</span> <span class="o">=</span> <span class="nx">participant</span><span class="p">.</span><span class="nf">sort</span><span class="p">();</span> <span class="c1">// 1</span>
  <span class="kd">const</span> <span class="nx">sortedCompletion</span> <span class="o">=</span> <span class="nx">completion</span><span class="p">.</span><span class="nf">sort</span><span class="p">();</span>

  <span class="nf">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">sortedParticipant</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 2</span>
    <span class="nf">if </span><span class="p">(</span><span class="nx">sortedParticipant</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!==</span> <span class="nx">sortedCompletion</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
      <span class="c1">// 3</span>
      <span class="k">return</span> <span class="nx">sortedParticipant</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ol>
  <li>참가자 배열과 완주자 배열의 문자열을 abc차순으로 정리한다.</li>
  <li><code class="language-plaintext highlighter-rouge">for</code>문을 사용해서 참가자 수만큼 반복문을 실행한다.</li>
  <li>순차가 정리된 배열끼리 이름을 비교하게 되고, 이름이 같지 않으면 해당 이름을 정답으로 제출한다.</li>
</ol>

<p>효율성 체크는 수행 시간과 메모리를 기준으로 평가된다.</p>

<p>코드의 시간복잡도와 저장된 메모리를 고려해야 통과할 수 있다.</p>

<p>반복문을 사용하는 경우에는 원하는 값이 도출되었을 때, 바로 반복문을 종료시킬 수 있어야 효율성이 증가한다.</p>

<p>그런면에서 배열에 <code class="language-plaintext highlighter-rouge">for...in</code>을 사용하는 것은 좋지 않다.</p>

<p><code class="language-plaintext highlighter-rouge">for...in</code>은 모든 값을 조회해 효율성을 떨어뜨리기 때문이다.</p>

<h2 id="best-practice-">Best Practice 👍</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">participant</span><span class="p">,</span> <span class="nx">completion</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Map</span><span class="p">();</span> <span class="c1">// 1</span>

  <span class="nf">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">participant</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">participant</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span>
      <span class="nx">b</span> <span class="o">=</span> <span class="nx">completion</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>

    <span class="nx">map</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="p">(</span><span class="nx">map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="o">||</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// 2</span>
    <span class="nx">map</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="p">(</span><span class="nx">map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="o">||</span> <span class="mi">0</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// 3</span>
  <span class="p">}</span> <span class="c1">// 4</span>

  <span class="nf">for </span><span class="p">(</span><span class="kd">let</span> <span class="p">[</span><span class="nx">k</span><span class="p">,</span> <span class="nx">v</span><span class="p">]</span> <span class="k">of</span> <span class="nx">map</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 5</span>
    <span class="nf">if </span><span class="p">(</span><span class="nx">v</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">k</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="dl">"</span><span class="s2">nothing</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>해시의 컨셉을 정확히 접목시킨 풀이이다.</p>

<p>해시의 개념은 알고 있었지만 프로그래머스에서 이렇게 접목시킬 생각은 못했다.</p>

<ol>
  <li>우선 <code class="language-plaintext highlighter-rouge">Map</code>객체를 생성한다.</li>
  <li>참가자 수만큼 반복문을 돌려 <code class="language-plaintext highlighter-rouge">map</code>에 키는 참가자 이름으로, 값은 기존에 1을 더해준다.</li>
  <li>map에 완주자 이름의 키에 해당되는 값을 <code class="language-plaintext highlighter-rouge">-1</code>만큼 빼준다.</li>
  <li>처음 <code class="language-plaintext highlighter-rouge">for</code>문을 나온 <code class="language-plaintext highlighter-rouge">map</code>의 키는 참가자이름이고 값은 0 또는 1이 된다.</li>
  <li>완주하지 못한 참가자는 1의 값을 가지고 있으므로 해당 key의 값을 답으로 제출한다.</li>
  <li>동명이인이 있을 경우에는 해당 이름의 값에 두번 1이 더해지고 한번 1이 빼지므로 마찬가지로 1이 된다.</li>
</ol>

<p>풀이를 정리하자면 다음과 같게 된다.</p>

<p><img src="https://user-images.githubusercontent.com/56298540/223395946-3b217984-2284-408b-916f-8c85a22952fe.png" alt="image" /></p>

<p><code class="language-plaintext highlighter-rouge">sort</code>로 풀면 <strong>O(NlogN)</strong>의 시간이 걸리지만 해시로 풀면 <strong>O(N)</strong>의 시간 복잡도를 가진다.</p>

<p>다음 해시 문제를 풀때는 꼭 <code class="language-plaintext highlighter-rouge">Map</code>을 사용해서 답을 낼 것이다.</p>]]></content><author><name>Sujin Kim</name></author><category term="programmers-lv1" /><category term="프로그래머스" /><category term="완주하지 못한 선수" /><category term="해시" /><summary type="html"><![CDATA[프로그래머스 Lv1. 완주하지 못한 선수]]></summary></entry><entry><title type="html">github.io 블로그 시작하기</title><link href="http://localhost:4000/%EC%9D%BC%EC%83%81/first-post/" rel="alternate" type="text/html" title="github.io 블로그 시작하기" /><published>2023-03-05T00:00:00+09:00</published><updated>2023-03-05T22:06:00+09:00</updated><id>http://localhost:4000/%EC%9D%BC%EC%83%81/first-post</id><content type="html" xml:base="http://localhost:4000/%EC%9D%BC%EC%83%81/first-post/"><![CDATA[<p>GitHub Blog 서비스인 github.io 블로그 시작하기로 했다.</p>

<p>GitHub TIL레포에 공부내용을 기록해왔는데 이 블로그로 모든 내용을 옮겨야 한다.</p>

<p>내용이 꽤 많지만 전체적으로 한번씩 읽으면서 복습한다고 생각하고 여유롭게 이사해야겠다.</p>

<h3 id="til-레포에서-github-블로그로-이사하는-이유">TIL 레포에서 GitHub 블로그로 이사하는 이유</h3>

<p>우선, github 레포에서 보는 md파일은 가독성이 좋지 않다.
글씨의 크기나 간격이 편하게 읽기 좋은 정도는 아니다.
가장 큰 이유는 내가 지속적으로 관리하는 페이지를 가지고 싶었다.
이 블로그에 공부기록도 하지만 이외에 다양한 주제를 가지고 나를 표현하는 웹 사이트로 성장시킬 예정이다.</p>]]></content><author><name>Sujin Kim</name></author><category term="일상" /><category term="Blog" /><summary type="html"><![CDATA[GitHub Blog 서비스인 github.io 블로그 시작하기로 했다.]]></summary></entry><entry><title type="html">약수의 합</title><link href="http://localhost:4000/programmers-lv1/sumofdivisor/" rel="alternate" type="text/html" title="약수의 합" /><published>2023-02-20T00:00:00+09:00</published><updated>2023-02-20T22:06:00+09:00</updated><id>http://localhost:4000/programmers-lv1/sumofdivisor</id><content type="html" xml:base="http://localhost:4000/programmers-lv1/sumofdivisor/"><![CDATA[<h2 id="문제-">문제 📖</h2>

<p>정수 n을 입력받아 n의 약수를 모두 더한 값을 리턴하는 함수, solution을 완성해주세요.</p>

<ul>
  <li>n은 0 이상 3000이하인 정수입니다.</li>
</ul>

<h2 id="나의-풀이-️">나의 풀이 🙋‍♀️</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">n</span><span class="p">;</span>
  <span class="nf">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nx">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">if </span><span class="p">(</span><span class="nx">n</span> <span class="o">%</span> <span class="nx">i</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">i</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">sum</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>간단하게 <code class="language-plaintext highlighter-rouge">for</code>문을 사용했다.</p>

<p>어차피 주어진 수 <code class="language-plaintext highlighter-rouge">n</code>의 절반까지만 정답의 유효 범위이기 때문에 반복 횟수를 조금이라도 줄이려고 신경썼다.</p>

<p>반복문을 통해 주어진 수 <code class="language-plaintext highlighter-rouge">n</code>을 정수로 나눈 값이 0일 경우, 총합 <code class="language-plaintext highlighter-rouge">sum</code>에 더해준다.</p>]]></content><author><name>Sujin Kim</name></author><category term="programmers-lv1" /><category term="프로그래머스" /><category term="약수의 합" /><summary type="html"><![CDATA[프로그래머스 Lv1. 약수의 합 풀이]]></summary></entry><entry><title type="html">폰켓몬</title><link href="http://localhost:4000/programmers-lv1/programmers-phonecatmon/" rel="alternate" type="text/html" title="폰켓몬" /><published>2023-02-17T00:00:00+09:00</published><updated>2023-02-17T22:06:00+09:00</updated><id>http://localhost:4000/programmers-lv1/programmers-phonecatmon</id><content type="html" xml:base="http://localhost:4000/programmers-lv1/programmers-phonecatmon/"><![CDATA[<h2 id="문제-">문제 📖</h2>

<p>당신은 폰켓몬을 잡기 위한 오랜 여행 끝에, 홍 박사님의 연구실에 도착했습니다. 홍 박사님은 당신에게 자신의 연구실에 있는 총 N 마리의 폰켓몬 중에서 N/2마리를 가져가도 좋다고 했습니다.</p>

<p>홍 박사님 연구실의 폰켓몬은 종류에 따라 번호를 붙여 구분합니다. 따라서 같은 종류의 폰켓몬은 같은 번호를 가지고 있습니다. 예를 들어 연구실에 총 4마리의 폰켓몬이 있고, 각 폰켓몬의 종류 번호가 [3번, 1번, 2번, 3번]이라면 이는 3번 폰켓몬 두 마리, 1번 폰켓몬 한 마리, 2번 폰켓몬 한 마리가 있음을 나타냅니다. 이때, 4마리의 폰켓몬 중 2마리를 고르는 방법은 다음과 같이 6가지가 있습니다.</p>

<ul>
  <li>첫 번째(3번), 두 번째(1번) 폰켓몬을 선택</li>
  <li>첫 번째(3번), 세 번째(2번) 폰켓몬을 선택</li>
  <li>첫 번째(3번), 네 번째(3번) 폰켓몬을 선택</li>
  <li>두 번째(1번), 세 번째(2번) 폰켓몬을 선택</li>
  <li>두 번째(1번), 네 번째(3번) 폰켓몬을 선택</li>
  <li>세 번째(2번), 네 번째(3번) 폰켓몬을 선택
이때, 첫 번째(3번) 폰켓몬과 네 번째(3번) 폰켓몬을 선택하는 방법은 한 종류(3번 폰켓몬 두 마리)의 폰켓몬만 가질 수 있지만, 다른 방법들은 모두 두 종류의 폰켓몬을 가질 수 있습니다. 따라서 위 예시에서 가질 수 있는 폰켓몬 종류 수의 최댓값은 2가 됩니다.</li>
</ul>

<p>당신은 최대한 다양한 종류의 폰켓몬을 가지길 원하기 때문에, 최대한 많은 종류의 폰켓몬을 포함해서 N/2마리를 선택하려 합니다. N마리 폰켓몬의 종류 번호가 담긴 배열 nums가 매개변수로 주어질 때, N/2마리의 폰켓몬을 선택하는 방법 중, 가장 많은 종류의 폰켓몬을 선택하는 방법을 찾아, 그때의 폰켓몬 종류 번호의 개수를 return 하도록 solution 함수를 완성해주세요.</p>

<h2 id="나의-풀이-️">나의 풀이 🙋‍♀️</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">nums</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">totalNumber</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">ceil</span><span class="p">(</span><span class="nx">nums</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
  <span class="kd">const</span> <span class="kd">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Set</span><span class="p">(</span><span class="nx">nums</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">newNums</span> <span class="o">=</span> <span class="p">[...</span><span class="kd">set</span><span class="p">];</span>

  <span class="kd">const</span> <span class="nx">answer</span> <span class="o">=</span>
    <span class="nb">Math</span><span class="p">.</span><span class="nf">ceil</span><span class="p">(</span><span class="nx">newNums</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">totalNumber</span>
      <span class="p">?</span> <span class="nx">totalNumber</span>
      <span class="p">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">ceil</span><span class="p">(</span><span class="nx">newNums</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>

  <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>우선 주어진 배열의 길이를 <code class="language-plaintext highlighter-rouge">totalNumber</code>에 저장해 answer에 최댓값으로 생각했다.</p>

<p>이후 <code class="language-plaintext highlighter-rouge">set</code>함수를 사용해서 배열의 중복요소를 제거했다.</p>

<p>최종 정답은 중복요소를 제거한 배열의 길이가 최댓값보다 크면 최댓값인 <code class="language-plaintext highlighter-rouge">totalNumber</code>, 작으면 중복요소를 제거한 배열의 길이로 설정했다.</p>

<h2 id="best-practice-">Best Practice 👍</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">nums</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">max</span> <span class="o">=</span> <span class="nx">nums</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[...</span><span class="k">new</span> <span class="nc">Set</span><span class="p">(</span><span class="nx">nums</span><span class="p">)];</span>

  <span class="k">return</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="nx">max</span> <span class="p">?</span> <span class="nx">max</span> <span class="p">:</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>다른 사람의 풀이를 보니 내가 너무 성급하게 정답을 제출했다는 것을 알았다.</p>

<p>내 풀이에서는 <code class="language-plaintext highlighter-rouge">newNums.length</code>에 쓸데없이 올림처리를 한 것을 지우지도 않았고, <code class="language-plaintext highlighter-rouge">set</code>함수를 사용할때 굳이 상수를 두번이나 선언한게 보인다.</p>

<p>답이 나와도 다시한번 보고 정리하는 습관을 가져야겠다.</p>]]></content><author><name>Sujin Kim</name></author><category term="programmers-lv1" /><category term="프로그래머스" /><category term="폰켓몬" /><category term="해시" /><summary type="html"><![CDATA[프로그래머스 Lv1. 폰켓몬 풀이]]></summary></entry><entry><title type="html">평균 구하기</title><link href="http://localhost:4000/programmers-lv1/programmers-arr/" rel="alternate" type="text/html" title="평균 구하기" /><published>2023-02-17T00:00:00+09:00</published><updated>2023-02-17T22:06:00+09:00</updated><id>http://localhost:4000/programmers-lv1/programmers-arr</id><content type="html" xml:base="http://localhost:4000/programmers-lv1/programmers-arr/"><![CDATA[<h2 id="문제-">문제 📖</h2>

<p>정수를 담고 있는 배열 arr의 평균값을 return하는 함수, solution을 완성해보세요.</p>

<ul>
  <li>arr은 길이 1 이상, 100 이하인 배열입니다.</li>
  <li>arr의 원소는 -10,000 이상 10,000 이하인 정수입니다.</li>
</ul>

<h2 id="나의-풀이-️">나의 풀이 🙋‍♀️</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">answer</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nf">reduce</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">c</span><span class="p">)</span> <span class="o">/</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>배열 내장 함수인 <code class="language-plaintext highlighter-rouge">reduce</code>함수를 사용했다.</p>

<p><code class="language-plaintext highlighter-rouge">for</code>문을 사용하는 것보다 훨씬 간결한 코드가 나왔다.</p>]]></content><author><name>Sujin Kim</name></author><category term="programmers-lv1" /><category term="프로그래머스" /><category term="평균구하기" /><category term="해시" /><summary type="html"><![CDATA[프로그래머스 Lv1. 평균 구하기 풀이]]></summary></entry><entry><title type="html">짝수와 홀수</title><link href="http://localhost:4000/programmers-lv1/evenandodd/" rel="alternate" type="text/html" title="짝수와 홀수" /><published>2023-02-16T00:00:00+09:00</published><updated>2023-02-16T22:06:00+09:00</updated><id>http://localhost:4000/programmers-lv1/evenandodd</id><content type="html" xml:base="http://localhost:4000/programmers-lv1/evenandodd/"><![CDATA[<h2 id="문제-">문제 📖</h2>

<p>정수 num이 짝수일 경우 “Even”을 반환하고 홀수인 경우 “Odd”를 반환하는 함수, solution을 완성해주세요.</p>

<ul>
  <li>num은 int 범위의 정수입니다.</li>
  <li>0은 짝수입니다.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">answer</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="나의-풀이-️">나의 풀이 🙋‍♀️</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">answer</span> <span class="o">=</span> <span class="nx">num</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">Even</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">Odd</span><span class="dl">"</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">solution</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">num</code>을 2로 나누어 나머지값에 대한 유무를 삼항연산자로 표현하고, 상수 <code class="language-plaintext highlighter-rouge">answer</code>에 값을 할당에 결과값을 <code class="language-plaintext highlighter-rouge">return</code>시켰다.</p>

<h2 id="best-practice-">Best Practice 👍</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">evenOrOdd</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">num</span> <span class="o">%</span> <span class="mi">2</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">Odd</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">Even</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>숫자 0은 <code class="language-plaintext highlighter-rouge">false</code>, 이외의 값은 <code class="language-plaintext highlighter-rouge">true</code>라는 점을 활용하니 코드가 더욱 간결해졌다.</p>]]></content><author><name>Sujin Kim</name></author><category term="programmers-lv1" /><category term="프로그래머스" /><category term="짝수와홀수" /><summary type="html"><![CDATA[프로그래머스 Lv1. 짝수와 홀수]]></summary></entry><entry><title type="html">[TodoList-Project] 툴킷없이 리덕스 사용해서 전역상태 관리하기</title><link href="http://localhost:4000/todolist-project/projects-todoList-redux/" rel="alternate" type="text/html" title="[TodoList-Project] 툴킷없이 리덕스 사용해서 전역상태 관리하기" /><published>2023-01-31T00:00:00+09:00</published><updated>2023-01-31T22:06:00+09:00</updated><id>http://localhost:4000/todolist-project/projects-todoList-redux</id><content type="html" xml:base="http://localhost:4000/todolist-project/projects-todoList-redux/"><![CDATA[<h2 id="-리덕스-툴킷을-사용하지-않은-이유">📄 리덕스 툴킷을 사용하지 않은 이유</h2>

<p>리덕스를 인강을 통해서 배웠지만 처음엔 이해가 잘 안갔다. 리듀서, 액션 등등 새로운 키워드가 많았고 컨셉도 어려웠다. 배우고 꾸준히 사용해보지 않아서 고이 묻어둔 상태였는데 원티드에서 리덕스를 다루게 되어 다시 꺼내 보았다. 그렇게 리덕스를 사용해서 만든 과제물에 대해 팀원분에게 피드백을 듣게 되었고 리덕스의 컨셉을 이해하지 않았다는 것을 알게 되었다.</p>

<p>기존의 나는 api를 호출할 때 store에서 따로 상태관련 로직을 작성하지 않았다.
예를 들어 Post요청을 한다고 가정했을 때, 데이터를 Put요청을 통해 수정하고 바로 다시 Get요청으로 데이터를 불러와 변경된 데이터를 화면에 렌더링해서 보여줬다. 이 과정에서는 api호출이 총 두번 발생한다.</p>

<p>하지만 store에서 상태 관리 로직을 작성한다면 따로 Get요청을 하지 않아도 클라이언트단에서 변경된 데이터를 바로 렌더링 할 수 있었다. 같은 과정이지만 api요청이 한번으로 줄어들게 되는 것이었다. 단점으로는 코드가 무거워진다는 부분이 있지만 api호출이 줄어드는 만큼 확실히 사용자 입장에선 더 빠르게 느껴질 것 같다.</p>

<h2 id="-기존의-리덕스-사용-방식">📄 기존의 리덕스 사용 방식</h2>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">commentSlice</span> <span class="o">=</span> <span class="nf">createSlice</span><span class="p">({</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">comment</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">initialState</span><span class="p">:</span> <span class="nx">initialState</span><span class="p">,</span>
  <span class="na">reducers</span><span class="p">:</span> <span class="p">{},</span>
  <span class="na">extraReducers</span><span class="p">:</span> <span class="p">(</span><span class="nx">builder</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">builder</span><span class="p">.</span><span class="nf">addCase</span><span class="p">(</span><span class="nx">getComment</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">,</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">);</span>
    <span class="nx">builder</span><span class="p">.</span><span class="nf">addCase</span><span class="p">(</span><span class="nx">createComment</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">,</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">);</span>
    <span class="nx">builder</span><span class="p">.</span><span class="nf">addCase</span><span class="p">(</span><span class="nx">editComment</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">,</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">);</span>
    <span class="nx">builder</span><span class="p">.</span><span class="nf">addCase</span><span class="p">(</span><span class="nx">deleteComment</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">,</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">);</span>
  <span class="p">},</span>
<span class="p">});</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">commentSlice</span><span class="p">;</span>
</code></pre></div></div>

<p>redux-toolkit에서 제공하는 <code class="language-plaintext highlighter-rouge">createAsyncThunk</code>를 이용해 비동기 로직을 처리하고 댓글의 상태를 관리하는 리듀서를 작성했다.
상태 관련 로직이 전혀 없기 때문에 리듀서가 깔끔하고 각 액션이 어떤 일을 수행하는지 알 수 없다.</p>

<h2 id="-개선된-리덕스-사용-방식">📄 개선된 리덕스 사용 방식</h2>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">todoReducer</span> <span class="o">=</span> <span class="p">(</span>
  <span class="nx">state</span><span class="p">:</span> <span class="nx">TodoParam</span><span class="p">[]</span> <span class="o">=</span> <span class="nx">initialState</span><span class="p">,</span>
  <span class="nx">action</span><span class="p">:</span> <span class="nx">TodoActionType</span>
<span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">switch </span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="na">GET_TODOS</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">;</span>
    <span class="k">case</span> <span class="na">CREATE_TODO</span><span class="p">:</span>
      <span class="k">return</span> <span class="p">[...</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">];</span>
    <span class="k">case</span> <span class="na">DELETE_TODO</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nf">filter</span><span class="p">((</span><span class="nx">todo</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">id</span> <span class="o">!==</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">);</span>
    <span class="k">case</span> <span class="na">UPDATE_TODO</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">todo</span><span class="p">)</span> <span class="o">=&gt;</span>
        <span class="nx">todo</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">id</span>
          <span class="p">?</span> <span class="p">{</span> <span class="p">...</span><span class="nx">todo</span><span class="p">,</span> <span class="na">todo</span><span class="p">:</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">todo</span><span class="p">,</span> <span class="na">isCompleted</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}</span>
          <span class="p">:</span> <span class="nx">todo</span>
      <span class="p">);</span>
    <span class="k">case</span> <span class="na">DONE_TODO</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">todo</span><span class="p">)</span> <span class="o">=&gt;</span>
        <span class="nx">todo</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span>
          <span class="p">?</span> <span class="p">{</span> <span class="p">...</span><span class="nx">todo</span><span class="p">,</span> <span class="na">isCompleted</span><span class="p">:</span> <span class="o">!</span><span class="nx">todo</span><span class="p">.</span><span class="nx">isCompleted</span> <span class="p">}</span>
          <span class="p">:</span> <span class="nx">todo</span>
      <span class="p">);</span>
    <span class="nl">default</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>리덕스를 제대로 다시 공부하기 위해 툴킷을 사용하지 않고 구현해보았다.
한번 Get요청을 통해 받아온 데이터를 관리하는 리듀서를 만들었다.
상태가 변경될때마다 새로고침을 하는게 아니라면 다시 Get요청을 하지 않아도 되니 api요청이 훨씬 줄어들었다.</p>

<p>지금은 규모가 작은 프로젝트지만 큰 프로젝트의 경우라면 관련 로직이 꽤 길어질 것 같은데 그때도 이렇게 관리를 하는게 맞는지 궁금해졌다. 이 부분은 좀더 찾아봐야 알 것 같다.</p>]]></content><author><name>Sujin Kim</name></author><category term="TodoList-Project" /><category term="TodoList" /><category term="Redux" /><summary type="html"><![CDATA[툴킷을 사용하지 않고 redux만을 이용한 전역상태 관리]]></summary></entry><entry><title type="html">이미지 랜덤 배치</title><link href="http://localhost:4000/javascript/js-image-random/" rel="alternate" type="text/html" title="이미지 랜덤 배치" /><published>2022-11-29T00:00:00+09:00</published><updated>2022-11-29T22:06:00+09:00</updated><id>http://localhost:4000/javascript/js-image-random</id><content type="html" xml:base="http://localhost:4000/javascript/js-image-random/"><![CDATA[<h2 id="-이미지-랜덤-배치하기">📄 이미지 랜덤 배치하기</h2>

<p><strong>목표: Vanila JavaScript로 새로고침 될 때마다 이미지가 특정 범위에 랜덤으로 배치된다.</strong></p>

<p>원하는 범위의 위치를 받아와서 <strong>이미지의 left와 right 값을 지정</strong>해주자!<br /></p>

<h2 id="-1-원하는-feild의-위치를-파악한다">📄 1. 원하는 feild의 위치를 파악한다.</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fieldRect</span> <span class="o">=</span> <span class="nx">field</span><span class="p">.</span><span class="nf">getBoundingClientRect</span><span class="p">();</span>
<span class="kd">function</span> <span class="nf">initGame</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">fieldRect</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">getBoundingClientRect</code>를 이용해 출력하면 지정한 요소의 위치를 콘솔창에서 확인할 수 있다.</p>

<h2 id="-2-feild에-추가하기-전에-이미지를-생성하는-함수를-만들어준다">📄 2. feild에 추가하기 전에 이미지를 생성하는 함수를 만들어준다.</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 랜덤으로 숫자를 생성하는 함수</span>
<span class="kd">function</span> <span class="nf">randomNumber</span><span class="p">(</span><span class="nx">min</span><span class="p">,</span> <span class="nx">max</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">random</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="nx">max</span> <span class="o">-</span> <span class="nx">min</span><span class="p">)</span> <span class="o">+</span> <span class="nx">min</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 아이템을 생성하는 함수</span>
<span class="kd">function</span> <span class="nf">addItem</span><span class="p">(</span><span class="nx">className</span><span class="p">,</span> <span class="nx">count</span><span class="p">,</span> <span class="nx">imgPath</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">x1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">y1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="c1">// 이미지가 feild에서 벗어나는 것을 막기 위해 최댓값을 조정한다.</span>
  <span class="kd">const</span> <span class="nx">x2</span> <span class="o">=</span> <span class="nx">fieldRect</span><span class="p">.</span><span class="nx">width</span> <span class="o">-</span> <span class="nx">CARROT_SIZE</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">y2</span> <span class="o">=</span> <span class="nx">fieldRect</span><span class="p">.</span><span class="nx">height</span> <span class="o">-</span> <span class="nx">CARROT_SIZE</span><span class="p">;</span>

  <span class="nf">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">count</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">item</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">img</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// 이미지 추가!</span>
    <span class="nx">item</span><span class="p">.</span><span class="nf">setAttribute</span><span class="p">(</span><span class="dl">"</span><span class="s2">class</span><span class="dl">"</span><span class="p">,</span> <span class="nx">className</span><span class="p">);</span> <span class="c1">// 이미지에 클래스 속성추가!</span>
    <span class="nx">item</span><span class="p">.</span><span class="nf">setAttribute</span><span class="p">(</span><span class="dl">"</span><span class="s2">src</span><span class="dl">"</span><span class="p">,</span> <span class="nx">imgPath</span><span class="p">);</span> <span class="c1">// 이미지 경로 추가!</span>
    <span class="nx">item</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">position</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">absolute</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// feild에 상대적으로 오프셋 적용</span>
    <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="nf">randomNumber</span><span class="p">(</span><span class="nx">x1</span><span class="p">,</span> <span class="nx">x2</span><span class="p">);</span> <span class="c1">// 최솟값 x1와 최댓값 x2 사이에서 랜덤으로 숫자를 받아 상수 x에 할당!</span>
    <span class="kd">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="nf">randomNumber</span><span class="p">(</span><span class="nx">y1</span><span class="p">,</span> <span class="nx">y2</span><span class="p">);</span> <span class="c1">// 최솟값 y1와 최댓값 y2 사이에서 랜덤으로 숫자를 받아 상수 y에 할당!</span>
    <span class="nx">item</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">x</span><span class="p">}</span><span class="s2">px`</span><span class="p">;</span> <span class="c1">// 추가한 이미지의 left값에 x값 할당!</span>
    <span class="nx">item</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">y</span><span class="p">}</span><span class="s2">px`</span><span class="p">;</span> <span class="c1">// 추가한 이미지의 top에 y값 할당!</span>
    <span class="nx">field</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span> <span class="c1">// field에 해당 이미지를 추가</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="-3-additem함수에-값을-지정한다">📄 3. addItem함수에 값을 지정한다.</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">initGame</span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">addItem</span><span class="p">(</span><span class="dl">"</span><span class="s2">carrot</span><span class="dl">"</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="dl">"</span><span class="s2">carrot.png</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// 당근 이미지 5개!</span>
  <span class="nf">addItem</span><span class="p">(</span><span class="dl">"</span><span class="s2">bug</span><span class="dl">"</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="dl">"</span><span class="s2">bug.png</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// 벌레 이미지 5개!</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="결과">결과</h4>

<p><img src="https://user-images.githubusercontent.com/56298540/184609114-2aaf8d9f-db80-40b6-9a59-a9b7b67ea962.PNG" alt="캡처" /></p>

<p>새로고침할 때 마다 당근 5개와 벌레 5개가 배치된다.</p>

<h2 id="느낀점">느낀점</h2>

<p>강의 전혀 안보고 하려고 했는데 실패했다~ <br />
이미지를 랜덤으로 배치하는 함수가 따로 있는 줄 알았다.<br />
모든게 함수나 API로 있진 않나보다.<br />
구글링할때 많은 사람들이 제이쿼리를 쓰는 것을 보았다.<br />
생각보다 바닐라로 구현하는 내용은 보지 못했다.<br />
코드를 혼자서 완성시키는 것은 지금 당장 해내지 못할지라도 강의에서 보여주는 코드를 완벽하게 이해하고 넘어가서 다음에 사용하는 경우가 생긴다면 그때는 꼭 적용시켜서 스스로 해낼 것이다.<br /></p>

<h2 id="출처">출처</h2>

<ul>
  <li>드림코딩</li>
</ul>]]></content><author><name>Sujin Kim</name></author><category term="JavaScript" /><category term="JavaScript" /></entry><entry><title type="html">콜백(Callback)</title><link href="http://localhost:4000/javascript/js-callback/" rel="alternate" type="text/html" title="콜백(Callback)" /><published>2022-09-06T00:00:00+09:00</published><updated>2022-09-06T22:06:00+09:00</updated><id>http://localhost:4000/javascript/js-callback</id><content type="html" xml:base="http://localhost:4000/javascript/js-callback/"><![CDATA[<h2 id="-콜백">📄 콜백</h2>

<p>콜백 함수는 <strong>다른 코드를 인자로 넘겨주는 함수</strong>이다.<br />
다른 코드(함수 또는 메서드)에게 인자로 넘겨줌으로써 그 제어권도 함께 위임한다.
자바스크립트는 호스트 환경이 제공하는 여러 함수를 사용하면 <strong>비동기 동작</strong>을 수행할 수 있다.</p>

<h2 id="-콜백은-어떤-경우에-사용될까">📄 콜백은 어떤 경우에 사용될까?</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">loadScript</span><span class="p">(</span><span class="nx">src</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// &lt;script&gt; 태그를 만들고 페이지에 태그를 추가합니다.</span>
  <span class="c1">// 태그가 페이지에 추가되면 src에 있는 스크립트를 로딩하고 실행합니다.</span>
  <span class="kd">let</span> <span class="nx">script</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">script</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">script</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">src</span><span class="p">;</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
<span class="p">}</span>

<span class="nf">loadScript</span><span class="p">(</span><span class="dl">"</span><span class="s2">/my/script.js</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// script.js엔 "function newFunction() {…}"이 있습니다.</span>

<span class="nf">newFunction</span><span class="p">();</span> <span class="c1">// 함수가 존재하지 않는다는 에러가 발생합니다!</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">new Function()</code>에서 에러가 발생하는 이유는 브라우저가 스크립트를 읽어올 수 있는 시간을 충분히 확보하지 못했기 때문이다.<br /></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">loadScript</span><span class="p">(</span><span class="nx">src</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">script</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">script</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">script</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">src</span><span class="p">;</span>

  <span class="nx">script</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nf">callback</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>

  <span class="nb">document</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
<span class="p">}</span>

<span class="nf">loadScript</span><span class="p">(</span><span class="dl">'</span><span class="s1">/my/script.js</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// 콜백 함수는 스크립트 로드가 끝나면 실행됩니다.</span>
  <span class="nf">newFunction</span><span class="p">();</span> <span class="c1">// 이제 함수 호출이 제대로 동작합니다.</span>
  <span class="p">...</span>
<span class="p">});</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">loadScript</code>의 두 번째 인수에 스크립트 로딩이 끝난 후 실행될 함수인 콜백 함수를 추가했다.<br />
두 번째 인수로 전달되 함수는 원하는 동작이 완료되었을 떄 실행된다.<br /><br /></p>

<p>이것을 <strong>콜백 기반 비동기 프로그래밍</strong>이라고 부른다.<br />
비동기적으로 수행되어야할 필요성을 가진 코드에 콜백을 기반으로 접근할 수 있다.</p>

<h2 id="-오류-우선-콜백">📄 오류 우선 콜백</h2>

<p>콜백함수를 이용해서 에러를 핸들링할 수 있다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">loadScript</span><span class="p">(</span><span class="nx">src</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">script</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">script</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">script</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">src</span><span class="p">;</span>

  <span class="nx">script</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nf">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">script</span><span class="p">);</span>
  <span class="nx">script</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span>
    <span class="nf">callback</span><span class="p">(</span><span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">src</span><span class="p">}</span><span class="s2">를 불러오는 도중에 에러가 발생했습니다.`</span><span class="p">));</span>

  <span class="nb">document</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
<span class="p">}</span>

<span class="nf">loadScript</span><span class="p">(</span><span class="dl">"</span><span class="s2">/my/script.js</span><span class="dl">"</span><span class="p">,</span> <span class="nf">function </span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">script</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 에러 처리</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// 스크립트 로딩이 성공적으로 끝남</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="오류-우선-콜백의-관례">오류 우선 콜백의 관례</h3>

<ol>
  <li><code class="language-plaintext highlighter-rouge">callback</code>의 첫 번째 인수는 에러를 위해 남겨둔다. 에러가 발생하면 이 인수를 이용해 <code class="language-plaintext highlighter-rouge">callback(err)</code>이 호출된다.</li>
  <li>두 번째 인수는 에러가 발생하지 않았을 때를 위해 남겨둔다. 원하는 동작이 성공한 경우엔 <code class="language-plaintext highlighter-rouge">callback(null, result1, result2)</code>가 호출된다.</li>
</ol>

<h3 id="오류-우선-콜백의-장점">오류 우선 콜백의 장점</h3>

<p>오류 우선 콜백을 사용하면, 단일 콜백 함수에서 에러 케이스와 성공 케이스 모두를 처리할 수 있다.</p>

<h2 id="출처">출처</h2>

<ul>
  <li>코어 자바스크립트</li>
  <li><a href="https://ko.javascript.info/callbacks">모던 자바스크립트 튜토리얼</a></li>
</ul>]]></content><author><name>Sujin Kim</name></author><category term="JavaScript" /><category term="JavaScript" /><category term="콜백" /></entry><entry><title type="html">[클래스] 정적 메서드와 정적 프로퍼티</title><link href="http://localhost:4000/javascript/js-static-method/" rel="alternate" type="text/html" title="[클래스] 정적 메서드와 정적 프로퍼티" /><published>2022-09-05T00:00:00+09:00</published><updated>2022-09-05T22:06:00+09:00</updated><id>http://localhost:4000/javascript/js-static-method</id><content type="html" xml:base="http://localhost:4000/javascript/js-static-method/"><![CDATA[<h2 id="-정적-메서드static-method">📄 정적 메서드(static method)</h2>

<p>정적 메서드는 프로토타입이 아닌 <strong>클래스 함수 자체에 설정되어 있는 메서드</strong>이다.<br />
클래스 안에서 <code class="language-plaintext highlighter-rouge">static</code>이라는 키워드를 사용해서 설정한다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="nf">staticMethod</span><span class="p">()</span> <span class="p">{...}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="정적-메서드의-this는-무엇을-가리킬까">정적 메서드의 this는 무엇을 가리킬까?</h3>

<p>클래스의 메서드가 호출될 때<br />
<code class="language-plaintext highlighter-rouge">this</code>의 값은 <strong>클래스 생성자</strong> 그자체가 된다.<br /></p>

<h3 id="정적-메서드는-언제-사용할까">정적 메서드는 언제 사용할까?</h3>

<p>정적 메서드는 어떤 특정한 객체가 아닌 <strong>클래스에 속한 함수를 구현하고자 할 때</strong> 사용한다.<br />
데이터베이스 관련 클래스에도 사용되곤한다.<br /></p>

<h2 id="-정적-프로퍼티static-property">📄 정적 프로퍼티(static property)</h2>

<p>정적 프로퍼티또한 <code class="language-plaintext highlighter-rouge">static</code>이라는 키워드를 사용한다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="nx">staticProperty</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="정적-프로퍼티는-언제-사용할까">정적 프로퍼티는 언제 사용할까?</h3>

<p>정적 프로퍼티는 데이터를 클래스 수순에 저장하고 싶을 때 사용한다.<br />
정적 프로퍼티 역시 개별 인스턴스에 묶이지 않는다.</p>

<h2 id="정적-프로퍼티와-메서드의-상속">정적 프로퍼티와 메서드의 상속</h2>

<p>정적 프로퍼티와 정적 메서드는 상속이 가능하다.<br /></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Animal</span> <span class="p">{}</span>
<span class="kd">class</span> <span class="nc">Rabbit</span> <span class="kd">extends</span> <span class="nc">Animal</span> <span class="p">{}</span>

<span class="c1">// 정적 메서드</span>
<span class="nx">consol</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">Rabbit</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">Animal</span><span class="p">);</span> <span class="c1">// true</span>

<span class="c1">// 일반 메서드</span>
<span class="nx">consol</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">Rabbit</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">Animal</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>

<p>클래스 <code class="language-plaintext highlighter-rouge">Rabbit</code>의 프로토타입이 클래스 <code class="language-plaintext highlighter-rouge">Animal</code>을 가리키게 한다.<br />
따라서 <code class="language-plaintext highlighter-rouge">Rabbit</code>에서 원하는 프로퍼티나 메서드를 찾지 못하면 <code class="language-plaintext highlighter-rouge">Animal</code>로 검색이 이어진다.</p>

<h2 id="출처">출처</h2>

<p><a href="https://ko.javascript.info/static-properties-methods">모던 자바스크립트 튜토리얼</a></p>]]></content><author><name>Sujin Kim</name></author><category term="JavaScript" /><category term="JavaScript" /><category term="정적메서드" /><category term="정적프로퍼티" /></entry></feed>