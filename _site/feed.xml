<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-09-21T10:12:34+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Sometimes we fall, then we rise ⛵</title><subtitle>주니어 개발자의 꼼질꼼질 성장일지 👻</subtitle><author><name>Sujin Kim</name></author><entry><title type="html">[Next.js] Next.js 13.5 update!</title><link href="http://localhost:4000/nextjs/nextjs-nextjs-13.5-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8/" rel="alternate" type="text/html" title="[Next.js] Next.js 13.5 update!" /><published>2023-09-20T00:00:00+09:00</published><updated>2023-09-20T22:06:00+09:00</updated><id>http://localhost:4000/nextjs/nextjs-nextjs%2013.5%20%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8</id><content type="html" xml:base="http://localhost:4000/nextjs/nextjs-nextjs-13.5-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8/"><![CDATA[<h2 id="-nextjs-135-realize">📄 Next.js 13.5 realize!</h2>

<p>Next.js 13.5 버전이 릴리즈 되었다.</p>

<p>어떤 기능이 향상되었는지 확인 겸 정리한다.</p>

<h3 id="1-시작-및-새로고침-시간-단축">1. 시작 및 새로고침 시간 단축</h3>

<ul>
  <li>로컬 서버 시작 시간 22% 단축</li>
  <li>HMR 시간 29% 단축</li>
  <li>메모리 사용량 40% 감소</li>
</ul>

<blockquote>
  <p>💡 HMR(Hot Module Replacement)? 브라우저를 새로고침하지 않아도 Webpack으로 빌드한 결과물이 웹 애플리케이션에 실시간으로 반영</p>
</blockquote>

<h3 id="2-nextimage-기능-향상">2. next/image 기능 향상</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">unstable_getImgProps</code> 함수 추가</li>
</ul>

<p>기존에 next/image 를 사용하려면 <code class="language-plaintext highlighter-rouge">&lt;Image&gt;</code> 컴포넌트를 사용해야했다. 이번 업데이트 버전에 따르면 <code class="language-plaintext highlighter-rouge">&lt;Image&gt;</code> 컴포넌트를 사용하지 않아도, 이미지를 렌더링 할 수 있다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">unstable_getImgProps</span> <span class="k">as</span> <span class="nx">getImgProps</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next/image</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Page</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">common</span> <span class="o">=</span> <span class="p">{</span> <span class="na">alt</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Hero</span><span class="dl">"</span><span class="p">,</span> <span class="na">width</span><span class="p">:</span> <span class="mi">800</span><span class="p">,</span> <span class="na">height</span><span class="p">:</span> <span class="mi">400</span> <span class="p">};</span>
  <span class="kd">const</span> <span class="p">{</span>
    <span class="na">props</span><span class="p">:</span> <span class="p">{</span> <span class="na">srcSet</span><span class="p">:</span> <span class="nx">dark</span> <span class="p">},</span>
  <span class="p">}</span> <span class="o">=</span> <span class="nx">getImgProps</span><span class="p">({</span> <span class="p">...</span><span class="nx">common</span><span class="p">,</span> <span class="na">src</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/dark.png</span><span class="dl">"</span> <span class="p">});</span>
  <span class="kd">const</span> <span class="p">{</span>
    <span class="na">props</span><span class="p">:</span> <span class="p">{</span> <span class="na">srcSet</span><span class="p">:</span> <span class="nx">light</span><span class="p">,</span> <span class="p">...</span><span class="nx">rest</span> <span class="p">},</span>
  <span class="p">}</span> <span class="o">=</span> <span class="nx">getImgProps</span><span class="p">({</span> <span class="p">...</span><span class="nx">common</span><span class="p">,</span> <span class="na">src</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/light.png</span><span class="dl">"</span> <span class="p">});</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">picture</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">source</span> <span class="nx">media</span><span class="o">=</span><span class="dl">"</span><span class="s2">(prefers-color-scheme: dark)</span><span class="dl">"</span> <span class="nx">srcSet</span><span class="o">=</span><span class="p">{</span><span class="nx">dark</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">source</span> <span class="nx">media</span><span class="o">=</span><span class="dl">"</span><span class="s2">(prefers-color-scheme: light)</span><span class="dl">"</span> <span class="nx">srcSet</span><span class="o">=</span><span class="p">{</span><span class="nx">light</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">img</span> <span class="p">{...</span><span class="nx">rest</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/picture</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<p>이 외에도 Import 최적화 등 자잘한 업데이트 사항이 있지만, 이 두가지가 가장 크게 눈에 들어왔다.</p>

<p>더 확실한건 vercel이 page 라우팅 보다 app 라우팅에 중점을 두고 업데이트를 진행했다는 느낌을 받았다.</p>

<p>app 라우팅의 사용량도 점점 늘고 있는만큼 app 라우팅 기능을 잘 활용할 수 있도록 꾸준히 사용해 보아야겠다.</p>

<h2 id="참고">참고</h2>

<ul>
  <li><a href="https://dev-redcat.tistory.com/12">Next.js란?</a></li>
</ul>]]></content><author><name>Sujin Kim</name></author><category term="Nextjs" /><category term="nextjs" /><category term="업데이트" /><summary type="html"><![CDATA[Next.js 13.5 버전에서 어떤 부분이 달라졌을까?]]></summary></entry><entry><title type="html">[React] react hook, 언제 사용해야 할까?</title><link href="http://localhost:4000/react/react-react-hook-%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C/" rel="alternate" type="text/html" title="[React] react hook, 언제 사용해야 할까?" /><published>2023-09-19T00:00:00+09:00</published><updated>2023-09-19T22:06:00+09:00</updated><id>http://localhost:4000/react/react-react%20hook%20%EC%96%B8%EC%A0%9C%20%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C</id><content type="html" xml:base="http://localhost:4000/react/react-react-hook-%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C/"><![CDATA[<h2 id="-react-hook">📄 react hook?</h2>

<p>리액트 훅 (React hook)은 함수형 컴포넌트에서도 클래스형 컴포넌트의 기능을 사용할 수 있게 해주는 기능이다.</p>

<p>자주 사용되는 리액트 훅의 종류는 다음과 같다.</p>

<ul>
  <li>
    <p>useCallback</p>

    <ul>
      <li>의존성 배열안의 인자가 변경될 때까지 함수를 저장</li>
      <li>하위 컴포넌트의 무의미한 렌더링을 방지할 수 있어 유용</li>
    </ul>
  </li>
  <li>
    <p>useMemo</p>

    <ul>
      <li>의존성 배열안의 인자가 변경될 때까지 계산된 값(value) 저장</li>
      <li>매 렌더링마다 복잡한 계산을 해야하는 상황을 피할 수 있다.</li>
    </ul>
  </li>
  <li>
    <p>useEffect</p>
    <ul>
      <li>모든 컴포넌트가 렌더링 (처음 렌더링) 된 후, 실행</li>
      <li>의존성 배열안의 인자가 변경될 때마다, 첫번째 인자로 등록된 함수가 실행</li>
    </ul>
  </li>
</ul>

<p>리액트 훅은 매우 유용하지만 데이터를 메모리에 저장하는 메모이제이션 기능을 담당하기 때문에, 무분별하게 사용한다면 <span style="text-decoration: underline">의미없는 메모리 낭비</span>가 발생하게 된다.</p>

<p>리액트 훅을 어느 상황에서 사용하는 것이 적절한 것인지 정리해보았다.</p>

<h2 id="-usecallback--리렌더링될-때마다-함수-호출하기-싫어요">📄 useCallback | 리렌더링될 때마다 함수 호출하기 싫어요</h2>

<p><code class="language-plaintext highlighter-rouge">useCallback</code>은 함수를 저장하는 리액트 훅이다.</p>

<p>이때 함수를 저장하다는 것은 함수의 실행 여부를 정한다는 뜻이다.</p>

<p>컴포넌트가 리렌더링된다면 그 안에 종속되어 있는 함수는 매번 호출된다. 간단한 함수라면 문제없지만 api를 통해 데이터를 fetching하는 함수라면 의미없는 api 호출이 계속 발생하게 될 수 있다.</p>

<h3 id="-appjs">💾 App.js</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">getItem()</code>: 데이터 fetching 함수. List에 props로 전달한다.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">List</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./List</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">input</span><span class="p">,</span> <span class="nx">setInput</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">light</span><span class="p">,</span> <span class="nx">setLight</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">getItems</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span><span class="nx">input</span> <span class="o">+</span> <span class="mi">10</span><span class="p">,</span> <span class="nx">input</span> <span class="o">+</span> <span class="mi">100</span><span class="p">];</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">theme</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">backgroundColor</span><span class="p">:</span> <span class="nx">light</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">White</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">grey</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">color</span><span class="p">:</span> <span class="nx">light</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">grey</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">white</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">theme</span><span class="p">}</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">input</span>
          <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">number</span><span class="dl">"</span>
          <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">input</span><span class="p">}</span>
          <span class="nx">onChange</span><span class="o">=</span><span class="p">{(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">setInput</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">))}</span>
        <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">setLight</span><span class="p">((</span><span class="nx">prevLight</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">!</span><span class="nx">prevLight</span><span class="p">)}</span><span class="o">&gt;</span>
          <span class="p">{</span><span class="nx">light</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">dark mode</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">light mode</span><span class="dl">"</span><span class="p">}</span>
        <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">List</span> <span class="nx">getItems</span><span class="o">=</span><span class="p">{</span><span class="nx">getItems</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="-listjs">💾 List.js</h3>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">List</span><span class="p">({</span> <span class="nx">getItems</span> <span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">items</span><span class="p">,</span> <span class="nx">setItems</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">([]);</span>

  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Fetching items</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">setItems</span><span class="p">(</span><span class="nx">getItems</span><span class="p">());</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">getItems</span><span class="p">]);</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="p">{</span><span class="nx">items</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">item</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">item</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="p">))}</span>
    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">List</span><span class="p">;</span>
</code></pre></div></div>

<p>🔍 문제 상황: theme을 바꾸는 버튼을 눌렀을 때 컴포넌트 리렌더링 -&gt; 매 렌더링마다 <code class="language-plaintext highlighter-rouge">getItem()</code>호출되어 계속되는 무의미한 api 호출 <br /></p>

<p>🔦 해결 방법: useCallback 함수로 <code class="language-plaintext highlighter-rouge">getItem()</code>을 저장해 의존성 배열안의 값이 바뀔 때만 함수가 실행되도록 하자!</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getItems</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[</span><span class="nx">input</span> <span class="o">+</span> <span class="mi">10</span><span class="p">,</span> <span class="nx">input</span> <span class="o">+</span> <span class="mi">100</span><span class="p">];</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">input</span><span class="p">]);</span>
</code></pre></div></div>

<p>useCallback함수로 <code class="language-plaintext highlighter-rouge">getItem()</code>는 input값이 변경될 때만 호출되어 무의미한 data fetching을 없애 주었다.</p>

<h2 id="-usememo--usestate-값이-변경될-때마다-발생하는-리렌더링을-막고-싶어요">📄 useMemo | useState 값이 변경될 때마다 발생하는 리렌더링을 막고 싶어요</h2>

<h3 id="-mycomponentjs">💾 MyComponent.js</h3>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">MyComponent</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">data</span><span class="p">,</span> <span class="nx">setData</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">number</span> <span class="o">=</span> <span class="nx">verySlowFunction</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">number</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/div&gt;</span><span class="err">;
</span><span class="p">}</span>

<span class="kd">function</span> <span class="nx">verySlowFunction</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">...</span><span class="nx">heavy</span> <span class="nx">work</span> <span class="nx">done</span> <span class="nx">here</span>
    <span class="k">return</span> <span class="nx">value</span><span class="p">;</span><span class="nx">s</span>
<span class="p">}</span><span class="nx">a</span>
</code></pre></div></div>

<p>🔍 문제 상황: MyComponent가 호출될 때마다, <code class="language-plaintext highlighter-rouge">verySlowFunction()</code>가 호출</p>

<p>🔦 해결 방법: z</p>

<h2 id="참고">참고</h2>

<ul>
  <li><a href="https://www.geeksforgeeks.org/when-to-use-usecallback-usememo-and-useeffect/">When to use useCallback, useMemo and useEffect ?</a></li>
</ul>]]></content><author><name>Sujin Kim</name></author><category term="React" /><category term="useEffect" /><category term="useCallback" /><category term="useMemo" /><summary type="html"><![CDATA[react hook을 사용하는 본격적인 이유]]></summary></entry><entry><title type="html">[React] return null vs return false</title><link href="http://localhost:4000/react/react-return-null-%EA%B3%BC-false%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90/" rel="alternate" type="text/html" title="[React] return null vs return false" /><published>2023-09-18T00:00:00+09:00</published><updated>2023-09-18T22:06:00+09:00</updated><id>http://localhost:4000/react/react-return%20null%20%EA%B3%BC%20false%EC%9D%98%20%EC%B0%A8%EC%9D%B4%EC%A0%90</id><content type="html" xml:base="http://localhost:4000/react/react-return-null-%EA%B3%BC-false%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90/"><![CDATA[<h2 id="-return-null-vs-return-false">📄 return null vs return false</h2>

<p>지금까지 진행했던 프로젝트에서 자바스크립트는 null을 false로 인식해 boolean 체킹을 하기 때문에, boolean타입으로 형변환을 거치지 않고 그대로 null를 반환해서 사용했다.</p>

<p>하지만 리액트의 성능 최적화를 고려한다면, 이 둘을 명확히 구분해서 사용할 필요가 있다.</p>

<h3 id="-null-보다는-false를-사용하자">✅ null 보다는 false를 사용하자!</h3>

<p>null과 false를 반환하는 것에 대한 차이점을 바로 말하자면, <span style="color: #FAAB78; font-weight: bold">리렌더링의 유무</span>이다.</p>

<p>리액트는 null를 유효한 값으로 취급한다.</p>

<p>이말인 즉슨 리액트의 가상 돔이 null을 인식하여 null을 반환하는 하위 컴포넌트를 가진 컴포넌트들이 강제로 리렌더링 된다는 뜻이다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Parent</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Child</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">Child</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Child rendered</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">count</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)}</span><span class="o">&gt;-&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>      <span class="p">{</span><span class="nx">count</span><span class="p">}</span>
      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)}</span><span class="o">&gt;+&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>하위 컴포넌트인 Children이 null을 반환할 때, 상위 컴포넌트인 Parent가 강제로 리렌더링 된다.</li>
</ul>

<p>이 현상을 방지하기 위한 방법이 false를 반환하는 것이다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Parent</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Child</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">Child</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Child rendered</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">count</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)}</span><span class="o">&gt;-&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>      <span class="p">{</span><span class="nx">count</span><span class="p">}</span>
      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)}</span><span class="o">&gt;+&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>하위 컴포넌트인 Children이 false를 반환할 때, 상위 컴포넌트인 Parent가 리렌더링 되지 않는다.</li>
</ul>

<p>리액트의 가상돔이 false를 인식하지 않기 떄문에, 상위 컴포넌트에서 리렌더링이 발생하지 않는다는 것을 알 수 있다.</p>

<h2 id="-정리">📄 정리</h2>

<table>
  <thead>
    <tr>
      <th>return</th>
      <th style="text-align: center">null</th>
      <th style="text-align: center">false</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>차이점</td>
      <td style="text-align: center">상위 컴포넌트 리렌더링 O</td>
      <td style="text-align: center">상위 컴포넌트 리렌더링 X</td>
    </tr>
  </tbody>
</table>

<p>비지니스로직이 아닌 뷰로직으로서 <span style="color: #FAAB78; font-weight: bold">아무것도 반환하지 않겠다</span>는 뜻으로 사용할 때는<span style="color: #FAAB78; font-weight: bold"> false</span>를 사용해 리렌더링을 방지할 수 있다.</p>

<h2 id="참고">참고</h2>

<ul>
  <li><a href="https://medium.com/@davidkelley87/stop-using-return-null-in-react-a2ebf08fc9cd">stop using “return null” in React</a></li>
</ul>]]></content><author><name>Sujin Kim</name></author><category term="React" /><category term="null" /><category term="false" /><category term="return" /><summary type="html"><![CDATA[null 과 false를 반환하는 것에 대한 차이점]]></summary></entry><entry><title type="html">[JavaScript] 내쓰내정 카카오톡 api 사용 후기 및 정리</title><link href="http://localhost:4000/javascript/nextjs-%EC%B9%B4%EC%B9%B4%EC%98%A4%ED%86%A1-api-%EC%82%AC%EC%9A%A9-%ED%9B%84%EA%B8%B0/" rel="alternate" type="text/html" title="[JavaScript] 내쓰내정 카카오톡 api 사용 후기 및 정리" /><published>2023-08-22T00:00:00+09:00</published><updated>2023-08-22T22:06:00+09:00</updated><id>http://localhost:4000/javascript/nextjs-%EC%B9%B4%EC%B9%B4%EC%98%A4%ED%86%A1%20api%20%EC%82%AC%EC%9A%A9%20%ED%9B%84%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/javascript/nextjs-%EC%B9%B4%EC%B9%B4%EC%98%A4%ED%86%A1-api-%EC%82%AC%EC%9A%A9-%ED%9B%84%EA%B8%B0/"><![CDATA[<h2 id="-사용한-카카오톡-api">📄 사용한 카카오톡 api</h2>

<p>프로젝트를 진행하며 카카오톡 api를 사용했다. 주 기능은 <strong>공유하기</strong> 기능과 <strong>카카오 싱크</strong>. 깃허브 로그인은 구현한적이 있는데 기록을 안해서 기억이 하나도 안나더랬다. 그래서 이번엔 또 같은 어려움을 겪기 전에 그리고 또 까먹기 전에 기록한다.</p>

<h2 id="-카카오톡-api를-사용하며-내가-겪었던-삽질들">📄 카카오톡 api를 사용하며 내가 겪었던 삽질들</h2>

<h3 id="1-환경별로-env파일을-따로-관리하자">1. 환경별로 <code class="language-plaintext highlighter-rouge">.env</code>파일을 따로 관리하자</h3>

<p>이번 프로젝트를 진행한 브랜치는 세가지였다.</p>

<ol>
  <li>main</li>
  <li>dev</li>
  <li>test</li>
</ol>

<p>각 브랜치에서 사용한 환경변수는 다음과 같다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">NEXT_PUBLIC_KAKAO_REST_API_KEY</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">비밀이지롱</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">NEXT_PUBLIC_KAKAO_REDIRECT_URL</span> <span class="o">=</span>
  <span class="dl">"</span><span class="s2">http://localhost:3000/카카오 로그인성공하면 이동할 리다이렉트 페이지</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">NEXT_PUBLIC_API_BASE_URL</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">비밀이지롱</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">NEXT_PUBLIC_JS_API_KEY</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">비밀이지롱</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p>⭐️ <strong>브랜치별로 사용하는 uri</strong>가 다르기 때문에 리다이렉트 uri를 다르게 관리해야한다.</p>

<ol>
  <li>
    <p>카카오톡에 등록한 uri 주소로 리다이렉트 해야하기 때문에 배포되는 브랜치 작업의 주소를 기준으로 환경변수를 설정한다.</p>
  </li>
  <li>
    <p>카카오톡 로그인 페이지에서 로그인에 성공하면 등록한 리다이렉트 페이지로 이동하는데 이때 쿼리로 <code class="language-plaintext highlighter-rouge">auth code</code>를 받는다.</p>
  </li>
  <li>
    <p>프론트는 이 <code class="language-plaintext highlighter-rouge">auth code</code>를 백엔드에게 보내고 나머지 로직 (home으로 이동 등)을 리다이렉트 페이지에 작성해서 로그인 과정을 진행한다.</p>
  </li>
  <li>
    <p>백엔드는 받은 <code class="language-plaintext highlighter-rouge">auth code</code>로 token을 요청하는데 이때 로그인페이지로 라우팅될 때 사용한 리다이렉트 uri가 같아야 한다.</p>
  </li>
</ol>

<h3 id="2-authorization-code-not-found-for-code-500-error">2. authorization code not found for code (500 Error)</h3>

<p>카카오톡에서 날려주는 500 error.</p>

<p>⭐️ 이 에러가 발생한 이유는 <strong>동일한 인증코드를 여러번 사용</strong>했기 때문이다.</p>

<p>앞서 사용한 <code class="language-plaintext highlighter-rouge">auth code</code>를 두번이상 사용하면 카카오는 500에러를 전송한다.</p>

<p>이때 아마 로그인 요청이 두번 가게되어 에러가 발생했는데 꽤나 고생했던 것 같다.</p>

<h2 id="-마무리">📄 마무리</h2>

<p>처음 사용하면서 봤을 때는 꽤 어려웠는데 정리하다보니 생각보다 별거 아닌 것 같아서 괜히 허무한 것 같다.</p>

<p>카카오 공식문서 짱~</p>]]></content><author><name>Sujin Kim</name></author><category term="JavaScript" /><category term="카카오톡" /><category term="API" /><summary type="html"><![CDATA[카카오톡 api를 사용하며 헷갈렸던 점들]]></summary></entry><entry><title type="html">[React] React Portal</title><link href="http://localhost:4000/react/react-react-portal/" rel="alternate" type="text/html" title="[React] React Portal" /><published>2023-06-14T00:00:00+09:00</published><updated>2023-06-14T22:06:00+09:00</updated><id>http://localhost:4000/react/react-react%20portal</id><content type="html" xml:base="http://localhost:4000/react/react-react-portal/"><![CDATA[<h2 id="️-react-potal-이란">🗒️ React Potal 이란?</h2>

<ul>
  <li>다른 곳에 있는 element를 렌더링할 수 있다.</li>
  <li>컴포넌트가 종속되어 있는 돔 트리를 벗어나 외부의 다른 돔으로 렌더한다. (어플리케이션은 하나지만 부분적으로 다른 돔에 마운트)</li>
</ul>

<h2 id="️-usemodal-hook">🗒️ useModal hook</h2>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useRef</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createPortal</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">styled</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">useModal</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">modalOpened</span><span class="p">,</span> <span class="nx">setModalOpened</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">openModal</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setModalOpened</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">closeModal</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setModalOpened</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="kr">interface</span> <span class="nx">IProps</span> <span class="p">{</span>
    <span class="na">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="na">ModalPortal</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">FC</span><span class="o">&lt;</span><span class="nx">IProps</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">children</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">ref</span> <span class="o">=</span> <span class="nx">useRef</span><span class="o">&lt;</span><span class="nx">Element</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span><span class="p">();</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">mounted</span><span class="p">,</span> <span class="nx">setMounted</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>

    <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">setMounted</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nb">document</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// dom에 root-modal이 있으면 가져오기</span>
        <span class="kd">const</span> <span class="nx">dom</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">#root-modal</span><span class="dl">"</span><span class="p">);</span>
        <span class="nx">ref</span><span class="p">.</span><span class="nx">current</span> <span class="o">=</span> <span class="nx">dom</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">},</span> <span class="p">[]);</span> <span class="c1">// mount</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">ref</span><span class="p">.</span><span class="nx">current</span> <span class="o">&amp;&amp;</span> <span class="nx">mounted</span> <span class="o">&amp;&amp;</span> <span class="nx">modalOpened</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">createPortal</span><span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">Container</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">div</span>
            <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">modal-background</span><span class="dl">"</span>
            <span class="nx">role</span><span class="o">=</span><span class="dl">"</span><span class="s2">presentation</span><span class="dl">"</span>
            <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">closeModal</span><span class="p">}</span>
          <span class="sr">/</span><span class="err">&gt;
</span>          <span class="p">{</span><span class="nx">children</span><span class="p">}</span>
        <span class="o">&lt;</span><span class="sr">/Container&gt;</span><span class="err">,
</span>        <span class="nx">ref</span><span class="p">.</span><span class="nx">current</span>
      <span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">openModal</span><span class="p">,</span>
    <span class="nx">closeModal</span><span class="p">,</span>
    <span class="nx">ModalPortal</span><span class="p">,</span>
  <span class="p">};</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">useModal</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Container</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 11;
  .modal-background {
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.75);
  }
`</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="️-usemodal-hook-사용하기">🗒️ useModal hook 사용하기</h2>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">styled</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">AirbnbLogoIcon</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../public/static/svg/logo/logo.svg</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">AirbnbLogoTextIcon</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../public/static/svg/logo/logo_text.svg</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Link</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next/link</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">palette</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../styles/palette</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">useModal</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../hooks/useModal</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">SignUpModal</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./auth/SignUpModal</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Header</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">FC</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">openModal</span><span class="p">,</span> <span class="nx">ModalPortal</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useModal</span><span class="p">();</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Container</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">href</span><span class="o">=</span><span class="p">{</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">}</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">header-logo-wrapper</span><span class="dl">"</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">AirbnbLogoIcon</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">header-logo</span><span class="dl">"</span> <span class="o">/&gt;</span>
          <span class="o">&lt;</span><span class="nx">AirbnbLogoTextIcon</span> <span class="o">/&gt;</span>
        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">header-auth-buttons</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">button</span>
          <span class="kd">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span>
          <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">header-sign-up-button</span><span class="dl">"</span>
          <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">openModal</span><span class="p">}</span>
        <span class="o">&gt;</span>
          <span class="nx">회원가입</span>
        <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">button</span> <span class="kd">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">header-login-button</span><span class="dl">"</span><span class="o">&gt;</span>
          <span class="nx">로그인</span>
        <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">ModalPortal</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">SignUpModal</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="sr">/ModalPortal</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/Container</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Header</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Container</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  position: sticky;
  top: 0;
  width: 100%;
  height: 80px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 80px;
  background-color: white;
  box-shadow: rgba(0, 0, 0, 0.08) 0px 1px 12px;
  z-index: 10;
  .header-logo-wrapper {
    display: flex;
    align-items: center;
    .header-logo {
      margin-right: 6px;
    }
  }

  .header-auth-buttons {
    .header-sign-up-button {
      height: 42px;
      margin-right: 8px;
      padding: 0 16px;
      border: 0;
      border-radius: 21px;
      background-color: white;
      cursor: pointer;
      outline: none;
      &amp;:hover {
        background-color: </span><span class="p">${</span><span class="nx">palette</span><span class="p">.</span><span class="nx">gray_f7</span><span class="p">}</span><span class="s2">;
      }
    }
    .header-login-button {
      height: 42px;
      padding: 0 16px;
      border: 0;
      box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.18);
      border-radius: 21px;
      background-color: white;
      cursor: pointer;
      outline: none;
      :hover {
        box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.12);
      }
    }
  }
`</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="참고">참고</h2>

<ul>
  <li>클론 코딩으로 시작하는 Next.js</li>
</ul>]]></content><author><name>Sujin Kim</name></author><category term="React" /><category term="portal" /><category term="modal" /><summary type="html"><![CDATA[리액트 포탈을 사용한 모달 관리법]]></summary></entry><entry><title type="html">[React] forwardRef로 부모컴포넌트에서 자식컴포넌트 DOM에 접근하기</title><link href="http://localhost:4000/react/react-fowardRef%EB%A1%9C-%EB%B6%80%EB%AA%A8%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-%EC%9E%90%EC%8B%9D%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-DOM%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="[React] forwardRef로 부모컴포넌트에서 자식컴포넌트 DOM에 접근하기" /><published>2023-06-01T00:00:00+09:00</published><updated>2023-06-01T22:06:00+09:00</updated><id>http://localhost:4000/react/react-fowardRef%EB%A1%9C%20%EB%B6%80%EB%AA%A8%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C%20%EC%9E%90%EC%8B%9D%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%20DOM%EC%97%90%20%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/react/react-fowardRef%EB%A1%9C-%EB%B6%80%EB%AA%A8%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-%EC%9E%90%EC%8B%9D%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-DOM%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0/"><![CDATA[<h2 id="-리액트-폼-관리하기">📄 리액트 폼 관리하기</h2>

<p>하나의 폼을 관리할 때 input이 각각 파일로 나뉘어져 있다면 관리할 수 있는 방법은 여러가지가 있다.</p>

<ol>
  <li>부모-자식 컴포넌트간 통신</li>
  <li>상태 관리 라이브러리 사용</li>
  <li>Context API 사용</li>
  <li>폼 라이브러리 사용</li>
</ol>

<p>원래는 상태 관리 라이브러리로 form을 관리했지만 해당 state를 구독하는 컴포넌트가 타이핑마다 리렌더링되어 비효율적이라는 생각이 들었다.</p>

<p>그래서 다른 방법이 있나 찾아보던 중 <code class="language-plaintext highlighter-rouge">forwardRef</code>라는 react 훅을 알게 되었다.</p>

<h2 id="-forwardref를-써보자">📄 forwardRef를 써보자</h2>

<ul>
  <li>
    <p>역할: 부모컴포넌트가 자녀 컴포넌트에 ref를 전달할 수 있다.</p>
  </li>
  <li>
    <p>사용법: 자식 컴포넌트를 forwardRef로 감싸준다.</p>
  </li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">inputRef</span> <span class="o">=</span> <span class="nx">useRef</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">focus</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">inputRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
<span class="p">};</span>

<span class="k">return</span> <span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">MyInput</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">inputRef</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">focus</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">포커스</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Input</span> <span class="o">=</span> <span class="p">(</span><span class="nx">ref</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">ref</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">;
</span><span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">forwardRef</span><span class="p">(</span><span class="nx">MyInput</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="-주의할-점">📄 주의할 점</h3>

<p>자녀 컴포넌트가 가진 DOM노드를 외부로 노출시키는 일이므로 캡슐화를 방해할 수 있다.</p>

<p>필요하다면 사용하지만 굳이 필요없다면 최선책으로 사용할만한 방법은 아니다.</p>

<h2 id="출처">출처</h2>

<ul>
  <li><a href="https://www.youtube.com/watch?v=LtYzjv2yXHE&amp;list=PLZ5oZ2KmQEYjVH2ie-sZJnbEE6B-uCVIh&amp;index=6">별코딩 Youtube - React의 ForwardRef란?</a></li>
</ul>]]></content><author><name>Sujin Kim</name></author><category term="React" /><category term="forwardRef" /><summary type="html"><![CDATA[각각 파일로 나뉘어져 있는 input을 어떻게 관리하면 좋을까]]></summary></entry><entry><title type="html">[Next.js] Next.js의 페이지 사전렌더링</title><link href="http://localhost:4000/nextjs/nextjs-next.js%EC%9D%98-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%82%AC%EC%A0%84%EB%A0%8C%EB%8D%94%EB%A7%81/" rel="alternate" type="text/html" title="[Next.js] Next.js의 페이지 사전렌더링" /><published>2023-05-29T00:00:00+09:00</published><updated>2023-06-11T22:06:00+09:00</updated><id>http://localhost:4000/nextjs/nextjs-next.js%EC%9D%98%20%ED%8E%98%EC%9D%B4%EC%A7%80%20%EC%82%AC%EC%A0%84%EB%A0%8C%EB%8D%94%EB%A7%81</id><content type="html" xml:base="http://localhost:4000/nextjs/nextjs-next.js%EC%9D%98-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%82%AC%EC%A0%84%EB%A0%8C%EB%8D%94%EB%A7%81/"><![CDATA[<h2 id="-nextjs가-페이지를-준비하고-사전-렌더링을-하는-방법">📄 Next.js가 페이지를 준비하고 사전 렌더링을 하는 방법</h2>

<blockquote>
  <p>💡 Hydration이란? HTML을 미리 렌더링하고, 그 뒤에 요청이 오면 chunk단위로 js를 보내주어 이벤트가 작동하는 것</p>
</blockquote>

<p>Next.js의 사전렌더링은 기존 리액트의 CRA와 다르게 완성된 HTML을 브라우저에 보내주는 방법이다.</p>

<p>사전 렌더링은 첫번째 페이지에만 적용되며, 첫번째 페이지 렌더링이 끝아면 다시 SPA로 돌아간다.</p>

<p>이렇게 미리 완성된 HTML 페이지를 가져오면 두가지 이점이 생긴다.</p>

<ol>
  <li>사용자는 데이터가 실질적으로 로딩될때까지 기다리지 않아도 된다. =&gt; <strong>사용자 경험 최적화</strong></li>
  <li>구글 검색엔진이 실질적 데이터가 들어있는 HTML코드를 읽고 해석한다. =&gt; <strong>SEO 최적화</strong></li>
</ol>

<p>Next.js 가 사전렌더링을 구현하는 방법은 <strong>SSG, SSR</strong>이 있다.</p>

<p>⭐ 중요한 사실은 Next.js는 어떤 작업을 하지 않아도 기본적으로 사전렌더링을 한다는 점이다. SSG, SSR은 사전렌더링을 하는 방식을 정하기 위한 요소라는 점을 이해해야한다.</p>

<h3 id="-ssgserver-side-generation-static-site-generation">🔴 SSG(Server-Side-Generation, Static-Site-Generation)</h3>

<ul>
  <li>사용 방법: 페이지에 <code class="language-plaintext highlighter-rouge">getStaticProps</code>함수를 추가한다.</li>
  <li>사용 목적
    <ol>
      <li>페이지가 사전 생성되어야 하는 것을 Next.js에게 알려준다.</li>
      <li>만약 Next.js가 사전렌더링을 하지 않도록 설정되었을 때, getStaticProps함수로 특정 페이지를 사전렌더링 하도록 지정할 수 있다.</li>
    </ol>
  </li>
  <li>페이지 생성 시기: 프로젝트 빌드시</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">HomePage</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">products</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">props</span><span class="p">;</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
      <span class="p">{</span><span class="nx">products</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">product</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>      <span class="p">))}</span>
    <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nx">getStaticProps</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="c1">// 항상 객체를 반환한다.</span>
    <span class="na">props</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">products</span><span class="p">:</span> <span class="p">[{</span> <span class="na">id</span><span class="p">:</span> <span class="dl">"</span><span class="s2">p1</span><span class="dl">"</span><span class="p">,</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Product 1</span><span class="dl">"</span> <span class="p">}],</span>
    <span class="p">},</span>
  <span class="p">};</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">HomePage</span><span class="p">;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">getStaticProp</code>가 포함된 페이지 파일이 실행되면 발생하는 순서를 다음과 같다.</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">getStaticProps</code>함수를 먼저 호출한다. 함수안에 컴포넌트에서 사용될 데이터를 페칭해오는 작업을 한다.</li>
  <li>컴포넌트 함수를 실행한다.</li>
</ol>

<h4 id="-ssg를-통해-json데이터-가져오기">🗨 SSG를 통해 JSON데이터 가져오기</h4>

<ul>
  <li>SSG를 하면서 모든 데이터를 파일 내에 저장하지 않고, JSON파일을 불러와 사용하는 방법</li>
</ul>

<ol>
  <li>data 폴더를 생성해 json 파일을 만들어 데이터를 저장한다.</li>
</ol>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
<span class="dl">"</span><span class="s2">products</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
  <span class="p">{</span> <span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">p1</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Product 1</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">This is product 1</span><span class="dl">"</span> <span class="p">},</span>
  <span class="p">{</span> <span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">p2</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Product 2</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">This is product 2</span><span class="dl">"</span> <span class="p">},</span>
  <span class="p">{</span> <span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">p3</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Product 3</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">This is product 3</span><span class="dl">"</span> <span class="p">}</span>
<span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<ol>
  <li>데이터를 사용할 페이지의 <code class="language-plaintext highlighter-rouge">getStaticProps</code>함수에서 데이터를 가져와 return한다.</li>
</ol>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">path</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">path</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">fs</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">fs/promises</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// Node.js 로 부터 파일 시스템 모듈을 임포트</span>

<span class="kd">function</span> <span class="nx">HomePage</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//getStaticProps를 통해 가져온 json데이터를 props를 통해 전달</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">products</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">props</span><span class="p">;</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
      <span class="p">{</span><span class="nx">products</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">product</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>      <span class="p">))}</span>
    <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nx">getStaticProps</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">filePath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">(),</span> <span class="dl">"</span><span class="s2">data</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">dummy-backend.json</span><span class="dl">"</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">jsonData</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">filePath</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">jsonData</span><span class="p">);</span>

  <span class="k">return</span> <span class="p">{</span>
    <span class="na">props</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">products</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">products</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="-isr-증분-정적-생성-활용하기">🗨 ISR (증분 정적 생성) 활용하기</h4>

<ul>
  <li>
    <p>사용 목적: 사전 생성하는 페이지에서 데이터가 계속 <strong>업데이트</strong> 되는 경우에 사용</p>
  </li>
  <li>
    <p>장점: 페이지를 빌드할 때 한 번만 생성하는 것이 아닌 재배포 없이 업데이트 할 수 있다.</p>
  </li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nx">getStaticProps</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">(RE-)Generating...</span><span class="dl">"</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">filePath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">(),</span> <span class="dl">"</span><span class="s2">data</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">dummy-backend.json</span><span class="dl">"</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">jsonData</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">filePath</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">jsonData</span><span class="p">);</span>

  <span class="k">return</span> <span class="p">{</span>
    <span class="na">props</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">products</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">products</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="na">revalidate</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="c1">// 🎉 ISR: 10초마다 주어진 페이지를 Next.js가 재생성한다.</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="https://github.com/SJ0826/next-bnb/assets/56298540/0128068d-b7d6-410c-8990-5d3fc7ea2c0c" alt="image" /></p>

<h4 id="-getstaticprops-구성-옵션-활용하기">🗨 getStaticProps 구성 옵션 활용하기</h4>

<ol>
  <li><code class="language-plaintext highlighter-rouge">notFound</code>: 페이지가 일반 페이지 대신 404 오류 페이지를 렌더링</li>
</ol>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">products</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span> <span class="na">notFound</span><span class="p">:</span> <span class="kc">true</span> <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<ol>
  <li><code class="language-plaintext highlighter-rouge">redirect</code>: 데이터베이스에 엑세스할 수 없을 경우 주로 사용 (데이터 자체가 없을 때)</li>
</ol>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">redirect</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">destination</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/no-data</span><span class="dl">"</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="참고">참고</h2>

<ul>
  <li>
    <p><a href="https://www.udemy.com/course/nextjs-react-incl-two-paths">유데미 Nextjs.&amp;React - 완전 정복 가이드</a></p>
  </li>
  <li>
    <p><a href="https://nextjs.org/docs">Next.js 공식 문서</a></p>
  </li>
</ul>]]></content><author><name>Sujin Kim</name></author><category term="Nextjs" /><category term="SSG" /><category term="SSR" /><summary type="html"><![CDATA[Next.js가 페이지를 사전 렌더링하고 데이터를 페칭하는 방법]]></summary></entry><entry><title type="html">[Next.js] Next.js란?</title><link href="http://localhost:4000/nextjs/nextjs-Nextjs%EB%9E%80/" rel="alternate" type="text/html" title="[Next.js] Next.js란?" /><published>2023-05-17T00:00:00+09:00</published><updated>2023-05-17T22:06:00+09:00</updated><id>http://localhost:4000/nextjs/nextjs-Nextjs%EB%9E%80</id><content type="html" xml:base="http://localhost:4000/nextjs/nextjs-Nextjs%EB%9E%80/"><![CDATA[<h2 id="-nextjs는-무엇일까">📄 Next.js는 무엇일까?</h2>

<ul>
  <li>리액트 프레임 워크</li>
  <li>리액트JS의 풀스택 프레임 워크</li>
</ul>

<p>🎲 리액트를 더 잘 사용하기 위해 만들어진 리액트 프레임워크</p>

<h2 id="-주요-기능">📄 주요 기능</h2>

<ul>
  <li>서버 사이드 렌더링 (사전 렌더링)
    <ul>
      <li>풀스택 프레임워크라 불리는 이유</li>
      <li>리액트 페이지, 컴포넌트를 서버 측에서 미리 렌더링</li>
      <li>SEO에 유리 + 로딩 경험 유리 -&gt; 서버로부터 받은 모든 정보가 html에 포함되어 있기 때문</li>
    </ul>
  </li>
  <li>파일 기반 라우팅
    <ul>
      <li>기존 리액트는 라우터가 아예 없음. 리액트 라우터 사용했음.</li>
      <li>페이지 폴더의 이름으로 url을 결정한다.</li>
    </ul>
  </li>
  <li>⭐ 풀스택 쌉가능
    <ul>
      <li>백엔드 API를 리액트 프로젝트에 추가할 수 있다.</li>
      <li>독립적인 REST API 프로젝트를 구축하지 않아도 된다.</li>
    </ul>
  </li>
</ul>

<h2 id="참고">참고</h2>

<ul>
  <li>
    <p><a href="https://www.udemy.com/course/nextjs-react-incl-two-paths">유데미 Nextjs.&amp;React - 완전 정복 가이드</a></p>
  </li>
  <li>
    <p><a href="https://nextjs.org/docs">Next.js 공식 문서</a></p>
  </li>
</ul>]]></content><author><name>Sujin Kim</name></author><category term="Nextjs" /><category term="Next.js" /><summary type="html"><![CDATA[Next.js 이해하기]]></summary></entry><entry><title type="html">[프로그래머스 / Lv 1] 삼총사 by JS</title><link href="http://localhost:4000/programmers-lv1/programmers-%EC%82%BC%EC%B4%9D%EC%82%AC/" rel="alternate" type="text/html" title="[프로그래머스 / Lv 1] 삼총사 by JS" /><published>2023-05-09T00:00:00+09:00</published><updated>2023-05-05T22:06:00+09:00</updated><id>http://localhost:4000/programmers-lv1/programmers-%EC%82%BC%EC%B4%9D%EC%82%AC</id><content type="html" xml:base="http://localhost:4000/programmers-lv1/programmers-%EC%82%BC%EC%B4%9D%EC%82%AC/"><![CDATA[<h2 id="-문제">📄 문제</h2>

<p>한국중학교에 다니는 학생들은 각자 정수 번호를 갖고 있습니다. 이 학교 학생 3명의 정수 번호를 더했을 때 0이 되면 3명의 학생은 삼총사라고 합니다. 예를 들어, 5명의 학생이 있고, 각각의 정수 번호가 순서대로 -2, 3, 0, 2, -5일 때, 첫 번째, 세 번째, 네 번째 학생의 정수 번호를 더하면 0이므로 세 학생은 삼총사입니다. 또한, 두 번째, 네 번째, 다섯 번째 학생의 정수 번호를 더해도 0이므로 세 학생도 삼총사입니다. 따라서 이 경우 한국중학교에서는 두 가지 방법으로 삼총사를 만들 수 있습니다.</p>

<p>한국중학교 학생들의 번호를 나타내는 정수 배열 number가 매개변수로 주어질 때, 학생들 중 삼총사를 만들 수 있는 방법의 수를 return 하도록 solution 함수를 완성하세요.</p>

<ul>
  <li>3 ≤ number의 길이 ≤ 13</li>
  <li>-1,000 ≤ number의 각 원소 ≤ 1,000</li>
  <li>서로 다른 학생의 정수 번호가 같을 수 있습니다.</li>
</ul>

<h2 id="️-나의-풀이">🙋‍♀️ 나의 풀이</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">number</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">number</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">l</span> <span class="o">&lt;</span> <span class="nx">number</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">l</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">number</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="nx">number</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+</span> <span class="nx">number</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">answer</span><span class="o">++</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>자바스크립트를 공부하면서 삼중 for문은 처음 사용해보았습니다.</p>

<p>이중 for문도 불안한데 삼중으로 중첩되니 달달 떨리네요.</p>

<h2 id="문제-출처">문제 출처</h2>

<ul>
  <li>프로그래머스</li>
</ul>]]></content><author><name>Sujin Kim</name></author><category term="programmers-lv1" /><category term="for문" /><summary type="html"><![CDATA[삼중 for문으로 가능한 조합의 수 구하기]]></summary></entry><entry><title type="html">[React-Query 02] 리액트 쿼리로 페이지네이션 작업하기</title><link href="http://localhost:4000/react/react-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BF%BC%EB%A6%AC%EB%A1%9C-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%84%A4%EC%9D%B4%EC%85%98-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="[React-Query 02] 리액트 쿼리로 페이지네이션 작업하기" /><published>2023-05-08T00:00:00+09:00</published><updated>2023-05-08T22:06:00+09:00</updated><id>http://localhost:4000/react/react-%EB%A6%AC%EC%95%A1%ED%8A%B8%20%EC%BF%BC%EB%A6%AC%EB%A1%9C%20%ED%8E%98%EC%9D%B4%EC%A7%80%EB%84%A4%EC%9D%B4%EC%85%98%20%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/react/react-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BF%BC%EB%A6%AC%EB%A1%9C-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%84%A4%EC%9D%B4%EC%85%98-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0/"><![CDATA[<h2 id="-페이지네이션-작업에-리액트-쿼리가-하는-일">📄 페이지네이션 작업에 리액트 쿼리가 하는 일</h2>

<p>페이지네이션 작업에서 다음 페이지 버튼을 눌렀을 경우에 리액트는 새로운 데이터를 불러오기 위해 api를 호출합니다.</p>

<p>이때 사용자는 데이터를 불러오는 시간만큼 기다려야 하기 때문에 사용자 경험이 안좋아지는 결과를 초래합니다.</p>

<p>리액트 쿼리를 사용해 호출 가능성이 있는 데이터를 미리 불러오는 작업, 즉 <strong>프리페칭(Prefetching)</strong>을 사용해 미리 다음 페이지의 데이터를 불러온다면 사용자는 페이지에 나타날 정보를 위해 기다릴 필요성이 사라지게 됩니다.</p>

<blockquote>
  <p>📌 프리페칭(Prefetching)이란?
호출 가능성이 있는 데이터를 미리 불러오는 작업. 데이터를 미리 불러와 캐시에 데이터를 저장한다.</p>
</blockquote>

<h2 id="-리액트-쿼리로-페이지네이션-구현하기">📄 리액트 쿼리로 페이지네이션 구현하기</h2>

<h3 id="1-쿼리-설정하기">1. 쿼리 설정하기</h3>

<p>페이지네이션을 위해 쿼리를 설정합니다.</p>

<p>페이지 별 게시글을 불러오는 함수를 쿼리함수로 설정했는데 이때 쿼리키를 동일하게 한다면 모든 페이지가 같은 정보를 표시하게 됩니다.</p>

<p>쿼리키를 동일하게 했을 경우 어떤 트리거가 있어야만 데이터를 리페칭할 수 있는데 다음 페이지 버튼을 클릭한다고 트리거가 발생하지 않습니다.</p>

<p>트리거가 발생하는 기준은 다음과 같습니다.</p>

<ol>
  <li>컴포넌트 리마운트</li>
  <li>윈도우 리포커징</li>
  <li>리페칭함수 실행</li>
  <li>자동 리페칭</li>
  <li>mutation 이후 쿼리 무효화</li>
</ol>

<p>이전/다음 버튼을 클릭했을 때 트리거가 발생하도록 <strong>쿼리키를 배열로</strong>작성했습니다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">isError</span><span class="p">,</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">isLoading</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useQuery</span><span class="p">(</span>
  <span class="p">[</span><span class="dl">"</span><span class="s2">posts</span><span class="dl">"</span><span class="p">,</span> <span class="nx">currentPage</span><span class="p">],</span> <span class="c1">// 🎉</span>
  <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">fetchPosts</span><span class="p">(</span><span class="nx">currentPage</span><span class="p">),</span>
  <span class="p">{</span>
    <span class="na">staleTime</span><span class="p">:</span> <span class="mi">2000</span><span class="p">,</span>
    <span class="na">keepPreviousData</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">}</span>
<span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">isLoading</span><span class="p">)</span> <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Loading</span><span class="p">...</span><span class="o">&lt;</span><span class="sr">/h3&gt;</span><span class="err">;
</span><span class="k">if</span> <span class="p">(</span><span class="nx">isError</span><span class="p">)</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Oops</span><span class="p">,</span> <span class="nx">something</span> <span class="nx">went</span> <span class="nx">wrong</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">error</span><span class="p">.</span><span class="nx">toString</span><span class="p">()}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
</code></pre></div></div>

<blockquote>
  <p>📌 keepPreviousData: 새 데이터가 요청되는 동안 마지막으로 성공한 fetch Data로 유지해 사용자 경험을 향상시킬 수 있다.</p>
</blockquote>

<h3 id="2-프리페칭-함수-설정하기">2. 프리페칭 함수 설정하기</h3>

<p>현재 페이지가 변경될 때마다 프리페칭 함수를 실행시키기 위해 <strong>useEffect</strong>함수를 사용합니다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">currentPage</span> <span class="o">&lt;</span> <span class="nx">maxPostPage</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">nextPage</span> <span class="o">=</span> <span class="nx">currentPage</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nx">queryClient</span><span class="p">.</span><span class="nx">prefetchQuery</span><span class="p">([</span><span class="dl">"</span><span class="s2">posts</span><span class="dl">"</span><span class="p">,</span> <span class="nx">nextPage</span><span class="p">],</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">fetchPosts</span><span class="p">(</span><span class="nx">nextPage</span><span class="p">));</span>
  <span class="p">}</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">currentPage</span><span class="p">,</span> <span class="nx">queryClient</span><span class="p">]);</span>
</code></pre></div></div>

<p>최대 페이지 (<code class="language-plaintext highlighter-rouge">maxPostPage</code>)에서는 실행되지 않도록 if 조건문을 사용했습니다.</p>

<p>쿼리를 설정했을 때와 마찬가지로 쿼리키를 배열로 설정합니다.</p>

<h3 id="3-return-함수-작성하기">3. return 함수 작성하기</h3>

<p>각 버튼의 <code class="language-plaintext highlighter-rouge">disabled</code> 속성을 이용해 페이지가 1일 경우, 최대 페이지일 경우에 버튼이 비활성화 되도록 설정합니다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">pages</span><span class="dl">"</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">button</span>
    <span class="nx">disabled</span><span class="o">=</span><span class="p">{</span><span class="nx">currentPage</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">}</span>
    <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">setCurrentPage</span><span class="p">((</span><span class="nx">previosValue</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">previosValue</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}}</span>
  <span class="o">&gt;</span>
    <span class="nx">Previous</span> <span class="nx">page</span>
  <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="nx">span</span><span class="o">&gt;</span><span class="nx">Page</span> <span class="p">{</span><span class="nx">currentPage</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/span</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="nx">button</span>
    <span class="nx">disabled</span><span class="o">=</span><span class="p">{</span><span class="nx">currentPage</span> <span class="o">&gt;=</span> <span class="nx">maxPostPage</span><span class="p">}</span>
    <span class="c1">// onClick함수에 프리페칭 작업을 하지 않는 이유: setState함수는 비동기로 실행되기 때문에 현재 페이지가 무엇인지 정확히 알 방법이 없다.</span>
    <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">setCurrentPage</span><span class="p">((</span><span class="nx">previousValue</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">previousValue</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}}</span>
  <span class="o">&gt;</span>
    <span class="nx">Next</span> <span class="nx">page</span>
  <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span></code></pre></div></div>

<p>프리페칭 함수를 onClick함수에 바로 작성하지 않은 이유가 있습니다.</p>

<p>setState함수는 비동기로 실행되기 때문에 프리페칭이 진행될 시점에는 현재 페이지가 무엇인지 정확히 알 방법이 없기 때문입니다.</p>

<p>따라서 useEffect의 의존성 배열에 조건을 걸어 프리페칭이 실행되도록 하는 것이 적합합니다.</p>

<h2 id="참고">참고</h2>

<ul>
  <li><a href="https://www.udemy.com/course/react-query-react/">udemy - React Query: React로 서버 상태 관리하기</a></li>
</ul>]]></content><author><name>Sujin Kim</name></author><category term="React" /><category term="prefetching" /><category term="keepPreviousData" /><summary type="html"><![CDATA[다음 페이지 데이터 프리페칭하기]]></summary></entry></feed>