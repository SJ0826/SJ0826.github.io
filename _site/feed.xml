<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-05-22T00:04:28+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">SUJIN DEV NOTE 📝</title><subtitle>주니어 개발자의 꼼질꼼질 성장일지 👻</subtitle><author><name>수진‍ (水珍)</name></author><entry><title type="html">[NestJS] 내가 EC2서버에서 CORS 에러지옥에 갇혔던 이유(는 NGINX) + EC2/NextJS/PM2 배포 가이드</title><link href="http://localhost:4000/nestjs/nestjs-%EB%82%B4%EA%B0%80-EC2%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-CORS-%EC%97%90%EB%9F%AC%EC%A7%80%EC%98%A5%EC%97%90-%EA%B0%87%ED%98%94%EB%8D%98-%EC%9D%B4%EC%9C%A0(%EB%8A%94-NginX)/" rel="alternate" type="text/html" title="[NestJS] 내가 EC2서버에서 CORS 에러지옥에 갇혔던 이유(는 NGINX) + EC2/NextJS/PM2 배포 가이드" /><published>2025-05-19T00:00:00+09:00</published><updated>2025-05-19T22:06:00+09:00</updated><id>http://localhost:4000/nestjs/nestjs-%EB%82%B4%EA%B0%80%20EC2%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C%20CORS%20%EC%97%90%EB%9F%AC%EC%A7%80%EC%98%A5%EC%97%90%20%EA%B0%87%ED%98%94%EB%8D%98%20%EC%9D%B4%EC%9C%A0(%EB%8A%94%20NginX)</id><content type="html" xml:base="http://localhost:4000/nestjs/nestjs-%EB%82%B4%EA%B0%80-EC2%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-CORS-%EC%97%90%EB%9F%AC%EC%A7%80%EC%98%A5%EC%97%90-%EA%B0%87%ED%98%94%EB%8D%98-%EC%9D%B4%EC%9C%A0(%EB%8A%94-NginX)/"><![CDATA[<p><img src="/assets/image/nginx.png" alt="image" /></p>

<h2 id="-배경">◾ 배경</h2>
<p>이전에 회사에서 NextJS 프로젝트를 EC2 서버에 배포하며 고생했던 경험이 있습니다. 
이번에는 NestJS 라고 별거 있겠냐며 겁나는 마음을 속이며 배포를 진행하게 되었고, 그때 나를 힘들게 했던 NGINX라는 친구와 다시 만나게 되었습니다.</p>

<p>그렇게 다시 혼쭐이나면서 겪었던 과정을 남겨봅니다.</p>

<h2 id="-내가-nginx를-선택한-이유---https-통신을-하기-위해서">◾ 내가 NGINX를 선택한 이유 - HTTPS 통신을 하기 위해서</h2>
<p>Rebook 프로젝트의 프론트엔드 서버는 AWS Amplify를 통해 간편하게 배포했습니다.
Amplify는 모든 배포 도메인에 <strong>HTTPS가 적용된 보안 인증서</strong>를 기본 제공합니다.</p>

<p>반면, 백엔드 서버는 EC2를 사용했으며, 별도의 설정 없이 기본적으로 <strong>HTTP 도메인</strong>만 제공합니다.</p>

<p>이 때, 프론트엔드 서버와 백엔드 서버 사이에는 Mixed Content 에러가 발생합니다.</p>

<h3 id="mixed-content-에러란">📚Mixed Content 에러란?</h3>

<ul>
  <li>HTTPS 페이지에서 HTTP 리소스를 요청할 때 발생하는 보안 에러</li>
  <li>암호화되지 않은 데이터 전송으로 보안 위협이 발생할 수 있어, 브라우저가 요청 자체를 차단함</li>
  <li>해결 방법
    <ul>
      <li>도메인을 발급하고, SSL 인증서를 적용해 백엔드 서버도 HTTPS로 통신하도록 설정하자!</li>
    </ul>
  </li>
</ul>

<p>NestJS에서도 SSL 인증서를 다룰 수 있지만, 역할을 구분하고 서버에 가해지는 부담을 감소하기 위해 NGINX를 도입했습니다.</p>

<h3 id="-nginx의-역할">📚 NGINX의 역할</h3>
<ul>
  <li>SSL 인증서 관리
    <ul>
      <li>Let’s Encrypt 같은 무료 인증서를 자동으로 갱신</li>
      <li>인증서의 암호화/복호화</li>
    </ul>
  </li>
  <li>인프라 관리 표준 패턴 사용 (TLS Termination)</li>
  <li>간편한 포트 관리 및 리버스 프록시
    <ul>
      <li>NGINX가 80/443 포트에서 요청을 받고, 내부적으로 NestJS 서버로 프록시 요청을 전달함.</li>
      <li>NestJS 서버 포트 노출 없이 보안성과 유연성 확보</li>
    </ul>
  </li>
</ul>

<p>그렇게 NGINX의 설정까지 마친 저는 두가지 CORS에러를 마주하게 됩니다.</p>

<h2 id="-프리플라이트options-요청-실패">◾ 프리플라이트(OPTIONS) 요청 실패</h2>

<h3 id="문제-상황">📝문제 상황</h3>

<ul>
  <li>본 요청 성공적으로 도달하기 전에, 프리플라이트 요청이 404응답으로 돌아옵니다.</li>
</ul>

<p><img src="/assets/image/posts/cors-option.png" alt="image" /></p>

<h3 id="문제-원인">📝문제 원인</h3>

<p>문제의 원인을 찾고자 NGINX 테스트를 진행합니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ubuntu@ip-[<span class="s2">"be 서버 도메인"</span><span class="o">]</span>:~/rebook-api<span class="nv">$ </span><span class="nb">sudo </span>nginx <span class="nt">-t</span>
2025/05/17 09:43:14 <span class="o">[</span>warn] 75575#75575: conflicting server name <span class="s2">"be 서버 도메인"</span> on 0.0.0.0:80, ignored // ✅
2025/05/17 09:43:14 <span class="o">[</span>warn] 75575#75575: conflicting server name <span class="s2">"be 서버 도메인"</span> on 0.0.0.0:443, ignored // ✅
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf <span class="nb">test </span>is successful
</code></pre></div></div>
<p><br /></p>

<p><strong>80 포트와 443 포트에서 충돌</strong>이 나서 요청이 무시되었다는 메세지를 확인했습니다.
이 설정을 작성한 NGINX 설정파일을 확인합니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ubuntu@ip-172-31-13-63:~/rebook-api<span class="nv">$ </span><span class="nb">sudo ls</span> <span class="nt">-l</span> /etc/nginx/sites-enabled/
total 0
lrwxrwxrwx 1 root root 34 May 15 09:46 default -&gt; /etc/nginx/sites-available/default
lrwxrwxrwx 1 root root 33 May 17 07:35 rebook -&gt; /etc/nginx/sites-available/rebook
</code></pre></div></div>

<p>기본(default)설정 파일에 80/443 포트용 server 블록이 중복 선언되어, HTTPS 요청은 수신되지만 실제 처리를 못했습니다.</p>

<p>즉, 백엔드 도메인을 처리하는 <strong>server 블록이 동일 포트(80/443)에서 두 개 이상 선언</strong>되어 충돌이 발생했던 것입니다.</p>

<h3 id="문제-해결">📝문제 해결</h3>

<p><code class="language-plaintext highlighter-rouge">/etc/nginx/sites-available/default</code>을 디렉터리 내에서 제거하고, 오직 <strong>하나의 서버 블록에서만 80/443 요청을 처리</strong>하도록 했습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ubuntu@ip-[<span class="s2">"be 서버 도메인"</span><span class="o">]</span>:~/rebook-api<span class="nv">$ </span><span class="nb">sudo </span>nginx <span class="nt">-t</span>
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf <span class="nb">test </span>is successful // 테스트 성공
</code></pre></div></div>

<h2 id="-nestjs-서버서-요청을-수행하지만-브라우저에는-cors-응답이-떨어져요">◾ NestJS 서버서 요청을 수행하지만 브라우저에는 CORS 응답이 떨어져요</h2>
<p>이 에러는 처음에 원인을 짐작조차 하지 못했습니다.</p>
<ul>
  <li>Status Code:  200 OK</li>
  <li>Response: CORS ERROR</li>
</ul>

<p><img src="/assets/image/posts/cors-header-setting.png" alt="image" /></p>

<p>http-filter 설정도 다시 보고, CORS 설정도 다시 봤지만 문제가 되는 부분은 없었습니다.</p>

<h3 id="문제-원인-1">📝문제 원인</h3>

<p>스크린샷을 자세히 보면 응답 헤더에 <strong>Access-Control-Allow-Origin 헤더</strong>가 없습니다.</p>

<p>정리하자면 이렇습니다.</p>

<ol>
  <li>서버 - 요청을 정상 처리</li>
  <li>브라우저 응답에 CORS 헤더가 없어서 응답 무효 처리</li>
</ol>

<p>NestJS가 정상 응답을 보냈지만, <strong>NGINX에서 Access-Control-Allow-Origin 헤더 설정을 하지 않아 브라우저가 해당 응답을 차단</strong>했습니다.
NGINX를 설정할 때는 주로 백엔드로 들어오는 요청만 고려했지만, 실제로는 브라우저가 응답의 헤더도 검사하기 때문에, 응답에 대한 CORS 설정 또한 반드시 필요하다는 사실을 놓치고 있었습니다.</p>

<h3 id="문제-해결-1">📝문제 해결</h3>

<p>이 문제는 NGINX에서 모든 응답에 CORS 허용 헤더를 추가하며 해결할 수 있었습니다.</p>

<p><strong>💾 /etc/nginx/sites-available/rebook</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
location / <span class="o">{</span>
    add_header <span class="s1">'Access-Control-Allow-Origin'</span> <span class="s1">'[프론트 서버 도메인]'</span> always<span class="p">;</span>  // 특정 도메인에 한해 허용
    add_header <span class="s1">'Access-Control-Allow-Credentials'</span> <span class="s1">'true'</span> always<span class="p">;</span>
    add_header <span class="s1">'Access-Control-Allow-Headers'</span> <span class="s1">'Content-Type, Authorization'</span> always<span class="p">;</span>
    add_header <span class="s1">'Access-Control-Allow-Methods'</span> <span class="s1">'GET, POST, PUT, PATCH, DELETE, OPTIONS'</span> always<span class="p">;</span> // 모든 메서드 허용

    <span class="k">if</span> <span class="o">(</span><span class="nv">$request_method</span> <span class="o">=</span> <span class="s1">'OPTIONS'</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return </span>204<span class="p">;</span>
    <span class="o">}</span>

    proxy_pass http://localhost:4000<span class="p">;</span>
    proxy_http_version 1.1<span class="p">;</span>
    proxy_set_header Upgrade <span class="nv">$http_upgrade</span><span class="p">;</span>
    proxy_set_header Connection <span class="s1">'upgrade'</span><span class="p">;</span>
    proxy_set_header Host <span class="nv">$host</span><span class="p">;</span>
    proxy_cache_bypass <span class="nv">$http_upgrade</span><span class="p">;</span>
<span class="o">}</span>
...
</code></pre></div></div>

<h2 id="-간단-회고">◾ 간단 회고</h2>

<p>NGINX를 처음 회사에서 설정할 때는 인프라에 대해 거의 알지 못하던 상태였습니다.
당시 맨몸으로 부딪히며 작업했던 경험이 이번 프로젝트에 상당한 도움이 되었습니다.</p>

<p>인프라는 처음 접하면 어렵지만, 작업을 하나하나 직접 연결해 흐름이 완성되는 것을 보면 속이 시원합니다.
오늘의 경험이 또 미래에서 헤매고 있는 저에게 도움이 되길 바랍니다.</p>

<h2 id="-추가-ec2--nestjs-간단간단-배포-가이드-명령어-위주">🐞 (추가) EC2 + NestJS 간단간단 배포 가이드 (명령어 위주)</h2>

<h3 id="a-ec2-서버-설정하기-aws-ec2-서버-생성-생략">A. EC2 서버 설정하기 (AWS EC2 서버 생성 생략)</h3>

<table>
  <tbody>
    <tr>
      <td>우분투 기준입니다.</td>
    </tr>
  </tbody>
</table>

<p>✅ STEP 01.  EC2 인스턴스 접근 <br /></p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> ~/.ssh
<span class="nv">$ </span>ssh <span class="nt">-i</span> <span class="s2">"public ip 주소"</span>
</code></pre></div></div>

<p>✅ STEP 02.  프로젝트 디렉터리 소유자 변경 <br /></p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo chown</span> <span class="nt">-R</span> ubuntu:ubuntu <span class="o">[</span>프로젝트 경로]
</code></pre></div></div>
<ul>
  <li>root(기존 소유자)에서 ubuntu로 변경</li>
</ul>

<p>✅ STEP 03.  ecosystem.config.js 생성 <br /></p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">apps</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">rebook-api</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// 애플리케이션 이름</span>
      <span class="na">script</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./dist/src/main.js</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// 실행할 파일</span>
      <span class="na">instances</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="c1">// 싱글 인스턴스 실행 (다중 실행 시 cluster 모드 사용)</span>
      <span class="na">autorestart</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 크래시 발생 시 자동 재시작</span>
      <span class="na">watch</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="c1">// 코드 변경 감지 비활성화 (개발 모드에서는 true 가능)</span>
      <span class="na">max_memory_restart</span><span class="p">:</span> <span class="dl">'</span><span class="s1">300M</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// 메모리 초과 시 재시작</span>
      <span class="na">env</span><span class="p">:</span> <span class="p">{</span>
        <span class="c1">// 💡 기본값 (개발 환경)</span>
        <span class="na">NODE_ENV</span><span class="p">:</span> <span class="dl">'</span><span class="s1">development</span><span class="dl">'</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="na">env_production</span><span class="p">:</span> <span class="p">{</span>
        <span class="c1">// 💡 --env production 사용 시 적용 (운영 환경)</span>
        <span class="na">NODE_ENV</span><span class="p">:</span> <span class="dl">'</span><span class="s1">production</span><span class="dl">'</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">},</span>
  <span class="p">],</span>
<span class="p">};</span>
</code></pre></div></div>
<p>⭐️ PM2로 프로젝트를 실행할 때는, <a href="https://pm2.keymetrics.io/docs/usage/environment/">환경변수를 ecosystem에 작성</a>합니다. 다만, github에서는 중요한 정보가 숨겨져야 하기 때문에 EC2서버에서 직접 설정합니다.</p>

<h3 id="b-nginx-설치--ssl-인증서-발급">B. NGINX 설치 &amp; SSL 인증서 발급</h3>

<p>[📚 NGINX 사용 목적] <br />
▪︎ <strong>HTTPS 요청을 수신</strong> - NGINX가 443 포트에서 브라우저의 요청을 수신 후, Let’s Encrypt SSL 인증서를 보여준다.<br />
▪︎ <strong>TLS 핸드셰이크</strong> - 브라우저가 공개키로 정보를 암호화해서 보내면 NGINX가 개인키로 복호화한다<br />
▪︎ <strong>복호화된 HTTP 요청을 NestJS 서버로 전달</strong> - HTTPS로 받은 요청을 HTTP로 변환해서 내부 NestJS 서버에 보낸다.<br />
▪︎ <strong>HTTP → HTTPS 리다이렉트</strong> - 80포트로 HTTP 요청이 들어오면, NGINX가 자동으로 HTTPS로 리다이렉트한다.<br /></p>

<p>✅ STEP 01.  NGINX 설치</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>apt update <span class="c"># apt: ubuntu 명령어 실행 도구</span>
<span class="nv">$ </span><span class="nb">sudo </span>apt intall nginx <span class="nt">-y</span>

<span class="nv">$ </span><span class="nb">sudo </span>systemctl start nginx <span class="c"># (nginx 실행)</span>
<span class="nv">$ </span><span class="nb">sudo </span>systemctl <span class="nb">enable </span>nginx <span class="c"># (부팅시 nginx 자동 실행)</span>
</code></pre></div></div>
<p><br /></p>

<p>✅ STEP 02. SSL 인증서 발급</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install </span>certbot python3-certbot-nginx <span class="nt">-y</span>
<span class="nv">$ </span><span class="nb">sudo </span>nginx <span class="nt">-t</span> <span class="c"># (NGINX 설정 테스트)</span>
<span class="nv">$ </span><span class="nb">sudo </span>systemctl reload nginx <span class="c"># (변경된 설정 적용)</span>
<span class="nv">$ </span>curl <span class="nt">-I</span> <span class="o">[</span>백엔드 도메인 주소] <span class="c"># (HTTPS 정상 동작 테스트)</span>
<span class="nv">$ </span><span class="nb">sudo </span>systemctl <span class="nb">enable </span>certbot timer <span class="c"># (SSL 인증서 자동 갱신 설정)</span>
</code></pre></div></div>
<p>▪︎ certbot: 무료 SSL 인증서를 발급받고 자동으로 NGINX에 적용. 인증서 발급 도구.<br />
▪︎ python3-certbot-nginx: NGINX와 certbot을 연동하는 플러그인<br />
▪︎ -y: 설치 중 사용자 확인 생략하고 자동 진행<br /></p>

<h3 id="c-nginx-ssl-reverse-proxy-설정">C. NGINX SSL Reverse Proxy 설정</h3>

<p>✅ STEP 01. NGINX 설정파일 생성</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nano /etc/nginx/sites-available/[생성할 설정파일 명]
</code></pre></div></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💾 /etc/nginx/sites-available/[생성할 설정파일 명]

<span class="c"># HTTP 요청은 무조건 HTTPS로 리다이렉트</span>

server <span class="o">{</span>
    listen 80<span class="p">;</span>
    server_name www.rebook.p-e.kr<span class="p">;</span>

    <span class="k">return </span>301 https://<span class="nv">$host$request_uri</span><span class="p">;</span>
<span class="o">}</span>

<span class="c"># HTTPS 처리 서버 블록</span>
server <span class="o">{</span>
    listen 443 ssl<span class="p">;</span>
    server_name <span class="o">[</span>백엔드 서버 도메인 주소]<span class="p">;</span>

    ssl_certificate /etc/letsencrypt/live/www.rebook.p-e.kr/fullchain.pem<span class="p">;</span>
    ssl_certificate_key /etc/letsencrypt/live/www.rebook.p-e.kr/privkey.pem<span class="p">;</span>
    ssl_protocols TLSv1.2 TLSv1.3<span class="p">;</span>
    ssl_ciphers HIGH:!aNULL:!MD5<span class="p">;</span>

    location / <span class="o">{</span>
        <span class="c"># ✅ 모든 응답에 CORS 헤더 추가 </span>
        add_header <span class="s1">'Access-Control-Allow-Origin'</span> <span class="s1">'[프론트 서버 도메인 주소]'</span> always<span class="p">;</span>
        add_header <span class="s1">'Access-Control-Allow-Credentials'</span> <span class="s1">'true'</span> always<span class="p">;</span>
        add_header <span class="s1">'Access-Control-Allow-Headers'</span> <span class="s1">'Content-Type, Authorization'</span> always<span class="p">;</span>
        add_header <span class="s1">'Access-Control-Allow-Methods'</span> <span class="s1">'GET, POST, PUT, PATCH, DELETE, OPTIONS'</span> always<span class="p">;</span>

        <span class="k">if</span> <span class="o">(</span><span class="nv">$request_method</span> <span class="o">=</span> <span class="s1">'OPTIONS'</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return </span>204<span class="p">;</span>
       <span class="o">}</span>

        proxy_pass http://localhost:4000<span class="p">;</span>  <span class="c"># NestJS 서버</span>
        proxy_http_version 1.1<span class="p">;</span>
        proxy_set_header Upgrade <span class="nv">$http_upgrade</span><span class="p">;</span>
        proxy_set_header Connection <span class="s1">'upgrade'</span><span class="p">;</span>
        proxy_set_header Host <span class="nv">$host</span><span class="p">;</span>
        proxy_cache_bypass <span class="nv">$http_upgrade</span><span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>✅ STEP 02. NGINX 심볼링 링크 설정</p>

<p>[📚 NGINX 심볼릭 링크 사용 목적] <br />
▪︎ /etc/nginx/sites-available/ : 설정 파일 보관소 (실제 내용 작성) <br />
▪︎ /etc/nginx/sites-enabled/ : NGINX가 실제로 읽어들이는 활성 설정 <br />
▪︎ 장점: 프로젝트별로 설정을 만들어두고 필요할 때만 심볼릭 링크로 필요할 때만 on/off 가능</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo ln</span> <span class="nt">-s</span> /etc/nginx/sites-available/[프로젝트 이름] /etc/nginx/sites-enabled/[프로젝트 이름]
</code></pre></div></div>
<p><br /></p>]]></content><author><name>수진‍ (水珍)</name></author><category term="NestJS" /><category term="NestJS" /><category term="NGINX" /><category term="PM2" /><category term="EC2" /><category term="AWS" /><summary type="html"><![CDATA[대체 왜 백엔드 서버에서 요청은 수행하는데, 브라우저는 CORS 에러를 보여주는거야!]]></summary></entry><entry><title type="html">[NestJS] NestJS에서 Socket.IO 연결 시 404 에러가 발생하는 이유</title><link href="http://localhost:4000/nestjs/nestjs-NestJS%EC%97%90%EC%84%9C-Socket.IO-%EC%97%B0%EA%B2%B0-%EC%8B%9C-404-%EC%97%90%EB%9F%AC%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%95%9C-%EC%9D%B4%EC%9C%A0/" rel="alternate" type="text/html" title="[NestJS] NestJS에서 Socket.IO 연결 시 404 에러가 발생하는 이유" /><published>2025-04-21T00:00:00+09:00</published><updated>2025-04-21T22:06:00+09:00</updated><id>http://localhost:4000/nestjs/nestjs-NestJS%EC%97%90%EC%84%9C%20Socket.IO%20%EC%97%B0%EA%B2%B0%20%EC%8B%9C%20404%20%EC%97%90%EB%9F%AC%EA%B0%80%20%EB%B0%9C%EC%83%9D%ED%95%9C%20%EC%9D%B4%EC%9C%A0</id><content type="html" xml:base="http://localhost:4000/nestjs/nestjs-NestJS%EC%97%90%EC%84%9C-Socket.IO-%EC%97%B0%EA%B2%B0-%EC%8B%9C-404-%EC%97%90%EB%9F%AC%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%95%9C-%EC%9D%B4%EC%9C%A0/"><![CDATA[<h2 id="️문제-상황">◾️문제 상황</h2>

<p><a href="https://github.com/SJ0826/rebook-api">rebook 프로젝트</a>에서 NestJS + Socket.IO로 실시간 채팅을 구현하려던 도중, <br />클라이언트에서 WebSocket 연결이 안되고 다음과 같은 에러가 발생했습니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET <span class="o">{</span>SERVER_URL<span class="o">}</span>/socket.io/?EIO<span class="o">=</span>4&amp;transport<span class="o">=</span>polling 404 <span class="o">(</span>Not Found<span class="o">)</span>
</code></pre></div></div>
<p><br />
WebSocket 연결 전 polling 요청이 404로 실패하면서 웹소켓 연결 자체가 이루어지지 않았습니다.</p>

<h2 id="-문제-원인">◾ 문제 원인</h2>

<p>404에러 이길래 처음에는 네임스페이스 및 경로 설정 문제인 줄 알았습니다.</p>

<p>Socket.IO는 내부적으로 <strong>HTTP 핸드셰이크를 위해 /socket.io 경로에 polling 요청</strong>을 먼저 보냅니다.</p>

<p>하지만 NestJS는 기본적으로 이 경로를 인식하지 않으며 IoAdapter을 통해 Socket.IO를 Express 서버에 붙여줘야 정상적으로 작동합니다.</p>

<p><strong>💾 ws.adapter.ts</strong></p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">SocketIoAdapter</span> <span class="kd">extends</span> <span class="nx">IoAdapter</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="nx">app</span><span class="p">:</span> <span class="nx">INestApplication</span><span class="p">,</span> <span class="c1">// NestApplication 객체</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="nx">config</span><span class="p">:</span> <span class="nx">ConfigService</span><span class="p">,</span> <span class="c1">// ConfigService</span>
  <span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">();</span> <span class="c1">// ⚠️ HTTP 서버 인스턴스를 super에 전달하지 않았음</span>
  <span class="p">}</span>

  <span class="nx">createIOServer</span><span class="p">(</span><span class="nx">portOrServer</span><span class="p">:</span> <span class="kr">any</span><span class="p">,</span> <span class="nx">options</span><span class="p">?:</span> <span class="nx">ServerOptions</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">serverArg</span> <span class="o">=</span>
      <span class="k">typeof</span> <span class="nx">portOrServer</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">number</span><span class="dl">'</span> <span class="p">?</span> <span class="kc">undefined</span> <span class="p">:</span> <span class="nx">portOrServer</span><span class="p">;</span>

    <span class="kd">const</span> <span class="nx">partialOpts</span><span class="p">:</span> <span class="nb">Partial</span><span class="o">&lt;</span><span class="nx">ServerOptions</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">cors</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">origin</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">CLIENT_URL</span><span class="dl">'</span><span class="p">)</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">http://localhost:3000</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">credentials</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">};</span>

    <span class="k">return</span> <span class="nx">serverArg</span>
      <span class="p">?</span> <span class="k">super</span><span class="p">.</span><span class="nx">createIOServer</span><span class="p">(</span><span class="nx">serverArg</span><span class="p">,</span> <span class="nx">partialOpts</span> <span class="k">as</span> <span class="nx">ServerOptions</span><span class="p">)</span>
      <span class="p">:</span> <span class="k">super</span><span class="p">.</span><span class="nx">createIOServer</span><span class="p">(</span><span class="nx">portOrServer</span><span class="p">,</span> <span class="nx">partialOpts</span> <span class="k">as</span> <span class="nx">ServerOptions</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<ul>
  <li>문제: SocketIoAdapter에서 super()만 호출하고 httpServer를 넘기지 않음</li>
  <li>결과: /socket.io 핸들러가 Express에 등록되지 않아 polling 요청시 404에러가 발생함</li>
</ul>

<p><br /></p>

<h2 id="️-해결-방법">◾️ 해결 방법</h2>

<h3 id="1-어댑터에-httpserver-전달">1. 어댑터에 httpServer 전달</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">SocketIoAdapter</span> <span class="kd">extends</span> <span class="nx">IoAdapter</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="nx">app</span><span class="p">:</span> <span class="nx">INestApplication</span><span class="p">,</span> <span class="c1">// NestApplication 객체</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="nx">config</span><span class="p">:</span> <span class="nx">ConfigService</span><span class="p">,</span> <span class="c1">// ConfigService</span>
  <span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">getHttpServer</span><span class="p">());</span> <span class="c1">// ✅️ HTTP 서버 인스턴스를 super에 전달</span>
  <span class="p">}</span>

  <span class="nx">createIOServer</span><span class="p">(</span><span class="nx">portOrServer</span><span class="p">:</span> <span class="kr">any</span><span class="p">,</span> <span class="nx">options</span><span class="p">?:</span> <span class="nx">ServerOptions</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">serverArg</span> <span class="o">=</span>
      <span class="k">typeof</span> <span class="nx">portOrServer</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">number</span><span class="dl">'</span> <span class="p">?</span> <span class="kc">undefined</span> <span class="p">:</span> <span class="nx">portOrServer</span><span class="p">;</span>

    <span class="kd">const</span> <span class="nx">partialOpts</span><span class="p">:</span> <span class="nb">Partial</span><span class="o">&lt;</span><span class="nx">ServerOptions</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">cors</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">origin</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">CLIENT_URL</span><span class="dl">'</span><span class="p">)</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">http://localhost:3000</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">credentials</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">};</span>

    <span class="k">return</span> <span class="nx">serverArg</span>
      <span class="p">?</span> <span class="k">super</span><span class="p">.</span><span class="nx">createIOServer</span><span class="p">(</span><span class="nx">serverArg</span><span class="p">,</span> <span class="nx">partialOpts</span> <span class="k">as</span> <span class="nx">ServerOptions</span><span class="p">)</span>
      <span class="p">:</span> <span class="k">super</span><span class="p">.</span><span class="nx">createIOServer</span><span class="p">(</span><span class="nx">portOrServer</span><span class="p">,</span> <span class="nx">partialOpts</span> <span class="k">as</span> <span class="nx">ServerOptions</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="2-maints에-어댑터-등록">2. main.ts에 어댑터 등록</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">bootstrap</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">NestFactory</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">AppModule</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">ConfigService</span><span class="p">);</span>

  <span class="nx">app</span><span class="p">.</span><span class="nx">enableCors</span><span class="p">({</span>
    <span class="na">origin</span><span class="p">:</span> <span class="nx">config</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">CLIENT_URL</span><span class="dl">'</span><span class="p">),</span>
    <span class="na">credentials</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">});</span>

  <span class="nx">app</span><span class="p">.</span><span class="nx">useWebSocketAdapter</span><span class="p">(</span><span class="k">new</span> <span class="nx">SocketIoAdapter</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">configService</span><span class="p">));</span>

  <span class="k">await</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">4000</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>httpServer을 제대로 전달해주고나자 polling -&gt; WebSocket 순으로 요청이 성공했습니다.</p>

<p><br /></p>

<h2 id="️-polling---websocket-핸드-셰이크-구조">📖️ polling -&gt; WebSocket 핸드 셰이크 구조</h2>

<h3 id="️-polling---websocket-핸드-셰이크란-">↔️ polling -&gt; WebSocket 핸드 셰이크란 ?</h3>
<ul>
  <li>Socket.IO 연결 구조의 핵심 개념</li>
  <li>WebSocket 연결전 서버와 먼저 HTTP로 연결하고, 그 다음 Websocket으로 업그레이드 하는 과정</li>
</ul>

<p><strong>📌 Socket.IO의 연결 과정</strong></p>
<ol>
  <li>클라이언트가 먼저 polling 방식으로 서버에 연결 시도</li>
  <li>서버가 응답하고, 클라이언트와 서버가 서로 연결 확인</li>
  <li>연결이 확인되면, HTTP연결을 Websocket으로 업그레이드</li>
</ol>

<p><strong>📌 Socket.IO가 핸드셰이크를 사용하는 이유</strong></p>
<ul>
  <li>Websocket을 지원하지 않는 네트워크/브라우저 환경이 아직 존재</li>
  <li>최초연결은 HTTP로 시작해서 WebSocket 연결 가능성을 판단</li>
</ul>

<h2 id="️전체-코드">◾️전체 코드</h2>
<h3 id="️-서버측-코드-nestjs">☑️ 서버측 코드 (NestJS)</h3>

<p><strong>💾 chat.gateway.ts</strong></p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">WebSocketGateway</span><span class="p">({</span>
  <span class="na">cors</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">origin</span><span class="p">:</span> <span class="dl">'</span><span class="s1">{CLIENT_URL}</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">methods</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">],</span>
    <span class="na">allowedHeaders</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Authorization</span><span class="dl">'</span><span class="p">],</span>
    <span class="na">credentials</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">credentials</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
<span class="p">})</span>
</code></pre></div></div>
<p><br /></p>

<p><strong>💾 ws.adapter.ts</strong></p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">IoAdapter</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@nestjs/platform-socket.io</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">INestApplication</span><span class="p">,</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@nestjs/common</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ServerOptions</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">socket.io</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ConfigService</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@nestjs/config</span><span class="dl">'</span><span class="p">;</span>

<span class="c1">// ws 연결 프론트 서버 주소를 동적으로 연결해준다.(dev/prod 구분)</span>
<span class="p">@</span><span class="nd">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">SocketIoAdapter</span> <span class="kd">extends</span> <span class="nx">IoAdapter</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="nx">app</span><span class="p">:</span> <span class="nx">INestApplication</span><span class="p">,</span> <span class="c1">// NestApplication 객체</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="nx">config</span><span class="p">:</span> <span class="nx">ConfigService</span><span class="p">,</span> <span class="c1">// ConfigService</span>
  <span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">getHttpServer</span><span class="p">());</span> <span class="c1">// ⚠️ HTTP 서버 인스턴스를 super에 전달</span>
  <span class="p">}</span>

  <span class="nx">createIOServer</span><span class="p">(</span><span class="nx">portOrServer</span><span class="p">:</span> <span class="kr">any</span><span class="p">,</span> <span class="nx">options</span><span class="p">?:</span> <span class="nx">ServerOptions</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">serverArg</span> <span class="o">=</span>
      <span class="k">typeof</span> <span class="nx">portOrServer</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">number</span><span class="dl">'</span> <span class="p">?</span> <span class="kc">undefined</span> <span class="p">:</span> <span class="nx">portOrServer</span><span class="p">;</span>

    <span class="kd">const</span> <span class="nx">partialOpts</span><span class="p">:</span> <span class="nb">Partial</span><span class="o">&lt;</span><span class="nx">ServerOptions</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">cors</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">origin</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">CLIENT_URL</span><span class="dl">'</span><span class="p">)</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">http://localhost:3000</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">credentials</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">};</span>

    <span class="k">return</span> <span class="nx">serverArg</span>
      <span class="p">?</span> <span class="k">super</span><span class="p">.</span><span class="nx">createIOServer</span><span class="p">(</span><span class="nx">serverArg</span><span class="p">,</span> <span class="nx">partialOpts</span> <span class="k">as</span> <span class="nx">ServerOptions</span><span class="p">)</span>
      <span class="p">:</span> <span class="k">super</span><span class="p">.</span><span class="nx">createIOServer</span><span class="p">(</span><span class="nx">portOrServer</span><span class="p">,</span> <span class="nx">partialOpts</span> <span class="k">as</span> <span class="nx">ServerOptions</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>💾 main.ts</strong></p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">bootstrap</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">NestFactory</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">AppModule</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">ConfigService</span><span class="p">);</span>

  <span class="nx">app</span><span class="p">.</span><span class="nx">enableCors</span><span class="p">({</span>
    <span class="na">origin</span><span class="p">:</span> <span class="nx">config</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">CLIENT_URL</span><span class="dl">'</span><span class="p">),</span>
    <span class="na">credentials</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">});</span>

  <span class="nx">app</span><span class="p">.</span><span class="nx">useWebSocketAdapter</span><span class="p">(</span><span class="k">new</span> <span class="nx">SocketIoAdapter</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">config</span><span class="p">));</span>

  <span class="k">await</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">4000</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p><br /></p>

<h3 id="️-클라이언트측-코드-nextjs">☑️ 클라이언트측 코드 (NextJS)</h3>

<p><strong>💾 useChat.ts</strong></p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useRef</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">io</span><span class="p">,</span> <span class="nx">Socket</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">socket.io-client</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ChatMessage</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/types/chat</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">getChatMessages</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/lib/api/chat</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useAuth</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/hooks/useAuth</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nx">useChat</span><span class="p">(</span>
  <span class="nx">chatRoomId</span><span class="p">:</span> <span class="kr">number</span> <span class="o">|</span> <span class="kc">null</span><span class="p">,</span>
  <span class="nx">onMessagesLoaded</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Dispatch</span><span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">SetStateAction</span><span class="o">&lt;</span><span class="nx">ChatMessage</span><span class="p">[]</span><span class="o">&gt;&gt;</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">accessToken</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useAuth</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">socketRef</span> <span class="o">=</span> <span class="nx">useRef</span><span class="o">&lt;</span><span class="nx">Socket</span><span class="o">&gt;</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>

  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">chatRoomId</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="c1">// 1. 기존 메세지 조회</span>
    <span class="kd">const</span> <span class="nx">loadMessages</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">try</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">getChatMessages</span><span class="p">(</span><span class="nx">chatRoomId</span><span class="p">);</span>
        <span class="nx">onMessagesLoaded</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">메세지 조회 실패</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">};</span>

    <span class="c1">// 2. 소켓 연결 및 방 입장</span>
    <span class="kd">const</span> <span class="nx">connectSocket</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">🔄 소켓 연결 시도:</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="nx">chatRoomId</span><span class="p">,</span> <span class="na">token</span><span class="p">:</span> <span class="o">!!</span><span class="nx">accessToken</span> <span class="p">});</span>

      <span class="nx">socketRef</span><span class="p">.</span><span class="nx">current</span> <span class="o">=</span> <span class="nx">io</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://localhost:4000</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">transports</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">websocket</span><span class="dl">'</span><span class="p">],</span>
        <span class="na">withCredentials</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">auth</span><span class="p">:</span> <span class="p">{</span> <span class="na">token</span><span class="p">:</span> <span class="nx">accessToken</span> <span class="p">},</span>
      <span class="p">});</span>

      <span class="nx">socketRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">connect</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">✅ 소켓 연결 성공!</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">socketRef</span><span class="p">.</span><span class="nx">current</span><span class="p">?.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">joinRoom</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="nx">chatRoomId</span> <span class="p">});</span>
      <span class="p">});</span>

      <span class="nx">socketRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">connect_error</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">❌ 소켓 연결 오류:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
      <span class="p">});</span>

      <span class="c1">// 메세지 수신</span>
      <span class="nx">socketRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">newMessage</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="na">message</span><span class="p">:</span> <span class="nx">ChatMessage</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">📩 새 메시지 수신:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
        <span class="nx">onMessagesLoaded</span><span class="p">((</span><span class="nx">prev</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">[...</span><span class="nx">prev</span><span class="p">,</span> <span class="nx">message</span><span class="p">]);</span>
      <span class="p">});</span>
    <span class="p">};</span>

    <span class="nx">loadMessages</span><span class="p">();</span>
    <span class="nx">connectSocket</span><span class="p">();</span>

    <span class="c1">// cleanup</span>
    <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">socketRef</span><span class="p">.</span><span class="nx">current</span><span class="p">?.</span><span class="nx">disconnect</span><span class="p">();</span>
    <span class="p">};</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">chatRoomId</span><span class="p">,</span> <span class="nx">onMessagesLoaded</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>수진‍ (水珍)</name></author><category term="NestJS" /><category term="NestJS" /><category term="Socket.io" /><category term="adapter" /><category term="rebook" /><summary type="html"><![CDATA[NestJS에서 Socket.IO을 연결할 때는 IoAdapter을 통해 httpServer을 전달해주자]]></summary></entry><entry><title type="html">[네트워크] RefreshToken을 왜 쿠키에 저장해야할까?</title><link href="http://localhost:4000/network/network-RefreshToken%EC%9D%84-%EC%99%9C-%EC%BF%A0%ED%82%A4%EC%97%90-%EC%A0%80%EC%9E%A5%ED%95%B4%EC%95%BC%ED%95%A0%EA%B9%8C/" rel="alternate" type="text/html" title="[네트워크] RefreshToken을 왜 쿠키에 저장해야할까?" /><published>2025-03-17T00:00:00+09:00</published><updated>2025-03-18T22:06:00+09:00</updated><id>http://localhost:4000/network/network-RefreshToken%EC%9D%84%20%EC%99%9C%20%EC%BF%A0%ED%82%A4%EC%97%90%20%EC%A0%80%EC%9E%A5%ED%95%B4%EC%95%BC%ED%95%A0%EA%B9%8C</id><content type="html" xml:base="http://localhost:4000/network/network-RefreshToken%EC%9D%84-%EC%99%9C-%EC%BF%A0%ED%82%A4%EC%97%90-%EC%A0%80%EC%9E%A5%ED%95%B4%EC%95%BC%ED%95%A0%EA%B9%8C/"><![CDATA[<h2 id="-accesstoken은-메모리에-refreshtoken은-쿠키에-저장하게-된-이유">🍪 accessToken은 메모리에, refreshToken은 쿠키에 저장하게 된 이유</h2>
<p>여러 프로젝트를 진행하면서 항상 JWT 토큰을 다뤄왔습니다.
그 과정에서 <strong>토큰 관리 방법</strong>이 궁금해 여러 자료를 찾아봤고, 가장 많이 추천되는 방식은 다음과 같았습니다.</p>

<p>✅ <strong>Access Token</strong> → 프론트엔드의 메모리에 저장<br />
✅ <strong>Refresh Token</strong> → 백엔드 서버에서 HttpOnly 쿠키로 관리</p>

<p>이번 Rebook 프로젝트에서는 프론트엔드와 백엔드 개발을 모두 맡고 있기 때문에,
그동안 궁금했던 이 토큰 관리 방식을 직접 실험해볼 좋은 기회가 되었습니다.</p>

<h2 id="-리프레시-토큰을-왜-쿠키에-저장해야할까">🍪 리프레시 토큰을 왜 쿠키에 저장해야할까?</h2>

<p>리프레시 토큰을 쿠키에 저장한다는 것은 정확히 <strong>HttpOnly Secure 쿠키</strong>에 저장한다는 뜻입니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">setCookieOptions</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">httpOnly</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// ✅ JavaScript에서 접근 불가능 → XSS 방어</span>
  <span class="na">secure</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">production</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// ✅ HTTPS에서만 전송</span>
  <span class="na">sameSite</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">production</span><span class="dl">'</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">none</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">lax</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// ✅ CORS와 일치해야 함</span>
  <span class="na">maxAge</span><span class="p">:</span> <span class="mi">7</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span> <span class="c1">// ✅ 7일 (밀리초)</span>
  <span class="na">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="1-xss-공격-방어">1. XSS 공격 방어</h3>

<h4 id="️-xsscross-site-scripting-크로스-사이트-스크립팅란-">◾️ XSS(Cross-Site Scripting-크로스 사이트 스크립팅)란 ?</h4>
<ul>
  <li>공격자가 웹사이트에 <strong>악성 자바스크립트 코드를 삽입</strong></li>
  <li>자바스크립트 코드를 통해 사용자의 쿠키나 개인정보를 탈취하거나 악성 스크립트 실행</li>
</ul>

<p>자바스크립트에서 쿠키에 접근하려면 보통 아래와 같은 코드를 실행합니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">;</span> 
</code></pre></div></div>

<p>httpOnly 설정은 자바스크립트 코드가 쿠키에 접근하는 것을 방지합니다.</p>

<p>리프레시 토큰은 사용기간도 길고, 계속해서 엑세스 토큰을 발급할 수 있습니다. 따라서 보안 중요성을 높게 가져가기 위해 쿠키에 저장하는 방식을 많이 사용합니다.</p>

<p><br /></p>

<h3 id="2-csrf-공격-방어">2. CSRF 공격 방어</h3>
<h4 id="️csrfcross-site-request-forgery-란">◾️CSRF(Cross-Site Request Forgery) 란?</h4>
<ul>
  <li>공격자가 사용자의 세션을 이용해 <strong>악의적인 요청을 자동으로 보내는 공격</strong></li>
  <li>공격자가 사용자의 세션을 탈취해 임의의 기기에서 원치않은 요청(구매, 비밀번호 변경 등)을 수행할 수 있다.</li>
</ul>

<p>이러한 경우는 직접 리프레시토큰을 보지 않고도 악의적 요청을 보내는 공격 방식입니다.</p>

<p>CSRF 공격 시나리오는 다음과 같습니다.</p>

<ol>
  <li>피해자가 중고책 거래 사이트 Rebook에 로그인한다.</li>
  <li>브라우저는 리프레시토큰을 HttpOnly Secure 쿠키로 저장한다.</li>
  <li>피해자는 공격자가 만든 악성 사이트에 방문한다.</li>
  <li>악성사이트가 백그라운드에서 Rebook 서버로 강제 요청 🧨을 보낸다.</li>
  <li>피해자의 브라우저는 자동으로 로그인된 세션 (쿠키 포함)과 함께 요청을 보낸다.</li>
  <li>결과적으로 사용자의 의도와 관련없는 요청 (구매, 비밀번호 변경 등)을 보낸다.</li>
</ol>

<p>위 시나리오에서 공격자는 직접 리프레시토큰을 탈취하지 않았지만, 피해자의 세션을 악용합니다.</p>

<p>이러한 경우를 막으려면, <strong>다른 사이트에서 요청할 때 쿠키를 자동으로 전송하지 않도록</strong> 해야합니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">res</span><span class="p">.</span><span class="nx">cookie</span><span class="p">(</span><span class="dl">'</span><span class="s1">refreshToken</span><span class="dl">'</span><span class="p">,</span> <span class="nx">refreshToken</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">httpOnly</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> 
  <span class="na">secure</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">production</span><span class="dl">'</span><span class="p">,</span> 
  <span class="na">sameSite</span><span class="p">:</span> <span class="dl">'</span><span class="s1">strict</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// ✅ CSRF 공격 방어 (다른 사이트에서 자동 요청 차단)</span>
  <span class="na">maxAge</span><span class="p">:</span> <span class="mi">7</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span> 
  <span class="na">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span>
<span class="p">});</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="3-프론트엔드의-개발적인-편리함---쿠키-저장-삭제에-관여하지-않는다">3. 프론트엔드의 개발적인 편리함 - 쿠키 저장, 삭제에 관여하지 않는다.</h3>

<p>로컬스토리지나 세션스토리지의 경우에는, 프론트엔드가 직접 정보를 저장하고 삭제하는 코드가 필요합니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">refreshToken</span><span class="dl">'</span><span class="p">,</span> <span class="nx">response</span><span class="p">.</span><span class="nx">refreshToken</span><span class="p">);</span>
</code></pre></div></div>

<p>쿠키에 저장된 값을 관리하는 주체는 백엔드입니다. 
백엔드 서버에서 쿠키에 리프레시토큰을 설정하면, 프론트엔드 개발자가 리프레시 토큰을 저장하는 코드를 직접 작성할 필요가 없습니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">apiClient</span> <span class="o">=</span> <span class="nx">axios</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
  <span class="na">baseURL</span><span class="p">:</span> <span class="dl">'</span><span class="s1">http://localhost:3000</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">withCredentials</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// ✅ 쿠키 자동 포함</span>
<span class="p">});</span>
</code></pre></div></div>

<p>withCredentials을 true로 설정하면, Authorization 헤더를 수동으로 설정할 필요없이 자동으로 쿠키가 포함됩니다.</p>

<p>하지만 HttpOnly 쿠키는 자바스크립트에서 접근할 수 없기 때문에, 프론트엔드에서 로그인 상태를 직접 확인할 수 없어 추가적인 상태관리가 필요합니다.</p>

<p>특히 엑세스토큰을 메모리에 저장하는 방식은 새로고침시 토큰이 유실되는 문제가 발생합니다.
로그인 상태를 유지하려면 LoggedIn 상태를 로컬스토리지에 저장해서 관리해야합니다.</p>

<p><br /></p>

<h2 id="️느낀점">🍪️느낀점</h2>
<p>리프레시토큰을 쿠키로 관리하면서, 보안적으로 고려해야 할 다양한 이슈를 공부할 수 있었습니다.
이전에는 쿠키를 이론으로만 공부하여 이해가 되지 않았던 부분들이, 백엔드 서버에서 직접 쿠키를 설정하고 관리하면서 더욱 명확해졌습니다. <br /></p>

<p>이 방법은 편리함보다는 보안성을 우선하는 방식이라고 생각합니다.
프론트엔드과 백엔드 모두 추가적인 작업이 필요했으며, 특히 NextJS에서 엑세스토큰을 전역 상태(Zustand)로 관리하며 로그인 상태 유지가 중요한 과제가 되었습니다. <br /></p>

<p>구현과정이 다소 복잡해졌지만, 프로젝트가 추구하는 우선 방향이 보안성 강화라면 저는 이 방법을 앞으로도 사용할 예정입니다.</p>]]></content><author><name>수진‍ (水珍)</name></author><category term="network" /><category term="쿠키" /><category term="HTTP" /><category term="accessToken" /><category term="refreshToken" /><category term="JWT" /><category term="NextJS" /><category term="NestJS" /><summary type="html"><![CDATA[rebook 프로젝트에서 accessToken은 메모리로, refreshToken은 쿠키로 관리해보고 쓰는 후기]]></summary></entry><entry><title type="html">[NestJS] NestJS로 배우는 백엔드 프로그래밍 완독 후기</title><link href="http://localhost:4000/nestjs/nestjs-NestJS%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%B0%B1%EC%97%94%EB%93%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%8A%A4%ED%84%B0%EB%94%94-%EB%85%B8%ED%8A%B8/" rel="alternate" type="text/html" title="[NestJS] NestJS로 배우는 백엔드 프로그래밍 완독 후기" /><published>2025-02-09T00:00:00+09:00</published><updated>2025-02-09T22:06:00+09:00</updated><id>http://localhost:4000/nestjs/nestjs-NestJS%EB%A1%9C%20%EB%B0%B0%EC%9A%B0%EB%8A%94%20%EB%B0%B1%EC%97%94%EB%93%9C%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EC%8A%A4%ED%84%B0%EB%94%94%20%EB%85%B8%ED%8A%B8</id><content type="html" xml:base="http://localhost:4000/nestjs/nestjs-NestJS%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%B0%B1%EC%97%94%EB%93%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%8A%A4%ED%84%B0%EB%94%94-%EB%85%B8%ED%8A%B8/"><![CDATA[<p><img src="/assets/image/posts/nestjs-book.jpg" alt="img.png" /></p>

<h2 id="️-책을-완독하고-나서">◾️ 책을 완독하고 나서</h2>
<p><a href="https://polyester-archduke-ab6.notion.site/NestJS-NestJS-191f73e111b3809a8d32ffa142b53c2d?pvs=4">📒노션 스터디 노트</a></p>

<p><a href="https://github.com/SJ0826/nestjs-auth">🐱 실습 프로젝트 Github</a></p>

<h3 id="-추천-대상">😀 추천 대상</h3>
<ul>
  <li>공식문서읽는게 힘들다.</li>
  <li>Nestjs의 기본 핵심개념을 한권으로 정리하고 싶다.</li>
  <li>Typescript 문법에 익숙하다.</li>
</ul>

<h3 id="-비추천-대상">🤨 비추천 대상</h3>
<ul>
  <li>개발이 아예 처음이다.</li>
  <li>Typescript를 전혀 모른다.</li>
  <li>Nestjs의 심화 개념을 공부하고 싶다.</li>
</ul>

<p>NestJS는 먼저 공식문서로 접했습니다.<br />
공식문서가 워낙 잘되어있는터라 기본개념을 쌓기에는 문제가 없지만 한글로 정리된 문서로 개념을 읽고싶어 책을 찾아보게 되었습니다.<br />
책의 구조는 개념 -&gt; 프로젝트 적용 -&gt; 심화 개념 순서로 이루어져 있습니다.<br />
가장 좋았던 점은 책을 완독하면 유저 (인증) 프로젝트를 완성할 수 있어 성취감을 느낄 수 있다는 것이었습니다.<br />
다만 타입스크립트를 다루는 책이 아니기에 어느정도 개발경험이 있어야 속도감있게 책을 읽을 수 있어 개발 입문자에게는 다소 버거울 수 있을 것 같습니다.</p>]]></content><author><name>수진‍ (水珍)</name></author><category term="NestJS" /><category term="NestJS" /><category term="공부" /></entry><entry><title type="html">[NestJS] NestJS가 env 파일을 읽어오지 못했을 때</title><link href="http://localhost:4000/nestjs/nestjs-NestJS%EA%B0%80-env-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%9D%BD%EC%96%B4%EC%98%A4%EC%A7%80-%EB%AA%BB%ED%96%88%EC%9D%84-%EB%95%8C/" rel="alternate" type="text/html" title="[NestJS] NestJS가 env 파일을 읽어오지 못했을 때" /><published>2025-02-08T00:00:00+09:00</published><updated>2025-02-08T22:06:00+09:00</updated><id>http://localhost:4000/nestjs/nestjs-NestJS%EA%B0%80%20env%20%ED%8C%8C%EC%9D%BC%EC%9D%84%20%EC%9D%BD%EC%96%B4%EC%98%A4%EC%A7%80%20%EB%AA%BB%ED%96%88%EC%9D%84%20%EB%95%8C</id><content type="html" xml:base="http://localhost:4000/nestjs/nestjs-NestJS%EA%B0%80-env-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%9D%BD%EC%96%B4%EC%98%A4%EC%A7%80-%EB%AA%BB%ED%96%88%EC%9D%84-%EB%95%8C/"><![CDATA[<h2 id="-문제상황-프로젝트가-env-파일에-접근을-하지-못한다">🪹 문제상황: 프로젝트가 env 파일에 접근을 하지 못한다.</h2>

<p>🐞 error message</p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">ERROR</span> <span class="p">[</span><span class="nx">ExceptionHandler</span><span class="p">]</span> <span class="nb">Error</span><span class="p">:</span> <span class="nx">Config</span> <span class="nx">validation</span> <span class="nx">error</span><span class="p">:</span> <span class="dl">"</span><span class="s2">EMAIL_SERVICE</span><span class="dl">"</span> <span class="k">is</span> <span class="nx">required</span><span class="p">.</span> <span class="dl">"</span><span class="s2">EMAIL_AUTH_USER</span><span class="dl">"</span> <span class="k">is</span> <span class="nx">required</span><span class="p">.</span> <span class="dl">"</span><span class="s2">EMAIL_AUTH_PASSWORD</span><span class="dl">"</span> <span class="k">is</span> <span class="nx">required</span><span class="p">.</span> <span class="dl">"</span><span class="s2">EMAIL_BASE_URL</span><span class="dl">"</span> <span class="k">is</span> <span class="nx">required</span>
</code></pre></div></div>
<p><br /></p>

<p>💾 app.module.ts</p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Module</span><span class="p">({</span>
  <span class="na">imports</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">UsersModule</span><span class="p">,</span>
    <span class="nx">EmailModule</span><span class="p">,</span>
    <span class="nx">ConfigModule</span><span class="p">.</span><span class="nx">forRoot</span><span class="p">({</span>
      <span class="na">envFilePath</span><span class="p">:</span> <span class="p">[</span><span class="s2">`</span><span class="p">${</span><span class="nx">__dirname</span><span class="p">}</span><span class="s2">/config/env/.</span><span class="p">${</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span><span class="p">}</span><span class="s2">.env`</span><span class="p">],</span> 
      <span class="na">load</span><span class="p">:</span> <span class="p">[</span><span class="nx">emailConfig</span><span class="p">],</span>
      <span class="na">isGlobal</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 전역모듈로 설정</span>
      <span class="nx">validationSchema</span><span class="p">,</span> <span class="c1">// joi를 이용해 유효성검사</span>
    <span class="p">}),</span>
    <span class="nx">TypeOrmModule</span><span class="p">.</span><span class="nx">forRoot</span><span class="p">({</span>
      <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">mysql</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">host</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DATABASE_HOST</span><span class="p">,</span>
      <span class="na">port</span><span class="p">:</span> <span class="mi">3306</span><span class="p">,</span>
      <span class="na">username</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DATABASE_USERNAME</span><span class="p">,</span>
      <span class="na">password</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DATABASE_PASSWORD</span><span class="p">,</span>
      <span class="na">database</span><span class="p">:</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">entities</span><span class="p">:</span> <span class="p">[</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/**/*.entity{.ts,.js}</span><span class="dl">'</span><span class="p">],</span> <span class="c1">// TypeORM이 구동될 때 인식하도록 할 엔티티 클래스 경로</span>
      <span class="na">synchronize</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DATABASE_SYNCHRONIZE</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">true</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// dev | 서비스가 실행될 때 DB가 초기화된다.</span>
    <span class="p">}),</span>
  <span class="p">],</span>
  <span class="na">controllers</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[],</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">AppModule</span> <span class="p">{}</span>
</code></pre></div></div>

<p>nest-auth 프로젝트 실행 도중 프로젝트가 env파일을 읽어오지 못했습니다.</p>

<p><code class="language-plaintext highlighter-rouge">cat src/config/env/.development.env</code> ⇒ 성공 <br />
<code class="language-plaintext highlighter-rouge">echo $NODE_ENV</code> ⇒ 성공 (development)</p>

<p>터미널을 통해 env파일을 읽는 것은 성공했지만 ConfigModule에서 env파일에 접근을 하지 못해 경로문제일 것이라 판단했습니다.</p>

<p><br /></p>

<h2 id="-문제-이유-env-파일-경로-문제">🪹 문제 이유: .env 파일 경로 문제</h2>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">envFilePath</span><span class="p">:</span> <span class="p">[</span><span class="s2">`</span><span class="p">${</span><span class="nx">__dirname</span><span class="p">}</span><span class="s2">/config/env/.</span><span class="p">${</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span><span class="p">}</span><span class="s2">.env`</span><span class="p">]</span>
</code></pre></div></div>
<p><strong>ts-node</strong>를 사용할 경우 <strong>__dirname</strong>은 각각 다음과 같은 위치를 가리킵니다.</p>

<ul>
  <li>빌드 전: src 폴더</li>
  <li>빌드 후: dist 폴더</li>
</ul>

<p>빌드 후 src폴더일 것이라는 예상과 달리  <strong>__dirname</strong>가 dist 폴더를 가리키게 되어 env파일을 찾지 못하고 에러가 발생한 것입니다.</p>

<p><br /></p>

<h2 id="-문제-해결-envfilepath-경로-재설정">🪺 문제 해결: envFilePath 경로 재설정</h2>
<p>envFilePath 경로를 재설정해 현재 작업 디렉토리(process.cwd())를 기준으로 경로를 지정하겠습니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">envFilePath</span><span class="p">:</span> <span class="p">[</span><span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">(),</span> <span class="s2">`src/config/env/.</span><span class="p">${</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span><span class="p">}</span><span class="s2">.env`</span><span class="p">)]</span>
</code></pre></div></div>

<p>문제없이 프로젝트가 실행되었습니다.</p>

<p><img src="/assets/image/posts/nextjs-env-bug.png" alt="image" /></p>]]></content><author><name>수진‍ (水珍)</name></author><category term="NestJS" /><category term="NestJS" /><category term="env" /><category term="error" /><summary type="html"><![CDATA[빌드 전 envFilePath 경로와 빌드 후 envFilePath 경로가 달라요]]></summary></entry><entry><title type="html">[Next.js 14] npm 패키지 배포 가이드</title><link href="http://localhost:4000/nextjs/nextjs-npm-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%B0%B0%ED%8F%AC-%EA%B0%80%EC%9D%B4%EB%93%9C/" rel="alternate" type="text/html" title="[Next.js 14] npm 패키지 배포 가이드" /><published>2024-11-25T00:00:00+09:00</published><updated>2024-07-10T22:06:00+09:00</updated><id>http://localhost:4000/nextjs/nextjs-npm%20%ED%8C%A8%ED%82%A4%EC%A7%80%20%EB%B0%B0%ED%8F%AC%20%EA%B0%80%EC%9D%B4%EB%93%9C</id><content type="html" xml:base="http://localhost:4000/nextjs/nextjs-npm-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%B0%B0%ED%8F%AC-%EA%B0%80%EC%9D%B4%EB%93%9C/"><![CDATA[<h2 id="-목적">■ 목적</h2>
<ul>
  <li>어드민 디자인 시스템 컴포넌트와 에셋을 패키지로 배포해 관리</li>
  <li>아토믹 디자인 패턴을 사용해 컴포넌트를 체계적으로 설계 및 개발</li>
  <li>컴포넌트 유지보수성을 높이고, 일관된 UI/UX를 제공하며, 개발 속도를 향상</li>
</ul>

<h2 id="-프로젝트-환경">■ 프로젝트 환경</h2>
<ul>
  <li>next.js 14</li>
  <li>react 18</li>
  <li>tailwindcss 3.4.1</li>
</ul>

<h2 id="-배포-순서">■ 배포 순서</h2>

<h3 id="1-srcexportts-를-생성합니다">1. src/export.ts 를 생성합니다</h3>

<p>패키지로 배포할 컴포넌트를 export.ts 파일에 선언합니다. (파일 경로와 이름은 변경가능합니다)</p>

<p><strong>💾 src/export.ts</strong></p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="p">{</span><span class="k">default</span> <span class="k">as</span> <span class="nx">SujinButton</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./app/components/common/Button</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="2-tsconfigbuildjson-을-생성합니다">2. tsconfig.build.json 을 생성합니다.</h3>

<ul>
  <li>(기존) tsconfig.json: Next.js 어플리케이션 코드 빌드용</li>
  <li>(생성) tsconfig.build.json: 패키지 배포 코드 빌드용</li>
</ul>

<p><strong>💾 tsconfig.build.json</strong></p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="dl">"</span><span class="s2">compilerOptions</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">lib</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">dom</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">dom.iterable</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">esnext</span><span class="dl">"</span><span class="p">],</span> <span class="c1">// 프로젝트에서 사용할 JavaScript 표준 라이브러리</span>
    <span class="dl">"</span><span class="s2">target</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ESNext</span><span class="dl">"</span><span class="p">,</span>  <span class="c1">// 컴파일 대상 ECMAScript 버전</span>
    <span class="dl">"</span><span class="s2">allowJs</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// JavaScript 파일을 TypeScript 코드로 포함할 수 있도록 허용</span>
    <span class="dl">"</span><span class="s2">skipLibCheck</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 외부 라이브러리 타입 검사 건너뛰기</span>
    <span class="dl">"</span><span class="s2">strict</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>  <span class="c1">// 엄격 모드 활성화</span>
    <span class="dl">"</span><span class="s2">noEmit</span><span class="dl">"</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="c1">// 컴파일된 출력 파일 생성 여부</span>
    <span class="dl">"</span><span class="s2">allowSyntheticDefaultImports</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 기본(default) 내보내기를 허용할지 여부</span>
    <span class="dl">"</span><span class="s2">esModuleInterop</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// CommonJS(require)와 ES Module(import) 간의 호환성 설정</span>
    <span class="dl">"</span><span class="s2">forceConsistentCasingInFileNames</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 파일 이름 대소문자 불일치를 방지</span>
    <span class="dl">"</span><span class="s2">noFallthroughCasesInSwitch</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// switch 문에서 case가 누락되지 않도록 방지</span>
    <span class="dl">"</span><span class="s2">module</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">esnext</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// 사용할 모듈 시스템</span>
    <span class="dl">"</span><span class="s2">moduleResolution</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">node</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// 모듈 해석 방식을 정의</span>
    <span class="dl">"</span><span class="s2">resolveJsonModule</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// JSON 파일을 모듈로 가져오기 허용</span>
    <span class="dl">"</span><span class="s2">isolatedModules</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 개별 파일을 독립적으로 컴파일</span>
    <span class="dl">"</span><span class="s2">jsx</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">react-jsx</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// React JSX 구문 설정 - React 17+의 새로운 JSX 변환 방식 사용</span>
    <span class="dl">"</span><span class="s2">incremental</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// TypeScript 이전 빌드 결과를 재사용하여 빌드 속도 향상(증분 빌드)</span>
    <span class="dl">"</span><span class="s2">outDir</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">dist</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// 컴파일된 파일의 출력 디렉토리</span>
    <span class="dl">"</span><span class="s2">declaration</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 타입 정의 파일 생성 여부 (.d.ts)</span>
    <span class="dl">"</span><span class="s2">plugins</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">next</span><span class="dl">"</span>
      <span class="p">}</span>
    <span class="p">],</span>
    <span class="dl">"</span><span class="s2">paths</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
      <span class="dl">"</span><span class="s2">@/*</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">./src/*</span><span class="dl">"</span><span class="p">]</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="dl">"</span><span class="s2">include</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span> <span class="dl">"</span><span class="s2">**/tailwind.config.ts</span><span class="dl">"</span><span class="p">,</span>  <span class="dl">"</span><span class="s2">src/export.ts</span><span class="dl">"</span><span class="p">],</span>
  <span class="dl">"</span><span class="s2">exclude</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">node_modules</span><span class="dl">"</span><span class="p">]</span>
<span class="p">}</span>

</code></pre></div></div>
<ul>
  <li>include
    <ul>
      <li><code class="language-plaintext highlighter-rouge">**/tailwind.config.ts</code> : tailwind 설정 (asset, font) 공유</li>
      <li><code class="language-plaintext highlighter-rouge">src/export.ts</code> : 컴포넌트 공유</li>
    </ul>
  </li>
</ul>

<h3 id="3-packagejson을-수정합니다">3. package.json을 수정합니다.</h3>

<p><strong>💾 package.json</strong></p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">sujin-design-system</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">version</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">0.1.5</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// 패키지를 새로 배포할 때마다 버전을 업그레이드 해야합니다.</span>
  <span class="dl">"</span><span class="s2">main</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">dist/src/export.js</span><span class="dl">"</span><span class="p">,</span> 
  <span class="dl">"</span><span class="s2">types</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">dist/src/export.d.ts</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">files</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
    <span class="dl">"</span><span class="s2">dist</span><span class="dl">"</span>
  <span class="p">],</span>
  <span class="dl">"</span><span class="s2">scripts</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">dev</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">next dev</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">next:build</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">next build</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">start</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">next start</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">lint</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">next lint</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">build</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">rm -rf dist &amp;&amp; tsc -p tsconfig.build.json</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">prepublishOnly</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">npm run build</span><span class="dl">"</span>
  <span class="p">},</span>
  <span class="dl">"</span><span class="s2">dependencies</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^18</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">react-dom</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^18</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">next</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">14.2.18</span><span class="dl">"</span>
  <span class="p">},</span>
  <span class="dl">"</span><span class="s2">devDependencies</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">typescript</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^5</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">@types/node</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^20</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">@types/react</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^18</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">@types/react-dom</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^18</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">postcss</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^8</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">tailwindcss</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^3.4.1</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">eslint</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^8</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">eslint-config-next</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">14.2.18</span><span class="dl">"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">main</code>: 패키지를 설치한 후 패키지를 사용할 때 진입점. 가장 먼저 로드되는 파일을 지정.</li>
  <li><code class="language-plaintext highlighter-rouge">types</code> : 타입스크립트 타입 정의 파일</li>
</ul>

<p>package.json을 수정하고 npm run build 스크립트를 실행하면 dist폴더가 생성됩니다.</p>

<p><img src="/assets/image/posts/nextjs-npm-deploy.png" alt="image" /></p>

<h3 id="4-npm에-패키지-배포하기">4. npm에 패키지 배포하기</h3>

<ol>
  <li><code class="language-plaintext highlighter-rouge">npm login</code> : 스크립트를 실행하고 브라우저에서 로그인합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">npm build</code> : 패키지에 필요한 빌드파일을 생성합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">npm publish</code> : 생성한 빌드 파일을 npm에 배포합니다.</li>
</ol>

<p>배포에 성공하면 <a href="https://www.npmjs.com/">npm</a>에서 배포한 패키지를 확인 할 수 있습니다.</p>

<p><img src="/assets/image/posts/nextjs-npm-deploy-2.png" alt="image" /></p>

<h3 id="5-배포한-패키지-사용하기">5. 배포한 패키지 사용하기</h3>

<p>먼저 배포한 패키지를 사용할 프로젝트에서 패키지를 다운받습니다.</p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">i</span> <span class="nx">sujin</span><span class="o">-</span><span class="nx">design</span><span class="o">-</span><span class="nx">system</span>
</code></pre></div></div>

<p>tailwind.config.ts 파일에서 패키지를 presets에 적용합니다.</p>

<p><strong>💾 tailwind.config.ts</strong></p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">sujin</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">sujin-design-system/dist/tailwind.config</span><span class="dl">'</span><span class="p">;</span>

<span class="kr">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">presets</span><span class="p">:</span> <span class="p">[</span><span class="nx">sujin</span><span class="p">],</span> <span class="c1">// ✅ preset으로 패키지의 tailwind 설정 적용</span>
  <span class="na">content</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">./src/**/*.{js,jsx,ts,tsx}</span><span class="dl">'</span><span class="p">],</span>

</code></pre></div></div>

<p>설정을 완료하면 패키지의 에셋과 컴포넌트를 사용할 수 있습니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">SujinButton</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">sujin-design-system</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// 👍</span>
</code></pre></div></div>
<h2 id="참고">참고</h2>
<ul>
  <li><a href="https://blacksheepcode.com/posts/publish_a_react_package_using_nextjs_as_a_base">blacksheepcode - publish_a_react_package_using_nextjs_as_a_base</a></li>
</ul>]]></content><author><name>수진‍ (水珍)</name></author><category term="Nextjs" /><category term="npm" /><category term="배포" /><summary type="html"><![CDATA[컴포넌트를 패키지로 배포해 다른 프로젝트에 공유하기]]></summary></entry><entry><title type="html">[Next.js 13] 클라이언트 컴포넌트가 정말 클라이언트 사이드에서만 렌더링 될까 ?</title><link href="http://localhost:4000/nextjs/nextjs-Error-occured-prerendering-page/" rel="alternate" type="text/html" title="[Next.js 13] 클라이언트 컴포넌트가 정말 클라이언트 사이드에서만 렌더링 될까 ?" /><published>2024-07-10T00:00:00+09:00</published><updated>2024-07-10T22:06:00+09:00</updated><id>http://localhost:4000/nextjs/nextjs-Error%20occured%20prerendering%20page</id><content type="html" xml:base="http://localhost:4000/nextjs/nextjs-Error-occured-prerendering-page/"><![CDATA[<h2 id="️문제-발생">◾️문제 발생</h2>

<p>react-draft-wysiwyg 를 사용한 컴포넌트를 페이지 컴포넌트에 import했습니다.
페이지는 성공적으로 렌더링 되었지만 터미널에서 에러를 확인할 수 있었습니다. 빌드시에도 동일한 에러가 발생합니다.</p>

<p><img src="/assets/image/posts/nextjs-prerendering-error.png" alt="image" /></p>

<p><code class="language-plaintext highlighter-rouge">use client</code>를 최상단에 선언했었기에, 클리이언트 컴포넌라고 생각했고 서버 컴포넌트에서 날 법한 프리렌더링 에러가 발생하는 것이 이해가 가지 않았습니다.</p>

<h2 id="️-문제-원인">◾️ 문제 원인</h2>

<p>문제가 발생한 이유는 다음과 같습니다.</p>

<ul>
  <li>Next.js 13 컴포넌트는 <strong>서버에서 사전 렌더링</strong>되고 <strong>클라이언트에서 하이드레이션</strong>된다.</li>
  <li>따라서 <code class="language-plaintext highlighter-rouge">use client</code> 를 선언한다고해서 클라이언트에서만 렌더링 되는 것은 아니다.</li>
</ul>

<p>컴포넌트에서 window객체에 접근하는데, 서버에서 사전 렌더링되는 과정에서 window객체를 찾지 못해 에러가 발생한 것이었습니다.
클라이언트 단에서만 실행되어야하는 코드는 서버에서 실행되지 않도록 설정이 필요합니다.</p>

<h2 id="️-문제-해결">◾️ 문제 해결</h2>

<h3 id="️-방법-1-dynamic-import-동적-임포트로-ssr-옵션-끄기">✔️ 방법 1. dynamic import (동적 임포트)로 SSR 옵션 끄기</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">NoticeForm</span> <span class="o">=</span> <span class="nx">dynamic</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="k">import</span><span class="p">(</span><span class="dl">'</span><span class="s1">@/components/notice/NoticeForm</span><span class="dl">'</span><span class="p">),</span> <span class="p">{</span>
  <span class="na">ssr</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Next.js 의 <strong>dynamic import</strong> 기능을 활용해 <strong>서버 측 렌더링을 비활성화</strong>했습니다.
dynamic import는 컴포넌트 외부에서 선언해야합니다.</p>

<p>다만 이 방법은 해당 에러가 발생하는 모든 컴포넌트를 동적으로 import해야하는 번거로움이 있었고, 에러 원인을 찾던 중 전역으로 설정해주는 방법이 있었습니다.</p>

<h3 id="️-방법-2-컨텍스트를-사용한-custom-hook-만들기">✔️ 방법 2. 컨텍스트를 사용한 custom hook 만들기</h3>

<p>동적 임포트 매커니즘을 컴포넌트마다 반복적으로 구현하는 대신, <strong>컨텍스트를 사용해 전역에서 관리</strong>하는 방법도 있습니다.</p>

<p>useEffect와 useState 훅을 사용한 커스텀 훅을 통해 클라이언트 환경을 실행조건으로 설정할 수 있었습니다.</p>

<p>이렇게하면 서버에서의 사전렌더링과 클라이언트의 첫번째 렌더링이 일치해 하이드레이션 오류도 방지할 수 있습니다.</p>

<p><strong>💾 useIsClient.tsx</strong></p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">'</span><span class="s1">use client</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">createContext</span><span class="p">,</span> <span class="nx">useContext</span><span class="p">,</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">IsClientCtx</span> <span class="o">=</span> <span class="nx">createContext</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">IsClientCtxProvider</span> <span class="o">=</span> <span class="p">({</span>
  <span class="nx">children</span><span class="p">,</span>
<span class="p">}:</span> <span class="p">{</span>
  <span class="nl">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span><span class="p">;</span>
<span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">isClient</span><span class="p">,</span> <span class="nx">setIsClient</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">setIsClient</span><span class="p">(</span><span class="kc">true</span><span class="p">),</span> <span class="p">[]);</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">IsClientCtx</span><span class="p">.</span><span class="nx">Provider</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">isClient</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">children</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/IsClientCtx.Provider</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nx">useIsClient</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">useContext</span><span class="p">(</span><span class="nx">IsClientCtx</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>💾 app/layout.tsx</strong></p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="kd">type</span> <span class="p">{</span> <span class="nx">Metadata</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">'</span><span class="s1">./globals.css</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">IsClientCtxProvider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/hooks/useIsClient</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">metadata</span><span class="p">:</span> <span class="nx">Metadata</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Project</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">description</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Generated by create next app</span><span class="dl">'</span><span class="p">,</span>
<span class="p">};</span>


<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">RootLayout</span><span class="p">({</span>
  <span class="nx">children</span><span class="p">,</span>
<span class="p">}:</span> <span class="nb">Readonly</span><span class="o">&lt;</span><span class="p">{</span>
  <span class="na">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span><span class="p">;</span>
<span class="p">}</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">html</span> <span class="nx">lang</span><span class="o">=</span><span class="dl">"</span><span class="s2">en</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">IsClientCtxProvider</span><span class="o">&gt;</span>
					<span class="p">{</span><span class="nx">children</span><span class="p">}</span>
        <span class="o">&lt;</span><span class="sr">/IsClientCtxProvider</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/body</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/html</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>💾 사용예시</strong></p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useIsClient</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./is-client-ctx</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">MyComponent</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">isClient</span> <span class="o">=</span> <span class="nx">useIsClient</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">scrollPosition</span> <span class="o">=</span> <span class="nx">useScrollPosition</span><span class="p">();</span> <span class="c1">// 예시를 위한 가상 훅</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="p">{</span><span class="nx">scrollPosition</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">&lt;</span><span class="nx">FirstModule</span> <span class="o">/&gt;</span><span class="p">}</span>
      <span class="p">{</span><span class="nx">isClient</span> <span class="o">&amp;&amp;</span> <span class="nx">scrollPosition</span> <span class="o">&gt;=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="o">&lt;</span><span class="nx">SecondModule</span> <span class="o">/&gt;</span><span class="p">}</span>
    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<p>useIsClient.tsx 훅을 통해 서버에서 렌더링할 수 있는 부분을 먼저 렌더링 후, 클라이언트 조건에 따라 업데이트 (두번째 렌더링)을 실행합니다. 이 방식을 통해 하이드레이션 오류를 피하면서 필요한 경우 클라이언트 측 업데이트를 수행할 수 있었습니다.</p>

<h2 id="참고">참고</h2>
<ul>
  <li><a href="https://stackoverflow.com/questions/75692116/next-js-13-window-is-not-defined">stackoverflow - next-js-13-window-is-not-defined</a></li>
</ul>]]></content><author><name>수진‍ (水珍)</name></author><category term="Nextjs" /><category term="prerendering" /><category term="서버 컴포넌트" /><category term="use client" /><category term="에러" /><summary type="html"><![CDATA[클라이언트 컴포넌트에서 prerendering 에러가 발생한 이유]]></summary></entry><entry><title type="html">[JS] CJS와 ESM | 자바스크립트의 모듈화</title><link href="http://localhost:4000/javascript/js-function/" rel="alternate" type="text/html" title="[JS] CJS와 ESM | 자바스크립트의 모듈화" /><published>2024-07-09T00:00:00+09:00</published><updated>2024-07-09T22:06:00+09:00</updated><id>http://localhost:4000/javascript/js-function</id><content type="html" xml:base="http://localhost:4000/javascript/js-function/"><![CDATA[<h2 id="-자바스크립트의-모듈화">📝 자바스크립트의 모듈화</h2>

<p>모듈화는 코드를 작은 조각 또는 파일로 나누어 관리하는 방법입니다. <br />
초기 자바스크립트는 하나의 자바스크립트 파일에 모든 기능을 담아야 했습니다. 이로인해 가독성이 떨어지고 복잡성이 증가되는 등 문제가 발생하였습니다. <br />
자바스크립트의 역할이 커지며 모듈화의 필요성이 증가했고 CJS, ESM 등의 방법이 등장했습니다.</p>

<h2 id="-cjs와-esm--자바스크립트를-모듈화-하는-방식">📝 CJS와 ESM | 자바스크립트를 모듈화 하는 방식</h2>

<h3 id="-cjs-commonjs-방식">■ CJS (CommonJS) 방식</h3>

<ul>
  <li><strong>require</strong>과 <strong>module.exports</strong>를 사용</li>
  <li>Node.js 환경에서 사용 (오직 서버사이드에서만 활용)</li>
  <li>동기적으로 로드
    <ul>
      <li>모듈이 완전히 로드되어 실행될 때까지 코드 차단</li>
      <li>실행전 모든 종속성이 로드되었는지 확인하고싶은 서버 측 애플리케이션에 적합</li>
    </ul>
  </li>
  <li>확장자: <code class="language-plaintext highlighter-rouge">.cjs</code></li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// moduleA.js</span>
<span class="kd">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello, from Module A!</span><span class="dl">"</span><span class="p">;</span>
<span class="kr">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">message</span><span class="p">;</span>

<span class="c1">// moduleB.js</span>
<span class="kd">const</span> <span class="nx">messageA</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">./moduleA</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="-esm-ecmascript-modules-방식">■ ESM (ECMAScript Modules) 방식</h3>

<ul>
  <li><strong>import</strong>와 <strong>export</strong>를 사용</li>
  <li>Node.js 환경에서 사용하며 최신 브라우저에서도 사용 가능 (서버사이드와 브라우저 환경 모두 활용)</li>
  <li>동기적으로 로드 되나 비동기 가능
    <ul>
      <li>ESM은 <a href="https://nodejs.org/api/esm.html#top-level-await">Top-level await</a>를 지원하기 때문에 가능</li>
    </ul>
  </li>
  <li>three shaking 가능
    <ul>
      <li>정적 분석을 통해 빌드 단계에서(= 번들링된 코드에서) 사용하지 않는 코드를 제거</li>
      <li>웹페이지 로딩속도를 개선할 수 있어 프론트엔드 개발에 적합</li>
    </ul>
  </li>
  <li>확장자: <code class="language-plaintext highlighter-rouge">.mjs</code></li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// moduleA.mjs</span>
<span class="kd">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello, from Module A!</span><span class="dl">"</span><span class="p">;</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">message</span><span class="p">;</span>

<span class="c1">// moduleB.mjs</span>
<span class="k">import</span> <span class="nx">messageA</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./moduleA</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>
<h3 id="-cjs와-esm-비교">■ CJS와 ESM 비교</h3>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>CJS</th>
      <th>ESM</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>문법</td>
      <td>require, export.module</td>
      <td>import, export</td>
    </tr>
    <tr>
      <td>적합도</td>
      <td>서버측 개발에 적합</td>
      <td>모던 웹 애플리케이션 개발에 적합</td>
    </tr>
    <tr>
      <td>동적 가져오기</td>
      <td>가능하나 일반적이지 않음</td>
      <td>o</td>
    </tr>
    <tr>
      <td>비동기</td>
      <td>x</td>
      <td>o</td>
    </tr>
    <tr>
      <td>정적 분석</td>
      <td>x</td>
      <td>o</td>
    </tr>
    <tr>
      <td>three shaking</td>
      <td>x</td>
      <td>o</td>
    </tr>
    <tr>
      <td>브라우저 지원</td>
      <td>x</td>
      <td>o</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<h2 id="출처">출처</h2>
<ul>
  <li><a href="https://dev.to/nipu/js-cjs-and-mjs-defference-5f21"><strong>.js, .cjs and .mjs defference</strong></a></li>
  <li>https://tech.kakao.com/posts/605</li>
</ul>]]></content><author><name>수진‍ (水珍)</name></author><category term="JavaScript" /><category term="JavaScript" /><category term="CJS" /><category term="ESM" /></entry><entry><title type="html">[JS] 이벤트 루프와 비동기 통신</title><link href="http://localhost:4000/javascript/javascript-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84%EC%99%80-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%86%B5%EC%8B%A0/" rel="alternate" type="text/html" title="[JS] 이벤트 루프와 비동기 통신" /><published>2024-06-29T00:00:00+09:00</published><updated>2024-06-29T22:06:00+09:00</updated><id>http://localhost:4000/javascript/javascript-%EC%9D%B4%EB%B2%A4%ED%8A%B8%20%EB%A3%A8%ED%94%84%EC%99%80%20%EB%B9%84%EB%8F%99%EA%B8%B0%20%ED%86%B5%EC%8B%A0</id><content type="html" xml:base="http://localhost:4000/javascript/javascript-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84%EC%99%80-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%86%B5%EC%8B%A0/"><![CDATA[<h2 id="-싱글-스레드-자바스크립트">📝 싱글 스레드 자바스크립트</h2>

<p>자바스크립트는 <strong>싱글 스레드 언어</strong>다.</p>

<p>하나의 프로세스안에 여러개의 스레드가 있을 수 있다. 하지만 자바스크립트는 싱글 스레드 언어이므로 하나의 스레드만 존재한다.</p>

<p>여러개의 스레드가 있다면 메모리를 공유해 동시에 여러작업이 가능하지만 하나의 스레드만 가지고 있는 자바스크립트 엔진은 작업을 병렬로 처리할 수 없다.</p>

<p>자바스크립트 코드는 한줄한줄 순서대로 처리되며 하나의 작업이 끝나기전까지 다음 작업이 실행되지 않는다.</p>

<p>만약 하나의 작업이 너무 오래걸리면 뒤에 있는 작업이 실행되지 않는데, 이는 <strong>Run-to-Completion</strong>이라고 불리는 자바스크립트의 특징이다.</p>

<ul>
  <li>프로세스
    <ul>
      <li>메모리를 사용하는 독립적인 실행 단위</li>
      <li>다른 프로세스와 자원을 공유하지 않는다.</li>
    </ul>
  </li>
  <li>스레드
    <ul>
      <li>하나의 프로세스 안에 존재하는 작은 실행 단위</li>
      <li>스레드끼리 자원을 공유할 수 있다.</li>
      <li>하나의 프로세스가 병렬로 작업을 처리할 수 있게 한다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="-메모리-힙과-콜-스택---자바스크립트가-작업을-수행하는-방법">◆ 메모리 힙과 콜 스택  | 자바스크립트가 작업을 수행하는 방법</h3>

<p>■ 메모리 힙 (Memory Heap)</p>
<ul>
  <li>선언된 변수들의 메모리 할당이 이루어진다.</li>
  <li>비구조적으로 데이터가 저장된다.</li>
</ul>

<p>■ 콜 스택 (Call Stack)</p>
<ul>
  <li>함수들이 실행 순서에 따라 쌓인다.</li>
  <li>LIFO(선입후출)의 구조로 진행된다.</li>
</ul>

<p><img src="/assets/image/posts/js-event-loop.png" alt="image" /></p>

<p><br /></p>

<h2 id="-이벤트-루프--자바스크립트가-비동기-통신을-하는-방법">📝 이벤트 루프 | 자바스크립트가 비동기 통신을 하는 방법</h2>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">bar</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">bar</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">baz</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">baz</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">foo</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">foo</span><span class="dl">'</span><span class="p">)</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">bar</span><span class="p">(),</span> <span class="mi">0</span><span class="p">)</span>
    <span class="nx">baz</span><span class="p">()</span>
<span class="p">}</span>

<span class="nx">foo</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>출력 순서: foo → baz → bar</li>
</ul>

<p>bar의 실행을 기다리지 않고 다음줄인 baz가 실행된 이유는 setTimeout 함수는 바로 콜스택에 들어가는 것이아니라 태스크큐에 들어가기 때문이다.</p>
<ul>
  <li>태스크큐에 저장되는 작업들: setTimeout, setInterval, setImmediate</li>
</ul>

<p><br /></p>

<h3 id="-브라우저-이벤트-동작-순서">◆ 브라우저 이벤트 동작 순서</h3>
<p><img src="/assets/image/posts/js-event-loop-2.png" alt="image" /></p>

<ol>
  <li><strong>콜스택</strong> 실행</li>
  <li>콜스택이 비어있으면 <strong>마이크로 태스크 큐</strong> 확인. 큐가 빌 때까지 모든 마이크로 태스크 실행
    <ul>
      <li>프로미스의 <code class="language-plaintext highlighter-rouge">then</code>이나 <code class="language-plaintext highlighter-rouge">catch</code>, <code class="language-plaintext highlighter-rouge">MutationObserver</code> 등</li>
    </ul>
  </li>
  <li><strong>태스크 큐</strong> 확인. 큐가 빌 때까지 모든 태스크 실행
    <ul>
      <li><code class="language-plaintext highlighter-rouge">setTimeout</code>, <code class="language-plaintext highlighter-rouge">setInterval</code>, I/O 작업, DOM 이벤트 등</li>
    </ul>
  </li>
  <li><strong>Request Animation Frame</strong>에서 대기중인 콜백 실행
    <ul>
      <li>Request Animation Frame: 애니메이션을 효율적으로 실행하기 위해 제공하는 함수로 브라우저가 다음 리페인트(Repaint) 전에 지정된 콜백 함수를 실행하도록 예약</li>
    </ul>
  </li>
  <li>모든 작업이 완료되면 브라우저는 <strong>렌더링</strong>을 수행해 화면을 업데이트한다.</li>
</ol>

<p><br /></p>

<h3 id="-함수가-마이크로-태스크-큐에-저장될-경우">◆ 함수가 마이크로 태스크 큐에 저장될 경우</h3>

<ol>
  <li>콜 스택에서 프로미스를 만들고 프로미스에 등록된 콜백, 즉 프로미스가 다 수행이 되고나면 실행되는 <code class="language-plaintext highlighter-rouge">then</code>과 <code class="language-plaintext highlighter-rouge">mutation observer</code>라는 웹 API에 등록된 콜백이 마이크로 큐에 들어온다.</li>
  <li>이벤트루프는 마이크로 태스크 큐에 있는 프로미스 then 콜백을 비어있는 콜스택으로 가져간다.</li>
  <li>프로미스 <code class="language-plaintext highlighter-rouge">then</code>이 끝나면 <code class="language-plaintext highlighter-rouge">mutation obsever</code>를 콜 스택으로 가져간다.</li>
</ol>

<p><strong>⭐️ 포인트 1</strong> 이 과정에서 마이크로 태스크 큐에 새로운 함수가 들어온다면, 나중에 들어온 함수도 모두 끝날때까지 계속 콜스택으로 가지고 와서 수행한다. <br />
<strong>⭐️ 포인트 2</strong> 마이크로 태스크 큐가 텅텅비면 테스크 큐로 넘어간다.(태스크 큐와의 차이점: 태스크 큐에서는 아이템 하나만 콜스택으로 보내고 기다린다.)</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">handleClick</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">handleClick</span><span class="dl">"</span><span class="p">);</span>
  <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">// promise 의 콜백은 Microtask que를 이용한다.</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">then</span><span class="dl">"</span><span class="p">);</span>
      <span class="nx">handleClick</span><span class="p">();</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">button</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">handleClick</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div></div>

<p>이벤트루프는 마이크로태스크 큐에 등록된 콜백이 모두 빌때까지 기다리기때문에 이벤트루프가 멈춰 브라우저가 반응하지 않는다.</p>

<p><br /></p>

<h3 id="-함수가-태스크-큐에-저장될-경우">◆ 함수가 태스크 큐에 저장될 경우</h3>

<ol>
  <li>브라우저에서 지정된 이벤트가 발생한다.</li>
  <li>웹 API는 콜백함수를 태스크 큐에 넣어준다.</li>
  <li>이벤트 루프는 계속 관찰을 하다가 콜 스택에 할일이 남아 있으면 콜스택이 비워질 떄까지 기다린다.</li>
  <li>콜스택이 비어서 자바스크립트 엔진이 더이상 일을 하지 않을 때 태스크 큐에 있는 함수를 콜 스택으로 가져온다.</li>
  <li>자바스크립트 엔진이 콜 스택에 들어온 콜백함수를 실행한다.</li>
</ol>

<p><strong>⭐️ 포인트 1</strong> 이벤트 루프는 콜스택에 있는 함수를 <strong>하나씩만</strong> 가져온다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">handleClick</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">handleClick</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">setTimeout</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">handleClick</span><span class="p">();</span> <span class="c1">// 콜스택에 무한으로 추가되어 동일한 내용의 이벤트루프가 반복된다.</span>
  <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">button</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">handleClick</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div></div>
<p>콜백함수 내에서 다시 콜백함수를 호출하기 때문에 Task Queue에 무한으로 함수가 추가된다.</p>

<p><br /></p>

<h3 id="-함수가-request-animation-frame-queue에-저장될-경우">◆ 함수가 Request Animation Frame Queue에 저장될 경우</h3>

<p>브라우저를 다시 업데이트 할 때는 render안의 request Animation Frame 에 등록된 콜백들을 거친 후 렌더 트리를 만들고 그 트리를 이용해서 레이아웃을 계산한 뒤에 페인트를 통해서 브라우저에 업데이트를 한 다음에 이벤트루프가 재개된다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">button</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">requestAnimationFrame</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// 렌더링이 되기 전 브라우저가 콜백함수를 실행하는 것을 보장해준다.</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">beige</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">});</span>
  <span class="nx">requestAnimationFrame</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">orange</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">});</span>
  <span class="nx">requestAnimationFrame</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>큐는 FIFO의 구조를 가지고 있기 때문에 마지막에 들어온 코드가 가장 먼저 적용되기 때문에 최종적으로 빨간색이 적용된 상태에서 렌더트리가 만들어지고 브라우저에 표기가 완료된다.</p>

<h2 id="출처">출처</h2>

<ul>
  <li>드림코딩</li>
  <li>모던 리액트 딥다이브</li>
  <li>모던 자바스크립트 딥다이브</li>
</ul>]]></content><author><name>수진‍ (水珍)</name></author><category term="JavaScript" /><category term="비동기" /><category term="이벤트루프" /><summary type="html"><![CDATA[자바스크립트가 비동기 통신을 하는 방법]]></summary></entry><entry><title type="html">[JS] MSW(Mock Service Worker, v 2.0) - API Mocking 하기</title><link href="http://localhost:4000/javascript/javascript-MSW(Mock-Service-Worker,-v-2.0)/" rel="alternate" type="text/html" title="[JS] MSW(Mock Service Worker, v 2.0) - API Mocking 하기" /><published>2024-06-24T00:00:00+09:00</published><updated>2024-06-24T22:06:00+09:00</updated><id>http://localhost:4000/javascript/javascript-MSW(Mock%20Service%20Worker,%20v%202.0)</id><content type="html" xml:base="http://localhost:4000/javascript/javascript-MSW(Mock-Service-Worker,-v-2.0)/"><![CDATA[<h2 id="-msw란">📄 MSW란?</h2>

<p><a href="https://mswjs.io/">MSW</a>는 Mock Service Worker의 약자로 <strong>API 모킹</strong>을 위한 자바스크립트 라이브러리 입니다.</p>

<p>다음과 같은 상황에서 사용할 수 있습니다.</p>

<ul>
  <li>백엔드 API가 미완성일 경우 미리 로직을 구성해야할 때</li>
  <li>특정 에러를 발생시켜 에러 핸들링 테스트 할 때</li>
</ul>

<p>MSW는 <strong>Service Worker API</strong>를 사용하여 브라우저에서 발생하는 네트워크 요청을 가로챕니다. 실제 서버 대신 가짜 응답을 만들어 프론트엔드 개발자가 API 테스트를 할 수 있는 환경을 만들어줍니다.</p>

<p>사내 프로젝트에서 API 전달이 늦어지며 프론트엔드에서 API 요청 로직을 미리 구현하고 테스트하기 위해 MSW를 도입했습니다. 미리 DTO를 전달받으면 추후 실제 API를 전달받았을 때 큰 공수없이 바로 API를 연결 할 수 있었습니다. 다만, 리액트 쿼리처럼 전역으로 설정을 해 예상치 못한 네트워크를 가로채는 상황을 피하기 위해 개발 환경에서만 사용하고 실제 릴리즈되는 브랜치에서는 사용하지 않았습니다.</p>

<p><br /></p>

<h2 id="msw-설치-nextjs-app-router-환경-기준">📄MSW 설치 (Next.js App Router 환경 기준)</h2>

<p>Next.js에서 MSW를 사용할 경우 클라이언트/서버 환경 모두 요구되는데, 글 작성 시점 기준 서버 사이드에서 msw과 매끄럽게 호환하는 방법이 없어 node 서버와 함께 사용합니다.</p>

<div style="border-left: 5px solid #3498db; padding: 10px; background: #f0f8ff;">
<strong>ℹ️ Notice:</strong> Next.js에서 MSW를 사용할 경우 클라이언트/서버 환경 모두 요구되는데, 글 작성 시점 기준 서버 사이드에서 msw과 매끄럽게 호환하는 방법이 없어 node 서버와 함께 사용합니다.
</div>

<h3 id="1-설치하기">1. 설치하기</h3>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="nx">msw</span><span class="p">@</span><span class="nd">latest</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span>
</code></pre></div></div>

<h3 id="2-public-폴더에-초기화">2. public 폴더에 초기화</h3>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="nx">npx</span> <span class="nx">msw</span> <span class="nx">init</span> <span class="k">public</span><span class="sr">/ --sav</span><span class="err">e
</span></code></pre></div></div>
<ul>
  <li>public 폴더에 설치</li>
  <li><strong>mockServiceWorker.js</strong> 가 자동으로 생성
    <ul>
      <li>http 요청을 가로채 서버와의 통신을 모방한다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">--save</code> : package.json 에 등록되어 msw를 업데이트 할 때마다 자동으로 업데이트</li>
</ul>

<p><br /></p>

<h2 id="-msw-세팅">📄 MSW 세팅</h2>

<h3 id="-srcmocksbrowserts">💾 src/mocks/browser.ts</h3>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">setupWorker</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">msw/browser</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">handlers</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./handlers</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// This configures a Service Worker with the given request handlers.</span>
<span class="kd">const</span> <span class="nx">worker</span> <span class="o">=</span> <span class="nx">setupWorker</span><span class="p">(...</span><span class="nx">handlers</span><span class="p">);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">worker</span><span class="p">;</span>
</code></pre></div></div>
<ul>
  <li>CSR 네트워크 요청용</li>
  <li>serviceWorker가 가로챈 브라우저 요청을 전달받는다.</li>
</ul>

<h3 id="-srcmockshttpts">💾 src/mocks/http.ts</h3>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createMiddleware</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@mswjs/http-middleware</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">express</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">cors</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">cors</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">handlers</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./handlers</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="mi">9090</span><span class="p">;</span> <span class="c1">// 서버 포트</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">cors</span><span class="p">({</span> <span class="na">origin</span><span class="p">:</span> <span class="dl">'</span><span class="s1">http://localhost:3000</span><span class="dl">'</span><span class="p">,</span> <span class="na">optionsSuccessStatus</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="na">credentials</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}));</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">createMiddleware</span><span class="p">(...</span><span class="nx">handlers</span><span class="p">));</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Mock server is running on port: </span><span class="p">${</span><span class="nx">port</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
</code></pre></div></div>
<ul>
  <li>SSR 네트워크 요청용 =  서버 컴포넌트에서 사용</li>
  <li>CSR만 사용할 경우 필수는 아님</li>
</ul>

<h3 id="-srcmockshandlerts">💾 src/mocks/handler.ts</h3>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">http</span><span class="p">,</span> <span class="nx">HttpResponse</span><span class="p">,</span> <span class="nx">StrictResponse</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">msw</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">faker</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@faker-js/faker</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">generateDate</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">lastWeek</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">());</span>
  <span class="nx">lastWeek</span><span class="p">.</span><span class="nx">setDate</span><span class="p">(</span><span class="nx">lastWeek</span><span class="p">.</span><span class="nx">getDate</span><span class="p">()</span> <span class="o">-</span> <span class="mi">7</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">faker</span><span class="p">.</span><span class="nx">date</span><span class="p">.</span><span class="nx">between</span><span class="p">({</span>
    <span class="na">from</span><span class="p">:</span> <span class="nx">lastWeek</span><span class="p">,</span>
    <span class="na">to</span><span class="p">:</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">(),</span>
  <span class="p">});</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="dl">'</span><span class="s1">elonmusk</span><span class="dl">'</span><span class="p">,</span> <span class="na">nickname</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Elon Musk</span><span class="dl">'</span><span class="p">,</span> <span class="na">image</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/yRsRRjGO.jpg</span><span class="dl">'</span><span class="p">},</span>
  <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="dl">'</span><span class="s1">zerohch0</span><span class="dl">'</span><span class="p">,</span> <span class="na">nickname</span><span class="p">:</span> <span class="dl">'</span><span class="s1">제로초</span><span class="dl">'</span><span class="p">,</span> <span class="na">image</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/5Udwvqim.jpg</span><span class="dl">'</span><span class="p">},</span>
  <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="dl">'</span><span class="s1">leoturtle</span><span class="dl">'</span><span class="p">,</span> <span class="na">nickname</span><span class="p">:</span> <span class="dl">'</span><span class="s1">레오</span><span class="dl">'</span><span class="p">,</span> <span class="na">image</span><span class="p">:</span> <span class="nx">faker</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">avatar</span><span class="p">()},</span>
<span class="p">]</span>
<span class="kd">const</span> <span class="nx">Posts</span> <span class="o">=</span> <span class="p">[];</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">handlers</span> <span class="o">=</span> <span class="p">[</span>
  <span class="nx">http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/login</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">로그인</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">HttpResponse</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">User</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="p">{</span>
      <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">'</span><span class="s1">Set-Cookie</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">connect.sid=msw-cookie;HttpOnly;Path=/</span><span class="dl">'</span>
      <span class="p">}</span>
    <span class="p">})</span>
  <span class="p">}),</span>
  <span class="nx">http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/logout</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">로그아웃</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nx">HttpResponse</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">'</span><span class="s1">Set-Cookie</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">connect.sid=;HttpOnly;Path=/;Max-Age=0</span><span class="dl">'</span>
      <span class="p">}</span>
    <span class="p">})</span>
  <span class="p">}),</span>
<span class="c1">// ...</span>
<span class="p">];</span>
</code></pre></div></div>
<ul>
  <li>API 요청과 응답 정의</li>
</ul>

<h3 id="쿼리-파라미터-처리하기">쿼리 파라미터 처리하기</h3>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">http</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/test/search</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">({</span> <span class="nx">request</span><span class="p">,</span> <span class="nx">params</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">URL</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">keword</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">searchParams</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">keyword</span><span class="dl">'</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">page</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">url</span><span class="p">.</span><span class="nx">searchParams</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">page</span><span class="dl">'</span><span class="p">));</span>
        <span class="kd">const</span> <span class="nx">size</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">url</span><span class="p">.</span><span class="nx">searchParams</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">size</span><span class="dl">'</span><span class="p">));</span>
        <span class="kd">const</span> <span class="nx">totalCount</span> <span class="o">=</span> <span class="nx">searchParams</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
        <span class="kd">const</span> <span class="nx">totalPages</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">totalCount</span> <span class="o">/</span> <span class="nx">size</span><span class="p">);</span>


        <span class="k">return</span> <span class="nx">HttpResponse</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span>
            <span class="na">result</span><span class="p">:</span> <span class="dl">'</span><span class="s1">SUCCESS</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">resultCode</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
            <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">성공</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">contents</span><span class="p">:</span> <span class="nx">test</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">page</span> <span class="o">*</span> <span class="nx">size</span><span class="p">,</span> <span class="p">(</span><span class="nx">page</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="nx">size</span><span class="p">),</span>
            <span class="na">pageNumber</span><span class="p">:</span> <span class="nx">page</span><span class="p">,</span>
            <span class="na">pageSize</span><span class="p">:</span> <span class="nx">size</span><span class="p">,</span>
            <span class="nx">totalPages</span><span class="p">,</span>
            <span class="nx">totalCount</span><span class="p">,</span>
            <span class="na">isLastPage</span><span class="p">:</span> <span class="nx">totalPages</span> <span class="o">&lt;=</span> <span class="nx">page</span><span class="p">,</span>
            <span class="na">isFirstPage</span><span class="p">:</span> <span class="nx">page</span> <span class="o">===</span> <span class="mi">0</span><span class="p">,</span>
        <span class="p">});</span>

    <span class="p">})</span>
</code></pre></div></div>
<ul>
  <li>url 객체 생성 후 searchParams을 통해 처리합니다.</li>
</ul>

<p><br /></p>

<h2 id="-msw-서버-실행">📄 MSW 서버 실행</h2>

<h3 id="1-packagejson-스크립트-추가">1. package.json 스크립트 추가</h3>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">scripts</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
  <span class="dl">"</span><span class="s2">dev</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">next dev</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">build</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">next build</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">start</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">next start</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">lint</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">next lint</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">mock</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">npx tsx watch ./src/mocks/http.ts</span><span class="dl">"</span>
<span class="p">},</span>
</code></pre></div></div>
<ul>
  <li>watch : 서버 코드가 수정되면 자동으로 재시작</li>
</ul>

<h3 id="2-실행">2. 실행</h3>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">run</span> <span class="nx">mock</span>
</code></pre></div></div>
<p><br /></p>

<h2 id="-msw-사용-분기처리">📄 MSW 사용 분기처리</h2>

<h3 id="-srcapp_componentmswcoponenttsx">💾 src\app_component\MSWCoponent.tsx</h3>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">use client</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useEffect</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">MSWComponent</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nb">window</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">undefined</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_API_MOCKING</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">enabled</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
			 <span class="nx">worker</span><span class="p">.</span><span class="nx">start</span><span class="p">({</span> <span class="na">onUnhandledRequest</span><span class="p">:</span> <span class="dl">"</span><span class="s2">bypass</span><span class="dl">"</span> <span class="p">});</span> <span class="c1">// msw 핸들러로 요청하지 않은 request는 무시. console 경고를 없앨 수 있다</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>
<ul>
  <li>MSW는 개발환경에서만 사용한다</li>
</ul>

<h3 id="-envlocal">💾 env.local</h3>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">NEXT_PUBLIC_API_MOCKING</span><span class="o">=</span><span class="nx">enabled</span> 
</code></pre></div></div>
<ul>
  <li>로컬 환경에서만 돌아가는 환경변수 파일</li>
  <li>개발 환경에서만 읽어올 수 있는 브라우저 환경 변수를 설정하여 배포환경일때는 MSW를 사용하지 않는다.</li>
</ul>

<h3 id="-srcapplayouttsx">💾 src\app\layout.tsx</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">RootLayout</span><span class="p">({</span> <span class="nx">children</span> <span class="p">}:</span> <span class="nx">Props</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">html</span> <span class="nx">lang</span><span class="o">=</span><span class="dl">"</span><span class="s2">en</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">body</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nx">inter</span><span class="p">.</span><span class="nx">className</span><span class="p">}</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">MSWComponent</span> <span class="o">/&gt;</span> <span class="c1">// ✅</span>
          <span class="p">{</span><span class="nx">children</span><span class="p">}</span>
        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/body</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/html</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="출처">출처</h2>

<ul>
  <li>Next.js + ReactQuery로 SNS 서비스 만들기 (인프런)</li>
</ul>]]></content><author><name>수진‍ (水珍)</name></author><category term="JavaScript" /><category term="MSW" /><category term="Mock" /><summary type="html"><![CDATA[프론트 작업을 완료했는데 백엔드 API 작업이 늦어질 때]]></summary></entry></feed>