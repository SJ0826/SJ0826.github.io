<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-29T17:56:32+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Sometimes we fall, then we rise ⛵</title><subtitle>프론트엔드 엔지니어가 되기까지</subtitle><author><name>Sujin Kim</name></author><entry><title type="html">Sass (Syntactically Awesome StyleSheets)</title><link href="http://localhost:4000/css/css-Sass/" rel="alternate" type="text/html" title="Sass (Syntactically Awesome StyleSheets)" /><published>2023-03-29T00:00:00+09:00</published><updated>2023-03-29T22:06:00+09:00</updated><id>http://localhost:4000/css/css-Sass</id><content type="html" xml:base="http://localhost:4000/css/css-Sass/"><![CDATA[<p>Sass의 수요가 높아지고, 많이들 사용하는 추세라 배워보고 싶었는데 생각보다 공부하고 프로젝트에 적용시키기가 어려웠습니다.</p>

<p>프로젝트를 진행하는 경우에 Sass를 사용해 보고 싶었지만, 빌드된 CSS파일 관리를 어떻게 해야할지 몰라 결국 익숙한 styled-components로 사용하기도 했습니다.</p>

<p>예전에 웹 공부를 시작할때 기초 강의로 도움을 받았던 유노코딩님의 Sass 강의가 열려 재밌게 공부하고 정리한 내용입니다.</p>

<h2 id="-sass란-무엇인가">📄 Sass란 무엇인가?</h2>

<p>Sass는 css를 효율적으로 작성하기 위한 CSS 전처리기 언어입니다.<br />
전처리기는 ‘전에 처리한다’라고 이해하면 쉽습니다.<br />
css가 되기 전에 Sass구문으로 작성해 처리하기 때문입니다.<br />
css는 코드가 커질수록 유지보수가 복잡해집니다.<br />
Sass는 이를 보완하기 위해 등장하였으며, 코드를 수정하거나 재사용하기에도 굉장히 편리합니다.</p>

<p>정리하자면 <strong>CSS를 읽기도 좋고 쓰기에도 좋게 사용하기 위해 만들어진 CSS 전처리기 언어</strong>입니다.</p>

<h3>▪ Sass 동작 방식</h3>

<p>Sass의 동작 방식은 다음과 같습니다.</p>

<ol>
  <li>Sass 구문에 맞게 코드를 작성한다.</li>
  <li>Sass 전처리기에 의해 CSS 코드로 변환(컴파일)된다.</li>
  <li>변환을 마치고, CSS 파일이 생성된다.(빌드)</li>
</ol>

<h3>▪ SCSS 이란?</h3>

<p>SCSS는 Sass의 하위 개념입니다.<br />
Sass 구문과 동일한 기능을 제공하는데 사용하기 좋아 SCSS구문의 수요가 더 높은 편입니다.</p>

<p>👾 scss로 작성한 코드</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$font-stack</span><span class="p">:</span> <span class="n">Helvetica</span><span class="o">,</span> <span class="nb">sans-serif</span><span class="p">;</span>
<span class="nv">$primary-color</span><span class="p">:</span> <span class="mh">#333</span><span class="p">;</span>

<span class="nt">body</span> <span class="p">{</span>
  <span class="nl">font</span><span class="p">:</span> <span class="m">100%</span> <span class="nv">$font-stack</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="nv">$primary-color</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>👾 sass로 작성한 코드</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$font-stack</span><span class="p">:</span> <span class="n">Helvetica</span><span class="o">,</span> <span class="nb">sans-serif</span><span class="p">;</span>
<span class="nv">$primary-color</span><span class="p">:</span> <span class="mh">#333</span><span class="p">;</span>

<span class="na">body</span><span class="err">
  </span><span class="nl">font</span><span class="p">:</span> <span class="m">100%</span> <span class="nv">$font-stack</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="nv">$primary-color</span><span class="p">;</span>

</code></pre></div></div>

<p>Sass로 작성하나 SCSS로 작성하나 결과는 같지만 SCSS구문이 더 가독성있고 친숙한 느낌을 줍니다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">//</span> <span class="nt">결과</span>

<span class="nt">body</span> <span class="p">{</span>
  <span class="nl">font</span><span class="p">:</span> <span class="m">100%</span> <span class="err">$</span><span class="n">font-stack</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="err">$</span><span class="n">primary-color</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="-sass-준비하기">📄 Sass 준비하기</h2>

<h3>▪ Live Sass Compiler 설치하기</h3>

<p>scss 코드의 변경 사항을 자동으로 감지해 저장할 때마다 새롭게 빌드를 진행하게 해주는 vscode extension입니다.</p>

<p><img src="https://user-images.githubusercontent.com/56298540/228437241-00162cea-99bc-402e-9359-474c7749b04d.png" alt="image" /></p>

<p>SCSS파일을 생성 후 vscode 하단에 있는 Live Sass Compiler 버튼을 클릭하면 실행됩니다.</p>

<p><img src="https://user-images.githubusercontent.com/56298540/228437658-5e54cb94-2747-4e02-9b76-840eb01b87d1.png" alt="image" /></p>

<h3>▪ 명령행 인터페이스 사용하기</h3>

<p>명령행은 명령 프롬프트나 터미널을 뜻합니다.<br />
명령행에서 명령어를 입력해 Sass 컴파일을 진행할 수 있습니다.<br />
node.js가 설치되어 있어야 합니다..<br /></p>

<p>✔ Sass 명령행 인터페이스 설치하기</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install -g sass

// 설치 확인하기
sass --version
</code></pre></div></div>

<p><br /></p>

<p>✔ Sass파일을 css파일로 컴파일하기</p>

<p>아래와 같이 컴파일을 진행하면 style폴더에 main.css 파일이 생성되어 컴파일됩니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sass style/main.scss:style/main.css // style/main.scss를 style/main.css로 컴파일한다.

// live Sass Compiler처럼 자동으로 변경사항 감지하는 옵션 추가
sass --watch  style/main.scss:style/main.css
</code></pre></div></div>

<p>css에서 기존 중괄호와 들여쓰기가 포함된 css스타일을 extend 스타일이라고 부릅니다.<br />
extend 스타일은 가독성엔 좋지만 직접 css를 다루지 않는 경우엔 가독성이 필요가 없으니 파일이 큰 경우 용량에 부담이 됩니다.<br />
<strong>compressed</strong>옵션은 그러한 단점을 보완해 코드를 공백없이 압축해 줍니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sass --style compressed style/main.scss:style/main.css
</code></pre></div></div>

<p><br /></p>

<p>✔ extend 스타일</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">h1</span> <span class="p">{</span>
  <span class="nl">color</span><span class="p">:</span> <span class="no">black</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">yellow</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>✔ compressed 스타일</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>h1 {color: #fff;background-color: #ff0;}
</code></pre></div></div>

<h2 id="-주석과-중첩nestring">📄 주석과 중첩(nestring)</h2>

<h3>▪ 주석</h3>

<p>주석 1: 여러 줄 짜리 주석</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 여러 줄 짜리 주석*/</span>
</code></pre></div></div>

<p>주석 2: 한 줄 짜리 주석</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 한 줄 짜리 주석</span>
</code></pre></div></div>

<p>Scss에서 주석을 사용하는 방법은 두가지 입니다.<br />
한 줄 짜리 주석은 컴파일된 css파일에 반영되지 않지만, 기존 css 주석은 최종 css 파일에도 반영된다는 차이점을 가지고 있습니다.</p>

<h3>▪ 중첩 규칙 (nesting)</h3>

<p>css를 작성하는 경우 선택자를 서로 다른 선언문에서 반복해야 하는 경우가 있습니다.<br />
Sass에서는 선택자를 반복하지 않고 중첩해 사용할 수 있습니다.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">div</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>

  <span class="nt">p</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>

    <span class="nt">span</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>컴파일 후 결과 파일에는 선택자가 따로 생성되어 반영된다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">div</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">div</span> <span class="nt">p</span> <span class="p">{</span>
  <span class="nl">color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">div</span> <span class="nt">p</span> <span class="nt">span</span> <span class="p">{</span>
  <span class="nl">color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<p><strong>✔ 단축 속성 중첩</strong></p>

<p>Sass의 단축 속성 중첩은 ‘네입스페이스 속성 중첩’이라고도 부릅니다.</p>

<p>아래 코드는 font의 속성들을 중첩으로 정의한 예시입니다.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">p</span> <span class="p">{</span>
  <span class="nl">font</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">family</span><span class="p">:</span> <span class="nb">sans-serif</span><span class="p">;</span>
    <span class="nl">size</span><span class="p">:</span> <span class="m">1rem</span><span class="p">;</span>
    <span class="na">style</span><span class="p">:</span> <span class="nb">normal</span><span class="p">;</span>
    <span class="na">weight</span><span class="p">:</span> <span class="m">900</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<p><strong>✔ 상위 선택자 참조 (&amp;)</strong></p>

<p>기호 <code class="language-plaintext highlighter-rouge">&amp;</code>사용하면 중첩된 선언문안에서 상위 선택자를 참조할 수 있습니다.<br />
의사클래스를 선택하고자 할 때 유용합니다.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.first-btn</span> <span class="p">{</span>
  <span class="k">&amp;</span><span class="nd">:hover</span> <span class="p">{</span>
    <span class="nl">background</span><span class="p">:</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="-변수">📄 변수</h2>

<p>Sass에서는 <code class="language-plaintext highlighter-rouge">$</code>를 사용해 변수를 만들어 데이터를 저장하고 사용할 수 있습니다.<br />
생성된 변수는 최종 CSS파일에서 표시되지 않습니다.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$main-color</span><span class="p">:</span> <span class="no">orange</span><span class="p">;</span>
<span class="nv">$font-color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>

<span class="nt">button</span> <span class="p">{</span>
  <span class="k">&amp;</span><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">1</span><span class="o">)</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="nv">$font-color</span><span class="p">;</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nv">$main-color</span><span class="p">;</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">&amp;</span><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">2</span><span class="o">)</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="nv">$font-color</span><span class="p">;</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nv">$main-color</span><span class="p">;</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">&amp;</span><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">3</span><span class="o">)</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="nv">$font-color</span><span class="p">;</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nv">$main-color</span><span class="p">;</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>▪ SCSS 변수 사용 규칙</strong></p>

<ol>
  <li>개수 제한은 없지만, 가독성을 해치니 남용하지 않는다.</li>
  <li>변수명에는 영문자, 숫자, <code class="language-plaintext highlighter-rouge">-</code>, <code class="language-plaintext highlighter-rouge">_</code>를 사용하며 가능한 직관적인 이름을 사용한다.</li>
</ol>

<h2 id="-믹스인-mixin">📄 믹스인 (mixin)</h2>

<p>믹스인은 사이트 전체에서 <strong>재사용할 스타일 그룹을 정의</strong>하기 위해 사용하는 문법입니다.</p>

<h3>▪ 믹스인 정의하기</h3>

<p>믹스인을 정의할 때 인자를 함께 정의하면, 믹스인 호출 시에 상황에 따라 값을 다르게 주어 사용할 수 있습니다.<br />
인자를 정의할 때 기본값은 옵션으로 설정합니다.<br />
정의된 믹스인은 최종 CSS파일에 포함되지 않습니다.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@mixin</span> <span class="nf">box-style</span><span class="p">(</span><span class="nv">$bg-color</span><span class="o">:</span> <span class="no">yellow</span><span class="o">,</span> <span class="nv">$font-color</span><span class="o">:</span> <span class="no">green</span><span class="p">)</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
  <span class="nl">justify-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="nv">$bg-color</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="nv">$font-color</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3>▪ 믹스인 사용하기</h3>

<p>정의된 믹스인을 사용하고자 할땐 <code class="language-plaintext highlighter-rouge">@include</code>지시어를 사용합니다.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.one</span> <span class="p">{</span>
  <span class="k">@include</span> <span class="nd">box-style</span><span class="p">();</span>
<span class="p">}</span>

<span class="nc">.two</span> <span class="p">{</span>
  <span class="k">@include</span> <span class="nd">box-style</span><span class="p">(</span><span class="no">purple</span><span class="o">,</span> <span class="no">yellow</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="-content">📄 @content</h2>

<p><code class="language-plaintext highlighter-rouge">@content</code>는 믹스인의 인자로 단순한 변수가 아닌 스타일 블록 전체를 넘길 때 사용하는 문법입니다.<br />
인자와 스타일 블록을 모두 전달받는 형태의 믹스인을 정의할 수도 있습니다.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@mixin</span> <span class="nf">btn-style</span><span class="p">(</span><span class="nv">$hv-color</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">@content</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">25px</span><span class="p">;</span>

  <span class="k">&amp;</span><span class="nd">:hover</span> <span class="p">{</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nv">$hv-color</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nc">.one</span> <span class="p">{</span>
  <span class="k">@include</span> <span class="nd">btn-style</span><span class="p">(</span><span class="no">orange</span><span class="p">)</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="no">tomato</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nc">.two</span> <span class="p">{</span>
  <span class="k">@include</span> <span class="nd">btn-style</span><span class="p">(</span><span class="no">green</span><span class="p">)</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="no">teal</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="-여러개의-scss파일을-하나의-css파일로-관리하기">📄 여러개의 .scss파일을 하나의 .css파일로 관리하기</h2>

<p>여러개의 .scss파일이 우후죽순 생겨날 때 이를 관리하는 방법이 있습니다.<br />
모든 scss파일을 하나의 css파일로 보내버리는 것이 아니라, <br />
하나의 main.scss파일에서 각 기능을 담당하는 scss파일을 @import해서 사용하는 방법입니다.</p>

<p>이때 주의해야할 점은 mains.scss파일이 아닌 scss파일의 이름은 <strong>언더바</strong>로 시작해야 컴파일 대상에서 제외된다는 사실입니다.&lt;/br&gt;
@import지시자를 사용할 때는 언더바를 제거하고 사용합니다.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//main.scss</span>

<span class="k">@import</span> <span class="s2">"variables.scss"</span><span class="p">;</span>
<span class="k">@import</span> <span class="s2">"mixins.scss"</span><span class="p">;</span>

<span class="nt">div</span> <span class="p">{</span>
  <span class="k">@include</span> <span class="nd">box</span><span class="p">(</span><span class="nv">$main-color</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이렇게 CSS파일을 하나로 만들게 된다면</p>

<ul>
  <li>HTML과 CSS 문서 간 연결 횟수가 줄어 웹사이트 성능 개선에 도움이 되고</li>
  <li>scss파일을 기능별로 분리할 수 있어 보기도 좋고 재사용하기도 좋습니다.</li>
</ul>

<h2 id="-스타일-중복을-피하는-방법-extend">📄 스타일 중복을 피하는 방법 @extend</h2>

<p>@extend지시자는 기존의 스타일을 확장해서 다른 클래스에서 쓰고 싶을 때 사용합니다.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.message</span> <span class="p">{</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">8px</span><span class="p">;</span>
  <span class="nl">text-transform</span><span class="p">:</span> <span class="nb">uppercase</span><span class="p">;</span>
  <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="mh">#fff</span><span class="p">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="mh">#5f0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.bad-message</span> <span class="p">{</span>
  <span class="k">@extend</span> <span class="nc">.message</span><span class="p">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="mh">#f05</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>mixin과 비슷하지만, 저는 mixin은 규격을 설정하는 것이고 extend는 확장을 위해 사용하는 것이라고 이해했습니다.</p>

<p>실제로 컴파일된 결과도 mixin과 다릅니다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.message</span><span class="o">,</span>
<span class="nc">.bad-message</span> <span class="p">{</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">8px</span><span class="p">;</span>
  <span class="nl">text-transform</span><span class="p">:</span> <span class="nb">uppercase</span><span class="p">;</span>
  <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="m">#5f0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.bad-message</span> <span class="p">{</span>
  <span class="nl">background</span><span class="p">:</span> <span class="m">#f05</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>@exclue를 사용해 컴파일된 결과를 보면 속성들을 사용하고 있는 클래스 네임이 쉼표와 함께 열거되고 있는 것을 확인할 수 있습니다.</p>

<p><strong>유령 클래스</strong>(공식 명칭은 아닙니다.)를 사용해 컴파일 되었을 때 기존 클래스는 노출되지 않으면서 재사용한 클래스만 보여주는 방법도 있습니다.<br />
유령 클래스는 <code class="language-plaintext highlighter-rouge">%</code>기호를 사용합니다.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">%message</span> <span class="p">{</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">8px</span><span class="p">;</span>
  <span class="nl">text-transform</span><span class="p">:</span> <span class="nb">uppercase</span><span class="p">;</span>
  <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="mh">#fff</span><span class="p">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="mh">#5f0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.bad-message</span> <span class="p">{</span>
  <span class="k">@extend</span> <span class="nv">%message</span><span class="p">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="mh">#f05</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>컴파일 된 결과를 확인하면 유령클래스의 이름은 노출되지 않고 있는 것을 확인할 수 있습니다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.bad-message</span> <span class="p">{</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">8px</span><span class="p">;</span>
  <span class="nl">text-transform</span><span class="p">:</span> <span class="nb">uppercase</span><span class="p">;</span>
  <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="m">#5f0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.bad-message</span> <span class="p">{</span>
  <span class="nl">background</span><span class="p">:</span> <span class="m">#f05</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="-조건문을-사용해-코드의-흐름-제어하기">📄 조건문을 사용해 코드의 흐름 제어하기</h2>

<p>Sass에서는 <code class="language-plaintext highlighter-rouge">@if</code> 지시자를 이용해 조건을 설정할 수 있습니다.&lt;/br&gt;
아래 예시는 mixin안에 조건문을 설정한 경우입니다.&lt;/br&gt;
<code class="language-plaintext highlighter-rouge">@else</code> 지시자를 사용하면 <code class="language-plaintext highlighter-rouge">@if</code>문이 불만족할 경우의 속성을 설정할 수 있습니다.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@mixin</span> <span class="nf">select-color</span><span class="p">(</span><span class="nv">$color</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">@if</span> <span class="nv">$color</span> <span class="o">==</span> <span class="no">blue</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">@else</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">tomato</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nt">h1</span> <span class="p">{</span>
  <span class="k">@include</span> <span class="nd">select-color</span><span class="p">((</span><span class="no">red</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Sass에서 조건문은 웹사이트를 개발하는 단계보다는 라이브러리를 만드는 경우에 더 자주 사용된다고 합니다.</p>

<h2 id="-미디어-쿼리">📄 미디어 쿼리</h2>

<p>미디어 쿼리는 반응형 웹을 만들 때 사용되는 필수 문법입니다.<br />
Sass에서 미디어 쿼리를 사용할 때 문자열을 변수로 사용하는 경우가 있는데 이때 문자열 삽입용 기호인 <code class="language-plaintext highlighter-rouge">#{}</code>를 사용해야 합니다.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$width-small</span><span class="p">:</span> <span class="s2">"all and (min-width: 300px)"</span><span class="p">;</span>
<span class="nv">$width-medium</span><span class="p">:</span> <span class="s2">"all and (min-width: 600px)"</span><span class="p">;</span>
<span class="nv">$width-large</span><span class="p">:</span> <span class="s2">"all and (min-width: 900px)"</span><span class="p">;</span>

<span class="nt">div</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>

  <span class="k">@media</span> <span class="si">#{</span><span class="nv">$width-small</span><span class="si">}</span> <span class="p">{</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="no">cadetblue</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">@media</span> <span class="si">#{</span><span class="nv">$width-medium</span><span class="si">}</span> <span class="p">{</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="no">orange</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">@media</span> <span class="si">#{</span><span class="nv">$width-large</span><span class="si">}</span> <span class="p">{</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="no">purple</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="출처">출처</h2>

<ul>
  <li><a href="https://www.inflearn.com/course/%EC%B4%88%EB%B3%B4%EC%9E%90-%EC%82%AC%EC%8A%A4-%EA%B8%B0%EC%B4%88%EA%B0%95%EC%9D%98-%ED%81%B4%EB%A1%A0/dashboard">유노코딩</a></li>
</ul>]]></content><author><name>Sujin Kim</name></author><category term="CSS" /><category term="Sass" /></entry><entry><title type="html">같은 숫자는 싫어</title><link href="http://localhost:4000/programmers-lv1/programmers-I-don't-want-the-same-number/" rel="alternate" type="text/html" title="같은 숫자는 싫어" /><published>2023-03-28T00:00:00+09:00</published><updated>2023-03-28T22:06:00+09:00</updated><id>http://localhost:4000/programmers-lv1/programmers-I%20don&apos;t%20want%20the%20same%20number</id><content type="html" xml:base="http://localhost:4000/programmers-lv1/programmers-I-don&apos;t-want-the-same-number/"><![CDATA[<h2 id="문제-">문제 📄</h2>

<p>배열 arr가 주어집니다. 배열 arr의 각 원소는 숫자 0부터 9까지로 이루어져 있습니다. 이때, 배열 arr에서 연속적으로 나타나는 숫자는 하나만 남기고 전부 제거하려고 합니다. 단, 제거된 후 남은 수들을 반환할 때는 배열 arr의 원소들의 순서를 유지해야 합니다. 예를 들면,</p>

<ul>
  <li>arr = [1, 1, 3, 3, 0, 1, 1] 이면 [1, 3, 0, 1] 을 return 합니다.</li>
  <li>arr = [4, 4, 4, 3, 3] 이면 [4, 3] 을 return 합니다.</li>
</ul>

<p>배열 arr에서 연속적으로 나타나는 숫자는 제거하고 남은 수들을 return 하는 solution 함수를 완성해 주세요.</p>

<h2 id="나의-풀이-1-️">나의 풀이 #1 🙋‍♀️</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">arr</span><span class="p">.</span><span class="nf">filter</span><span class="p">((</span><span class="nx">value</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">value</span> <span class="o">!==</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>프로그래머스 문제를 풀어보기 시작하고 처음으로 정답다운 풀이가 나온 느낌입니다.</p>

<p><code class="language-plaintext highlighter-rouge">filter</code>함수를 사용해서 배열을 순환하며 해당 값과 바로 오른쪽의 값을 비교하며 같지 않은 값만 모아놓은 배열을 새로 생성했습니다.</p>

<p>마지막 값은 <code class="language-plaintext highlighter-rouge">undefined</code>와 비교하기 때문에 새로운 배열에 무조건 들어가게 됩니다.</p>

<h2 id="나의-풀이-2-️">나의 풀이 #2 🙋‍♀️</h2>

<p>문제를 보고 바로 <code class="language-plaintext highlighter-rouge">filter</code>함수를 사용하면 되겠다 싶었는데 문제 옆에 <code class="language-plaintext highlighter-rouge">스택/큐</code>라고 쓰여 있어 스택 큐를 떠올리며 다시 풀어봤습니다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">answer</span> <span class="o">=</span> <span class="p">[];</span> <span class="c1">// 1</span>
  <span class="nf">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="p">?</span> <span class="dl">""</span> <span class="p">:</span> <span class="nx">answer</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span> <span class="c1">// 2</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ol>
  <li>정답에 해당하는 값만 담을 새로운 배열 <code class="language-plaintext highlighter-rouge">answer</code>을 생성합니다.</li>
  <li>반복문을 돌려 해당 값과 오른쪽의 값을 비교하여 값이 다른 경우에만 새로운 배열(<code class="language-plaintext highlighter-rouge">answer</code>)에 담아 반환해줍니다.</li>
</ol>

<h2 id="best-practice-">Best Practice 👍</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">answer</span> <span class="o">=</span> <span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span>

  <span class="nf">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">if </span><span class="p">(</span><span class="nx">answer</span><span class="p">[</span><span class="nx">answer</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">!==</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
      <span class="nx">answer</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>다른 분의 풀이를 보니 비교한 값이 다른 경우만 생각해도 된다는 것을 알았습니다.</p>

<p>굳이 제 풀이처럼 삼항연산자를 쓰지 않아도 되는 것이었습니다.</p>

<p>왠지 삼항연산자에 집착이 생겨버려 자꾸 쓰게 되네요.</p>

<p>불필요한 습관을 버려야겠습니다.</p>

<h2 id="문제-출처">문제 출처</h2>]]></content><author><name>Sujin Kim</name></author><category term="programmers-lv1" /><category term="filter" /><category term="스택" /><category term="큐" /><summary type="html"><![CDATA[프로그래머스 Lv1. 같은 숫자는 싫어]]></summary></entry><entry><title type="html">JadenCase 문자열 만들기</title><link href="http://localhost:4000/programmers-lv2/programmers-jadencase/" rel="alternate" type="text/html" title="JadenCase 문자열 만들기" /><published>2023-03-28T00:00:00+09:00</published><updated>2023-03-28T22:06:00+09:00</updated><id>http://localhost:4000/programmers-lv2/programmers-jadencase</id><content type="html" xml:base="http://localhost:4000/programmers-lv2/programmers-jadencase/"><![CDATA[<h2 id="-문제">📄 문제</h2>

<p>JadenCase란 모든 단어의 첫 문자가 대문자이고, 그 외의 알파벳은 소문자인 문자열입니다. 단, 첫 문자가 알파벳이 아닐 때에는 이어지는 알파벳은 소문자로 쓰면 됩니다. (첫 번째 입출력 예 참고)
문자열 s가 주어졌을 때, s를 JadenCase로 바꾼 문자열을 리턴하는 함수, solution을 완성해주세요.</p>

<ul>
  <li>s는 길이 1 이상 200 이하인 문자열입니다.</li>
  <li>s는 알파벳과 숫자, 공백문자(“ “)로 이루어져 있습니다.
    <ul>
      <li>숫자는 단어의 첫 문자로만 나옵니다.</li>
      <li>숫자로만 이루어진 단어는 없습니다.</li>
      <li>공백문자가 연속해서 나올 수 있습니다.</li>
    </ul>
  </li>
</ul>

<h2 id="️-나의-풀이">🙋‍♀️ 나의 풀이</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nf">toLowerCase</span><span class="p">().</span><span class="nf">split</span><span class="p">(</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">answer</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="o">=&gt;</span>
    <span class="nx">value</span> <span class="p">?</span> <span class="nx">value</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="nx">value</span><span class="p">.</span><span class="nf">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span> <span class="dl">""</span>
  <span class="p">);</span>

  <span class="k">return</span> <span class="nx">answer</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이 문제에는 함정이 있습니다.</p>

<p><strong>공백문자가 연속해서 나올 수 있습니다.</strong></p>

<p>문제를 제대로 읽지 않으면 무엇 때문에 통과할 수 없는지 알 수 없습니다.</p>

<p>제 경험담입니다 :)</p>

<p>제가 푼 순서는 다음과 같습니다.</p>

<ol>
  <li>주어진 문자열을 모두 소문자로 바꾸고 공백을 기준으로 배열(<code class="language-plaintext highlighter-rouge">arr</code>)을 생성한다.</li>
  <li>생성된 배열을 순환해 첫 글자를 대문자로 바꿔줍니다.</li>
  <li>첫 글자가 대문자로 바뀐 문자열들이 담긴 배열을 다시 문자열로 바꿔 반환합니다.</li>
</ol>

<p>2번 과정에서 공백문자가 연속으로 나올 가능성도 생각해야 합니다.</p>

<p><strong>빈 문자열에 인덱스로 접근할 경우 <code class="language-plaintext highlighter-rouge">undefined</code>를 반환</strong>하기 때문에 <code class="language-plaintext highlighter-rouge">toUpperCase</code>에서 런타임 오류를 발생시킵니다.</p>

<p>문자열을 배열로 바꾼 <code class="language-plaintext highlighter-rouge">arr</code>의 요소가 공백문자일 경우 바로 넘어가도록 삼항연산자를 사용했습니다.</p>

<h2 id="-best-practice">🔨 Best Practice</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">s</span>
    <span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">v</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">v</span><span class="p">.</span><span class="nf">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nf">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="nx">v</span><span class="p">.</span><span class="nf">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nf">toLowerCase</span><span class="p">())</span>
    <span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>공백 문자를 해결하는 방법에 <code class="language-plaintext highlighter-rouge">charAt</code>이 있었습니다.</p>

<p><code class="language-plaintext highlighter-rouge">charAt</code>은 해당 인덱스에 위치한 문자열을 반환합니다.</p>

<p>따라서 <strong>빈 문자열에 <code class="language-plaintext highlighter-rouge">charAt</code>으로 접근할 경우 똑같이 빈 문자열을 반환</strong>하기 때문에 문제가 일어나지 않는 것입니다.</p>

<h2 id="문제-출처">문제 출처</h2>

<ul>
  <li>프로그래머스</li>
</ul>]]></content><author><name>Sujin Kim</name></author><category term="programmers-lv2" /><category term="프로그래머스" /><category term="JadenCase 문자열 만들기" /><summary type="html"><![CDATA[빈문자열에 숫자 인덱스와 charAt방식으로 접근할 때의 차이점]]></summary></entry><entry><title type="html">가운데 글자 가져오기</title><link href="http://localhost:4000/programmers-lv1/programmers-Import-Intermediate-Characters/" rel="alternate" type="text/html" title="가운데 글자 가져오기" /><published>2023-03-28T00:00:00+09:00</published><updated>2023-03-28T22:06:00+09:00</updated><id>http://localhost:4000/programmers-lv1/programmers-Import%20Intermediate%20Characters</id><content type="html" xml:base="http://localhost:4000/programmers-lv1/programmers-Import-Intermediate-Characters/"><![CDATA[<h2 id="문제-">문제 📖</h2>

<p>단어 s의 가운데 글자를 반환하는 함수, solution을 만들어 보세요. 단어의 길이가 짝수라면 가운데 두글자를 반환하면 됩니다.</p>

<ul>
  <li>s는 길이가 1 이상, 100이하인 스트링입니다.</li>
</ul>

<h2 id="️-나의-풀이">🙋‍♀️ 나의 풀이</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">stringToArray</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">s</span><span class="p">];</span> <span class="c1">// 1</span>
  <span class="kd">const</span> <span class="nx">target</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// 2</span>

  <span class="nf">if </span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 3</span>
    <span class="k">return</span> <span class="nx">stringToArray</span><span class="p">[</span><span class="nx">target</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="nx">stringToArray</span><span class="p">[</span><span class="nx">target</span><span class="p">];</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">stringToArray</span><span class="p">[</span><span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nx">target</span><span class="p">)];</span> <span class="c1">// 4</span>
<span class="p">}</span>
</code></pre></div></div>

<ol>
  <li>문자열을 배열(<code class="language-plaintext highlighter-rouge">stringToArray</code>)로 바꾼다.</li>
  <li>배열의 크기를 2로 나눈 수(<code class="language-plaintext highlighter-rouge">target</code>)를 구한다.</li>
  <li><code class="language-plaintext highlighter-rouge">stringToArray</code>가 짝수면 <code class="language-plaintext highlighter-rouge">target</code>과 직전의 값을 인덱스로 하는 값을 함께 반환한다.</li>
  <li>아니면 <code class="language-plaintext highlighter-rouge">target</code>을 반내림해서 하나의 값만 반환한다.</li>
</ol>

<p>이번 문제는 간단해서 1분도 안되어 풀었지만, 오히려 이런 문제에서 고수는 드러나기 마련입니다.</p>

<p>그리고 당연하게도 저는 아직 초보자임이 들통나버립니다.</p>

<h2 id="-best-practice">🔨 Best Practice</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nf">substr</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">ceil</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">length</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span> <span class="p">?</span> <span class="mi">2</span> <span class="p">:</span> <span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>왜 삼항연산자를 사용할 생각을 못했을까요.</p>

<p>새로운 <code class="language-plaintext highlighter-rouge">subString()</code>이라는 자바스크립트 문법을 하나 알아갑니다.</p>

<p>📌 <code class="language-plaintext highlighter-rouge">substr</code>이라는 자바스크립트 문법이 인상적이어서 가져왔는데 댓글을 보니 미래에 삭제되니 <code class="language-plaintext highlighter-rouge">subString()</code>으로 대체해서 사용하라고 알려주네요.</p>

<h3 id="-substring">🔖 subString()</h3>

<p><code class="language-plaintext highlighter-rouge">subString()</code>은 문자열을 인덱스를 기준으로 자를 수 있는 메소드 입니다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">str</span><span class="p">.</span><span class="nf">substring</span><span class="p">(</span><span class="nx">시작</span> <span class="nx">인덱스</span><span class="p">,</span> <span class="nx">마지막</span> <span class="nf">인덱스</span><span class="p">(</span><span class="nx">옵션</span><span class="p">));</span>
</code></pre></div></div>

<p>시작 인덱스는 해당 인덱스를 포함하지만, 마지막 인덱스를 해당 인덱스까지 포함하지 않고 직전까지 잘라내기 때문에 헷갈리지 말아야 합니다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">str</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Mozilla</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nf">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nf">substring</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>
<span class="c1">// Expected output: "oz"</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nf">substring</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
<span class="c1">// Expected output: "zilla"</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nf">substring</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
<span class="c1">// Expected output: ""</span>
</code></pre></div></div>

<p>만약, 마지막 인덱스보다 시작 인덱스가 크다면 알아서 순서를 바꿔서 메소드가 동작합니다.</p>

<p>시작 인덱스와 마지막 인덱스가 같다면 빈 문자열을 반환합니다.</p>

<h2 id="문제-출처">문제 출처</h2>

<ul>
  <li>프로그래머스</li>
</ul>]]></content><author><name>Sujin Kim</name></author><category term="programmers-lv1" /><category term="filter" /><category term="스택" /><category term="큐" /><summary type="html"><![CDATA[프로그래머스 Lv1. 가운데 글자 가져오기]]></summary></entry><entry><title type="html">[Leaning Typescript 🦜] Primitive Cooking</title><link href="http://localhost:4000/typescript/typescript-learning-typescript-primitive-cooking/" rel="alternate" type="text/html" title="[Leaning Typescript 🦜] Primitive Cooking" /><published>2023-03-27T00:00:00+09:00</published><updated>2023-03-27T22:06:00+09:00</updated><id>http://localhost:4000/typescript/typescript-learning-typescript-primitive%20cooking</id><content type="html" xml:base="http://localhost:4000/typescript/typescript-learning-typescript-primitive-cooking/"><![CDATA[<h1 id="-primitive-cooking">🥗 Primitive Cooking</h1>

<blockquote>
  <p>Those pesky Java programmers are at it again!<br />
I wrote a few functions for a friend to help arrange meals when I have guests over. The friend worked with their enterprise application development team to “improve” the code. Next thing I know, they’ve replaced all my TypeScript-y literal and union types with plain old primitive types.<br />
Those Java fans are perfectly good developers -and lovely people- but we don’t see eye-to-eye on type systems. Now TypeScript is reporting type errors on my code. Could you please correct the type annotations in my files – and maybe a couple bugs the improved types helped TypeScript find?</p>
</blockquote>

<p>성가신 자바 프로그래머들이 또 시작이야!<br />
나는 친구를 위해 손님들이 왔을 때 식사 준비를 도와줄 수 있도록 몇개의 기능을 작성했어. 친구는 코드를 ✌향상시키기 위해✌ 기업 애플리케이션 개발팀과 일해. 다음으로 내가 아는건, 그 사람들이 내 타입스크립트 코드의 리터럴과 유니언 타입을 오래된 순수 원시 타입으로 바꿨다는 거야.(읽기만 해도 열받음)<br />
이 자바 팬들은 완전 좋은 개발자들이야(게다가 사랑스러움). 하지만 우린(자바와 자바스크립트) 타입 시스템이 일치하지 않잖아. 지금 타입스크립트가 내 코드에서 타입 에러들을 보고하고 있거든. 내 파일들에서 타입 애너테이션들을 올바르게 고쳐줄래?</p>

<h2 id="-step-1-ingredients">🍽 Step 1: Ingredients</h2>

<blockquote>
  <p>The first area of code I’ll need you to fix is my ingredients planner. I use this to print what kind of salad greens and dressings to use for meals.<br />
Again, the runtime code is working fine. It’s just the type annotations you’ll need to correct.</p>
</blockquote>

<p><strong>▪ 요약: 샐러드 야채와 드레싱 재료 플래너의 타입 애너테이션을 고쳐라!</strong></p>

<h3 id="-문제-코드">📄 문제 코드</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Please correct any type annotation problems here! ✨</span>
<span class="kd">let</span> <span class="nx">arugula</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">dressing</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">lettuce</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">mealDate</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>

<span class="nx">arugula</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="nx">dressing</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">honey dijon</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">lettuce</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
<span class="nx">mealDate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="dl">"</span><span class="s2">September 13, 2021</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`We're starting on </span><span class="p">${</span><span class="nx">mealDate</span><span class="p">}</span><span class="s2"> with a dressing of </span><span class="p">${</span><span class="nx">dressing</span><span class="p">}</span><span class="s2">.`</span><span class="p">);</span>

<span class="nf">if </span><span class="p">(</span><span class="nx">arugula</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`There are </span><span class="p">${</span><span class="nx">arugula</span><span class="p">}</span><span class="s2"> arugula serving(s) for this first meal.`</span><span class="p">);</span>
<span class="p">}</span>

<span class="nf">if </span><span class="p">(</span><span class="nx">lettuce</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`There are </span><span class="p">${</span><span class="nx">lettuce</span><span class="p">}</span><span class="s2"> lettuce serving(s) for this first meal.`</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">arugula</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
<span class="nx">dressing</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">balsamic vinaigrette</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">lettuce</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="nx">mealDate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="dl">"</span><span class="s2">March 13, 2022</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Next up, a </span><span class="p">${</span><span class="nx">mealDate</span><span class="p">}</span><span class="s2"> meal with a dressing of </span><span class="p">${</span><span class="nx">dressing</span><span class="p">}</span><span class="s2">.`</span><span class="p">);</span>

<span class="nf">if </span><span class="p">(</span><span class="nx">arugula</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`This time, there are </span><span class="p">${</span><span class="nx">arugula</span><span class="p">}</span><span class="s2"> arugula serving(s).`</span><span class="p">);</span>
<span class="p">}</span>

<span class="nf">if </span><span class="p">(</span><span class="nx">lettuce</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`This time, there are </span><span class="p">${</span><span class="nx">lettuce</span><span class="p">}</span><span class="s2"> lettuce serving(s).`</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="p">{};</span>
</code></pre></div></div>

<p>코드를 컴파일 하면 다음과 같은 에러가 발생합니다.</p>

<p><img src="https://user-images.githubusercontent.com/56298540/227881136-7f53dfe4-79fd-4351-bc02-5ae9af8023ec.png" alt="image" /></p>

<h3 id="-풀이-과정">📄 풀이 과정</h3>

<p>에러 메시지를 보고 변수 선언부에서 유니언 타입으로 타입을 확장해주었습니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arugula</span><span class="p">:</span> <span class="kr">number</span> <span class="o">|</span> <span class="kc">undefined</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">dressing</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">lettuce</span><span class="p">:</span> <span class="kr">number</span> <span class="o">|</span> <span class="kc">undefined</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">mealDate</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="nb">Date</span><span class="p">;</span>
</code></pre></div></div>

<p>정답 코드를 보니 고쳐야할 점이 있습니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">mealDate</span><span class="p">:</span> <span class="nb">Date</span><span class="p">;</span>
</code></pre></div></div>

<p>변수 <code class="language-plaintext highlighter-rouge">mealDate</code>는 하나의 타입만 사용합니다.<br />
따라서 유니언 타입을 통해 타입을 확장하는게 아니라, 타입 애너테이션에서 타입을 수정해주면 되는 것이었습니다.<br />
낚였습니다.</p>

<h2 id="-step-2-recipes">🍽 Step 2: Recipes</h2>

<blockquote>
  <p>Those salad ingredients are looking delectable, thank you! Next up is my list of favorite recipes.<br />
It looks like these seem to pass the TypeScript compiler fine as-is. However, there’s a catch: I want to make sure future recipes keep to the same difficulty and group types. Could you please use unions of literal types for them? Both should only have three possible values.<br />
This time, the runtime code is mostly working fine. Except I think I made a typo in one of the group values? You’ll need to fix that. Otherwise it’s just the type annotations you’ll need to correct.</p>
</blockquote>

<p><strong>▪ 요약: 샐러드는 이제 되었으니, 미래의 요리법(?)이 동일한 난이도와 그룹 타입을 갖도록 리터럴 유니언 타입을 사용해라!</strong></p>

<ul>
  <li>작성되는 유니언 타입은 세개의 타입으로 구성됩니다.</li>
</ul>

<h3 id="-문제-코드-1">📄 문제 코드</h3>

<p>이번 문제는 문제 코드를 컴파일해도 에러가 발생하지 않습니다.</p>

<p>목적은 에러 해결이 아닌, 유니언 타입을 사용한 코드 리팩토링입니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Please clarify any overly wide (permissive) type annotations here! ✨</span>
<span class="kd">let</span> <span class="nx">difficulty</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">group</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>

<span class="c1">// Start with something quick and painless to prepare...</span>
<span class="nx">difficulty</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="nx">group</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">appetizer</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">title</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Raspberry Vinaigrette Salad</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`[</span><span class="p">${</span><span class="nx">group</span><span class="p">}</span><span class="s2">] </span><span class="p">${</span><span class="nx">title</span><span class="p">}</span><span class="s2">: </span><span class="p">${</span><span class="nx">difficulty</span><span class="p">}</span><span class="s2">/3 difficulty`</span><span class="p">);</span>

<span class="c1">// Next up, a nice hearty dish to center the meal...</span>
<span class="nx">difficulty</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="nx">group</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">entree</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">title</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Cauliflower Steaks</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`[</span><span class="p">${</span><span class="nx">group</span><span class="p">}</span><span class="s2">] </span><span class="p">${</span><span class="nx">title</span><span class="p">}</span><span class="s2">: </span><span class="p">${</span><span class="nx">difficulty</span><span class="p">}</span><span class="s2">/3 difficulty`</span><span class="p">);</span>

<span class="c1">// Make a real impact with fancy delectable desserts...</span>
<span class="nx">difficulty</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="nx">group</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">dessert</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">title</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Coconut Chocolate Ganache</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`[</span><span class="p">${</span><span class="nx">group</span><span class="p">}</span><span class="s2">] </span><span class="p">${</span><span class="nx">title</span><span class="p">}</span><span class="s2">: </span><span class="p">${</span><span class="nx">difficulty</span><span class="p">}</span><span class="s2">/3 difficulty`</span><span class="p">);</span>

<span class="c1">// Send everyone off with a nice closer.</span>
<span class="nx">difficulty</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="nx">group</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">desert</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">title</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Biscuits and Coffee</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`[</span><span class="p">${</span><span class="nx">group</span><span class="p">}</span><span class="s2">] </span><span class="p">${</span><span class="nx">title</span><span class="p">}</span><span class="s2">: </span><span class="p">${</span><span class="nx">difficulty</span><span class="p">}</span><span class="s2">/3 difficulty`</span><span class="p">);</span>

<span class="k">export</span> <span class="p">{};</span>
</code></pre></div></div>

<h3 id="-풀이-과정-1">📄 풀이 과정</h3>

<p>정해진 값을 사용하는 변수는 <code class="language-plaintext highlighter-rouge">difficulty</code>와 <code class="language-plaintext highlighter-rouge">group</code>으로 보입니다.</p>

<p>이 변수들이 사용하는 값을 리터럴 타입으로 사용해서 유니언 타입으로 타입을 구체화 시켜보겠습니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">difficulty</span><span class="p">:</span> <span class="mi">1</span> <span class="o">|</span> <span class="mi">2</span> <span class="o">|</span> <span class="mi">3</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">group</span><span class="p">:</span> <span class="dl">"</span><span class="s2">appetizer</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">entree</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">dessert</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
</code></pre></div></div>

<p>유니언 타입을 작성하다보니 문제 제공자의 오타가 보입니다.</p>

<p>설마 레시피에 ‘desert(사막)`를 뜻하는 단어를 사용하진 않을 것 같은데요.</p>

<p>정답 코드에는 <code class="language-plaintext highlighter-rouge">dessert</code>로 올바르게 작성되어 있습니다.</p>

<p>너무 사소한 실수라 해당 레포에 pr를 날려볼까 고민하다 어떤 사람은 <code class="language-plaintext highlighter-rouge">a</code>하나로도 pr를 작성하길래 pr를 작성해보기로 결심했습니다.</p>

<p>아니면 조슈아 골든버그씨가 말해주겠죠.</p>

<p>🖇 <a href="https://github.com/LearningTypeScript/projects/pull/259">인생 처음 오픈소스 PR</a></p>

<h2 id="-step3-seating">🍽 Step3: Seating</h2>

<blockquote>
  <p>You’re doing wonderfully, my friend. I can’t wait to invite you to my next fancy dinner party.<br />
Speaking of which, I need to properly type the program to randomize invitations and seat assignments. My friends can be kind of childish -they’re babies, really- and are very picky about seating.<br />
I also very much like what you did with the string literal union types in the last step. Could you please avoid using the string type altogether in this one? Just use literal types.<br />
Oh, and I think there’s a typo in one of the names here too.</p>
</blockquote>

<p><strong>▪ 요약: 저번 step에서 네가 만든 string 리터럴 유니언 타입 맘에 들었어. 이번엔 string타입을 사용하지말고 리터럴 타입만 사용해서 타입을 완성시켜봐라!</strong></p>

<h3 id="-문제-코드-2">📄 문제 코드</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Please fill in any missing type annotations here...</span>
<span class="kd">const</span> <span class="nx">headOfTable</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Me!</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">adjacentLeft</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">adjacentRight</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">furtherLeft</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">furtherRight</span><span class="p">;</span>

<span class="c1">// I always invite Susie and Tommy! ♥</span>
<span class="nf">if </span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">random</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mf">0.5</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">adjacentLeft</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Susie</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">adjacentRight</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Tommy</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">adjacentLeft</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Tommy</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">adjacentRight</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Susie</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// I invite Angelica about half of the time. We're not as close as Susie and Tommy. It's a long story.</span>
<span class="c1">// I try to fill `furtherLeft` first...</span>
<span class="nf">if </span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">random</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mf">0.5</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">furtherLeft</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Angelica</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Same with Chuckie. I like them, but do I *really* like hanging out with them? Only sometimes.</span>
<span class="c1">// ...then after that `furtherRight`</span>
<span class="nf">if </span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">random</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mf">0.5</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">if </span><span class="p">(</span><span class="nx">furtherLeft</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">furtherRight</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Chuckie</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">furtherLeft</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Chuckie</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// If I invited Angelica but not Chuckie, I'll invite Kimi. They get along well with Angelica but not Chuckie.</span>
<span class="nf">if </span><span class="p">(</span><span class="nx">furtherLeft</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">Angelica</span><span class="dl">"</span> <span class="o">&amp;&amp;</span> <span class="nx">furtherRight</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">Chuckie</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">furtherRight</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Kimi</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// If I invited Chuckie but not Angelica, I'll invite Timmy. They get along well with Chuckie but not Angelica.</span>
<span class="nf">if </span><span class="p">(</span><span class="nx">furtherLeft</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">Chuckie</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">furtherRight</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Timmy</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`At the head of the table is... </span><span class="p">${</span><span class="nx">headOfTable</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Adjacent to the left is: </span><span class="p">${</span><span class="nx">adjacentLeft</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Adjacent to the right is: </span><span class="p">${</span><span class="nx">adjacentRight</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Further down on the left is: </span><span class="p">${</span><span class="nx">adjacentLeft</span> <span class="o">??</span> <span class="dl">"</span><span class="s2">nobody</span><span class="dl">"</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Further down on the right is: </span><span class="p">${</span><span class="nx">adjacentRight</span> <span class="o">??</span> <span class="dl">"</span><span class="s2">nobody</span><span class="dl">"</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>

<span class="k">export</span> <span class="p">{};</span>
</code></pre></div></div>

<h3 id="-풀이-과정-2">📄 풀이 과정</h3>

<p>변수 선언부를 보니 초깃값이 설정되어 있지 않아, 타입이 <code class="language-plaintext highlighter-rouge">any</code>로 추론되고 있습니다.</p>

<p>변수 선언부에서 리터럴 타입으로 각각 타입을 설정합니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">adjacentLeft</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Susie</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">Tommy</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">adjacentRight</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Susie</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">Tommy</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">furtherLeft</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Angelica</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">Chuckie</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">furtherRight</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Kimi</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">Timmy</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">Chuckie</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/56298540/227911602-a53012c3-99c1-47ca-8801-68d04b9dc5bd.png" alt="image" /></p>

<p>값이 할당되기 전에 사용되어 에러를 발생시킵니다.</p>

<p>값이 할당되지 않은 변수를 위해 <code class="language-plaintext highlighter-rouge">undefined</code> 타입을 명시적으로 추가해주었습니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">furtherLeft</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Angelica</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">Chuckie</span><span class="dl">"</span> <span class="o">|</span> <span class="kc">undefined</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">furtherRight</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Kimi</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">Timmy</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">Chuckie</span><span class="dl">"</span> <span class="o">|</span> <span class="kc">undefined</span><span class="p">;</span>
</code></pre></div></div>]]></content><author><name>Sujin Kim</name></author><category term="TypeScript" /><category term="learning typescript" /><category term="러닝 타입스크립트" /><category term="Primitive Cooking" /><category term="유니언 타입" /><category term="리터럴 타입" /><summary type="html"><![CDATA[책 learning typescript 3장 유니언과 리터럴 실습 프로젝트 입니다.]]></summary></entry><entry><title type="html">🍸 칵테일 러브 좀비</title><link href="http://localhost:4000/books/books-cocktail-love-jombie/" rel="alternate" type="text/html" title="🍸 칵테일 러브 좀비" /><published>2023-03-26T00:00:00+09:00</published><updated>2023-03-26T22:06:00+09:00</updated><id>http://localhost:4000/books/books-cocktail-love-jombie</id><content type="html" xml:base="http://localhost:4000/books/books-cocktail-love-jombie/"><![CDATA[<p><img src="https://image.yes24.com/goods/89913383/XL" alt="칵테일, 러브, 좀비" /></p>

<p>▪ 제목: 칵테일, 러브, 좀비<br />
▪ 작가: 조예은<br />
▪ 출판사: 안전가옥<br />
▪ 독서 기간: ? ~ 2023/03/16<br />
▪ 읽은 방식: 전자책</p>

<hr />

<p>칵테일, 러브, 좀비는 4개의 단편소설로 구성된 한국 미스터리소설이다.
반전과 미스테리를 좋아하는 독자라면 필수로 읽어야 하는 작품집이라 생각한다. 그만큼 유명하기도 하다.</p>

<p>수록된 작품 중 가장 인상깊었던 작품을 고르자면 습지와 오버랩 나이프, 나이프라 할 수 있겠는데 이유는 서로 다르다.</p>

<p>습지는 귀신이 나오지만 무섭지 않다. 오히려 긴장감 넘치는 책 분위기 속에서 살짝 긴장을 풀고 차분하게 읽을 수 있는 분위기를 풍기는 내용이다. 미스테리 스릴러 소설이라고 무조건 빠른 호흡과 높은 텐션이 필수일 필요가 없다는 점을 새로이 알게 해준 작품이다.</p>

<p>이에 반해 오버랩 나이프, 나이프는 읽는 내내 책 종이가 넘어가는게 아까울 정도로 빠져들었다. 이때 혼자 카페에 앉아 책을 읽었는데 반전을 맞이할 때마다 표정관리하느라 꽤나 힘들었다. 조예은 작가님의 작품은 스토리가 흔하지 않고 결말이 뻔하지 않다. 작품의 제목조차 처음에는 어떤 뜻인지 알 수 없다. 오버랩 나이프, 나이프. 어떤 내용이 전개될지 도통 알기 힘들다. 작품을 다 읽고 다시 제목을 보았을 때 제목에서 다 알려주고 있다는걸 깨닫고는 무언가 당해버린 기분이 든다. 미루고 미뤘던 젤리장수 대학살도 조만간 읽어야 겠다.</p>]]></content><author><name>Sujin Kim</name></author><category term="books" /><category term="칵테일 러브 좀비" /><category term="조예은" /><category term="안전가옥" /><category term="추리/미스테리" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">[Leaning Typescript 🦜] system of a clown</title><link href="http://localhost:4000/typescript/typescript-learning-typescript-clowning-around/" rel="alternate" type="text/html" title="[Leaning Typescript 🦜] system of a clown" /><published>2023-03-23T00:00:00+09:00</published><updated>2023-03-23T22:06:00+09:00</updated><id>http://localhost:4000/typescript/typescript-learning-typescript-clowning-around</id><content type="html" xml:base="http://localhost:4000/typescript/typescript-learning-typescript-clowning-around/"><![CDATA[<h1 id="-system-of-a-clown">🤡 system of a clown</h1>

<blockquote>
  <p>🎈 Help me, please!<br />
I planned an elaborate clown-themed surprise party for my best friend. The whole event was planned using a few files of TypeScript code I’d written.<br />
My friend somehow caught wind of the party and enlisted the clowns’ help to vandalize the program. Not only did the clowns remove or make incorrect my TypeScript type annotations, they introduced subtle bugs by subtly changing some of the values.<br />
Could you please add correct type annotations in my files and fix any bugs detected by TypeScript? You’re my surprise clown celebration’s last hope! 🤡</p>
</blockquote>

<p>🎈 도와주라주!<br />
내 베프를 위해 삐에로 컨셉의 깜짝 파티를 준비했어.
모든 이벤트가 내가 쓴 몇개의 타입스크립트 파일로 준비되어 있지.<br />
근데 내 친구가 어떻게든 정보를 들어가지고 프로그램을 파괴하기 위해 삐에로들한테 도움을 요청한거야!
삐에로들은 내 타입스크립트 애너테이션을 지우고 망가뜨리는것 뿐만 아니라, 일부 값들을 교묘하게 바꿔버리며 버그마저 도입해버렸어.<br />
내 파일에 올바른 애너테이션을 추가하고 버그를 잡아줄 수 있어? 너는 내 깜짝 삐에로 파티의 마지막 희망이야! 🤡</p>

<blockquote>
  <p>타입 애너테이션 (type annotation)? 타입에 주석을 다는 것으로 변수나 함수의 타입을 설정하는 것.<br /> ex) let name: string = ‘sujin’</p>
</blockquote>

<h2 id="-step-1-clowning-around">🎈 Step 1: Clowning Around</h2>

<blockquote>
  <p>The first area of code I’ll need you to fix is the activity assignment engine. It repeatedly creates groups of size 5-10 guests. Each group is directed to go to an activity, which can hold up to a certain number of them at a time. <br />
It looks like the clowns didn’t change too much on this one. They mostly just removed a few type annotations and changed one value. <br />
Could you please add back missing type annotations to avoid evolving or implicit anys, and fix the wrong value?</p>
</blockquote>

<p><strong>▪ 요약: 액티비티 할당 엔진에서 타입 애너테이션을 추가하고 오류난 부분을 고쳐라!</strong></p>

<h3 id="-문제-코드">📃 문제 코드</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">remainingGuests</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
<span class="nf">while </span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Each group of guests will be size 5-10</span>
  <span class="kd">const</span> <span class="nx">guestsToAssign</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">5</span><span class="p">)</span> <span class="o">+</span> <span class="mi">5</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">activity</span><span class="p">;</span> <span class="c1">// Those were some nice type annotations you had here!</span>
  <span class="kd">let</span> <span class="nx">capacity</span><span class="p">;</span> <span class="c1">// It'd be a shame if we ... *erased* them! 😈</span>
  <span class="kd">let</span> <span class="nx">requiresSupplies</span><span class="p">;</span>
  <span class="nf">switch </span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">5</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">case</span> <span class="mi">0</span><span class="p">:</span>
      <span class="nx">activity</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">balloon animals</span><span class="dl">"</span><span class="p">;</span>
      <span class="nx">capacity</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
      <span class="nx">requiresSupplies</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
      <span class="nx">activity</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">face painting</span><span class="dl">"</span><span class="p">;</span>
      <span class="nx">capacity</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">;</span>
      <span class="nx">requiresSupplies</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
      <span class="nx">activity</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">juggling</span><span class="dl">"</span><span class="p">;</span>
      <span class="nx">capacity</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
      <span class="nx">requiresSupplies</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="nl">default</span><span class="p">:</span>
      <span class="nx">activity</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">dancing</span><span class="dl">"</span><span class="p">;</span>
      <span class="nx">capacity</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">guestsToAssign</span><span class="p">}</span><span class="s2"> of us will enjoy </span><span class="p">${</span><span class="nx">activity</span><span class="p">}</span><span class="s2">.`</span><span class="p">);</span>
  <span class="nf">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">guestsToAssign</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="nx">capacity</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`\t</span><span class="p">${</span><span class="nx">capacity</span><span class="p">}</span><span class="s2"> will enter the </span><span class="p">${</span><span class="nx">activity</span><span class="p">}</span><span class="s2"> activity.`</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nx">remainingGuests</span> <span class="o">-=</span> <span class="nx">guestsToAssign</span><span class="p">;</span>
  <span class="nf">if </span><span class="p">(</span><span class="nx">remainingGuests</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`We have </span><span class="p">${</span><span class="nx">remainingGuests</span><span class="p">}</span><span class="s2"> remaining guests to entertain.\n`</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="s2">All done!</span><span class="dl">"</span><span class="p">);</span>
<span class="k">export</span> <span class="p">{};</span>
</code></pre></div></div>

<p>문제로 나온 이 코드를 tsc명령어를 이용해 컴파일하면 다음과 같은 오류가 발생합니다.</p>

<p><img src="https://user-images.githubusercontent.com/56298540/227079353-886f9cad-aacd-4b8d-9a5c-08c359f7481b.png" alt="image" /></p>

<p>산술 연산자에 <code class="language-plaintext highlighter-rouge">string</code>값이 할당되고 있는 상황입니다.</p>

<h3 id="-풀이-과정">📃 풀이 과정</h3>

<p>오류가 난 부분을 보니, 산술 연산자에 <code class="language-plaintext highlighter-rouge">string</code>값이 할당되어 컴파일과정에서 막혀버렸습니다.</p>

<p>해당 변수 <code class="language-plaintext highlighter-rouge">capacity</code>를 찾습니다.</p>

<p>switch문안에서 문자열로 되어 있는 <code class="language-plaintext highlighter-rouge">capacity</code>를 찾아 숫자로 고칩니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
      <span class="nx">activity</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">face painting</span><span class="dl">"</span><span class="p">;</span>
      <span class="c1">// capacity = "1";</span>
      <span class="nx">capacity</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 수정</span>
      <span class="nx">requiresSupplies</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
</code></pre></div></div>

<p>요구사항대로 변수가 선언된 부분에서 타입 애너테이션도 추가합니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">activity</span><span class="p">;</span> <span class="c1">// Those were some nice type annotations you had here!</span>
<span class="kd">let</span> <span class="nx">capacity</span><span class="p">;</span> <span class="c1">// It'd be a shame if we ... *erased* them! 😈</span>
<span class="kd">let</span> <span class="nx">requiresSupplies</span><span class="p">;</span>
</code></pre></div></div>

<p>✔ 수정된 전체 코드</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">remainingGuests</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>

<span class="nf">while </span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Each group of guests will be size 5-10</span>
  <span class="kd">const</span> <span class="nx">guestsToAssign</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">5</span><span class="p">)</span> <span class="o">+</span> <span class="mi">5</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">activity</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span> <span class="c1">// Those were some nice type annotations you had here!</span>
  <span class="kd">let</span> <span class="nx">capacity</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span> <span class="c1">// It'd be a shame if we ... *erased* them! 😈</span>
  <span class="kd">let</span> <span class="nx">requiresSupplies</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span>

  <span class="nf">switch </span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">5</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">case</span> <span class="mi">0</span><span class="p">:</span>
      <span class="nx">activity</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">balloon animals</span><span class="dl">"</span><span class="p">;</span>
      <span class="nx">capacity</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
      <span class="nx">requiresSupplies</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
      <span class="nx">activity</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">face painting</span><span class="dl">"</span><span class="p">;</span>
      <span class="nx">capacity</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
      <span class="nx">requiresSupplies</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
      <span class="nx">activity</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">juggling</span><span class="dl">"</span><span class="p">;</span>
      <span class="nx">capacity</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
      <span class="nx">requiresSupplies</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="nl">default</span><span class="p">:</span>
      <span class="nx">activity</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">dancing</span><span class="dl">"</span><span class="p">;</span>
      <span class="nx">capacity</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">guestsToAssign</span><span class="p">}</span><span class="s2"> of us will enjoy </span><span class="p">${</span><span class="nx">activity</span><span class="p">}</span><span class="s2">.`</span><span class="p">);</span>

  <span class="nf">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">guestsToAssign</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="nx">capacity</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`\t</span><span class="p">${</span><span class="nx">capacity</span><span class="p">}</span><span class="s2"> will enter the </span><span class="p">${</span><span class="nx">activity</span><span class="p">}</span><span class="s2"> activity.`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">remainingGuests</span> <span class="o">-=</span> <span class="nx">guestsToAssign</span><span class="p">;</span>
  <span class="nf">if </span><span class="p">(</span><span class="nx">remainingGuests</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`We have </span><span class="p">${</span><span class="nx">remainingGuests</span><span class="p">}</span><span class="s2"> remaining guests to entertain.\n`</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="s2">All done!</span><span class="dl">"</span><span class="p">);</span>

<span class="k">export</span> <span class="p">{};</span>
</code></pre></div></div>

<h2 id="-step-2-clown-availability">🎈 Step 2: Clown Availability</h2>

<blockquote>
  <p>The second and -thank heavens- final area of code I’ll need you to fix is my clown assignment planner.
I use this to print which clowns will be partying with which guests. <br />
Oh, and they introduced several unsettling clown puns in comments.<br />
It’s because of those puns that I can’t fix the code myself.<br />
The clowns again changed a few things around, but nothing more than an incorrect type annotation or different value for a variable.<br />
«««&lt; HEAD
Could you please fix up the file to have no TypeScript complaints? x
=======
Could you please fix up the file to have no TypeScript complaints?</p>
</blockquote>

<p><strong>▪ 요약: 고마운데 일하나 더 해라! 광대 배정 플래너에서 오류를 수정해라!</strong></p>

<h3 id="-문제-코드-1">📄 문제 코드</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Note: I'm planning on inviting 20 guests in total.</span>
<span class="c1">// Some clowns can only handle a certain number of guests.</span>
<span class="kd">let</span> <span class="nx">guestCount</span><span class="p">:</span> <span class="nx">boolean</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">clownsCount</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">zilch!</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">let</span> <span class="nx">krustyAvailability</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">ronaldAvailability</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">pennywiseAvailability</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

<span class="kd">let</span> <span class="nx">matchingsDescription</span><span class="p">:</span> <span class="kr">any</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">lastClown</span><span class="p">;</span>

<span class="k">do</span> <span class="p">{</span>
  <span class="nx">clownsCount</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="c1">// Krusty says: I had a one-man show on Broadway...</span>
  <span class="c1">// That's who showed up, one man!</span>
  <span class="nf">if </span><span class="p">(</span><span class="nx">krustyAvailability</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">guestCount</span> <span class="o">-=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="nx">krustyAvailability</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="nx">matchingsDescription</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">Krusty will handle the first ten guests.</span><span class="se">\n</span><span class="dl">"</span><span class="p">;</span>
    <span class="nx">lastClown</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Krusty</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">continue</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// Ronald says: McDonald's donated a large set of computers to a school...</span>
  <span class="c1">// They were all Big Macs!</span>
  <span class="nf">if </span><span class="p">(</span><span class="nx">ronaldAvailability</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">guestCount</span> <span class="o">-=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="nx">ronaldAvailability</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="nx">matchingsDescription</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">Ronald will handle the next five guests.</span><span class="se">\n</span><span class="dl">"</span><span class="p">;</span>
    <span class="nx">lastClown</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Ronald</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">continue</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// Pennywise asks: what's a sewer's favorite data type?</span>
  <span class="c1">// Pennywise answers: Floats!</span>
  <span class="nf">if </span><span class="p">(</span><span class="nx">pennywiseAvailability</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">pennywiseAvailability</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="nx">matchingsDescription</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">Pennywise w̺̞̠i̢͇͙l͇̞l͇͍̘ c͓͕̝o̡̠̞n̼̝s̡̞͎u͉̝͔m͚̪̞e̢͚̝ y̴̡̡͕͌̿́ó̸̢͇͚̾̕u̸̡̡͎͒͛r̸͕͓͖̈́͆͒ s̵̺̘̪͒͆̓o̵̡͚̟̽͆̚u̵̠͖̓͐͝l̸͓̘͇̐̓̚s̸̺͎̽̈́͆.</span><span class="dl">"</span><span class="p">;</span>
    <span class="nx">lastClown</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Pennywise</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">continue</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="s2">`Oh no! We're out of clowns!`</span><span class="p">);</span>
<span class="p">}</span> <span class="nf">while </span><span class="p">(</span><span class="nx">guestCount</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>

<span class="nf">if </span><span class="p">(</span><span class="nx">clownsCount</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">We've got a lot of clowns coming!</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="nf">if </span><span class="p">(</span><span class="nx">matchingsDescription</span><span class="p">.</span><span class="nf">length</span><span class="p">())</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`There will be </span><span class="p">${</span><span class="nx">clownsCount</span><span class="p">}</span><span class="s2"> clowns!\n`</span><span class="p">);</span>
  <span class="nx">clownsole</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">matchingsDescription</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`The last clown is: </span><span class="p">${</span><span class="nx">lastClown</span><span class="p">.</span><span class="nf">toUpperCase</span><span class="p">()}</span><span class="s2">!`</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Nobody gets a clown. Terrible party. Goodbye.</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="p">{};</span>
</code></pre></div></div>

<p>1번 문제보다 많은 오류가 발생했습니다.</p>

<p><img src="https://user-images.githubusercontent.com/56298540/227455072-5aa043a8-f1b9-430b-9b62-249b1050c3b6.png" alt="image" /></p>

<h3 id="-풀이과정">📄 풀이과정</h3>

<h4>▪ Type 'number' is not assignable to type 'boolean'.</h4>

<p><code class="language-plaintext highlighter-rouge">guestCount</code>의 타입이 number인데 boolean으로 타입 애너테이션 설정이 잘못되어 있습니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 문제 코드</span>
<span class="kd">let</span> <span class="nx">guestCount</span><span class="p">:</span> <span class="nx">boolean</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>

<span class="c1">// 수정된 코드</span>
<span class="kd">let</span> <span class="nx">guestCount</span><span class="p">:</span> <span class="kr">number</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</code></pre></div></div>

<h4> ▪  Operator '&gt;' cannot be applied types 'string' and 'number'.</h4>

<p><code class="language-plaintext highlighter-rouge">clownCount</code>에 산술연산자를 사용하고 있는데 선언부에 보면 문자열을 할당하고 있습니다.</p>

<p><code class="language-plaintext highlighter-rouge">zilch</code>가 무슨 뜻인지 찾아보니 <code class="language-plaintext highlighter-rouge">아무것도 없음</code>이라는 뜻이라 값을 할당하지 않았습니다.</p>

<p><code class="language-plaintext highlighter-rouge">let</code>으로 선언되었기 때문에 가능합니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 문제 코드</span>
<span class="kd">let</span> <span class="nx">clownsCount</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">zilch!</span><span class="dl">"</span><span class="p">;</span>
<span class="p">...</span>
<span class="nf">if </span><span class="p">(</span><span class="nx">clownsCount</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">We've got a lot of clowns coming!</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// 수정된 코드</span>
<span class="kd">let</span> <span class="nx">clownCount</span><span class="p">;</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/56298540/227459790-39d64e84-a7a5-4e18-bbbf-d66322f0d4cc.png" alt="image" /></p>

<p>새로운 에러를 만들며 해결되지 않았습니다.</p>

<p>값이 할당되기 전에 산술연산자를 적용할 수 없기 때문입니다.</p>

<p>초기값으로 <code class="language-plaintext highlighter-rouge">0</code>을 할당해주었지만, 뭔가 답이 아닐것만 같은 느낌이 드네요.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 수정된 코드</span>
<span class="kd">let</span> <span class="nx">clownCount</span><span class="p">:</span> <span class="kr">number</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</code></pre></div></div>

<h4>▪ Cannot find name 'clownsole'. Did 
you mean 'console'?</h4>

<p><code class="language-plaintext highlighter-rouge">clownsole</code>은 처음 들어봅니다. 문제가 저를 바보로 아나봅니다. 재밌네요.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 문제 코드</span>
<span class="nx">clownsole</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">matchingsDescription</span><span class="p">);</span>

<span class="c1">// 수정된 코드</span>
<span class="kd">let</span> <span class="nx">clownCount</span><span class="p">:</span> <span class="kr">number</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">matchingsDescription</span><span class="p">);</span>
</code></pre></div></div>

<p>끝!</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Found</span> <span class="mi">0</span> <span class="nx">errors</span><span class="p">.</span> <span class="nx">Watching</span> <span class="k">for</span> <span class="nx">file</span> <span class="nx">changes</span><span class="p">.</span>
</code></pre></div></div>

<p>📄 고쳐야 할 점</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">guestCount</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">clownsCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</code></pre></div></div>

<p>솔루션 코드를 보니 타입 애너테이션이 빠져있습니다.</p>

<p>책을 읽을 때 값을 할당할 경우 자동으로 타입추론이 되기 때문에 타입 애너테이션을 설정하면 중복으로 타입설정과정이 진행되는 것과 마찬가지라 불필요한 과정이라고 한 기억이 납니다.</p>

<p><strong>✔ 값을 할당해 타입추론이 될 경우에는, 타입 애너테이션을 생략하자</strong></p>

<p>그래도 <code class="language-plaintext highlighter-rouge">0</code>을 할당하는게 맞았네요 🎉</p>

<hr />

<p>출처</p>

<ul>
  <li><a href="https://www.learningtypescript.com/the-type-system/">learning typescript</a></li>
</ul>]]></content><author><name>Sujin Kim</name></author><category term="TypeScript" /><category term="learning typescript" /><category term="러닝 타입스크립트" /><category term="type system" /><category term="clowning around" /><summary type="html"><![CDATA[책 learning typescript 2장 타입 시스템 실습 프로젝트 입니다.]]></summary></entry><entry><title type="html">tsconfig.json 파일 살펴보기</title><link href="http://localhost:4000/typescript/typescript-tsconfig/" rel="alternate" type="text/html" title="tsconfig.json 파일 살펴보기" /><published>2023-03-22T00:00:00+09:00</published><updated>2023-03-22T22:06:00+09:00</updated><id>http://localhost:4000/typescript/typescript-tsconfig</id><content type="html" xml:base="http://localhost:4000/typescript/typescript-tsconfig/"><![CDATA[<h2 id="-tsconfigjson-파일이란">📄 tsconfig.json 파일이란?</h2>
<p>tsconfig.json 파일은 타입스크립트 프로젝트에서 타입스크립트에 관한 환경설정을 할 수 있는 <strong>타입스크립트 컴파일러 설정파일</strong>입니다.</p>

<h2 id="-tsconfigjson-파일에서-사용하는-옵션">📄 tsconfig.json 파일에서 사용하는 옵션</h2>

<p>tsconfig.json 파일에는 다양한 옵션이 있지만, 자주 사용되는 옵션을 정리했습니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="dl">"</span><span class="s2">compilerOptions</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">module</span><span class="dl">"</span> <span class="p">:</span><span class="dl">"</span><span class="s2">CommonJS</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">target</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">es5</span><span class="dl">"</span><span class="p">,</span>  
    <span class="dl">"</span><span class="s2">esModuleInterop</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>                            
    <span class="dl">"</span><span class="s2">moduleResolution</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">node</span><span class="dl">"</span><span class="p">,</span>                          
    <span class="dl">"</span><span class="s2">outDir</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">dist</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">baseUrl</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">.</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">sourceMap</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">downlevelIteration</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">noImplicitAny</span><span class="dl">"</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">paths</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span><span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">node_modules/*</span><span class="dl">"</span><span class="p">]}</span>                               
  <span class="p">},</span>
  <span class="dl">"</span><span class="s2">include</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">src/**/*</span><span class="dl">"</span><span class="p">]</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">include</code>: 타입스크립트 컴파일러 대상이 되는 경로</li>
</ul>

<h3 id="-module-키">▪ module 키</h3>
<ul>
  <li>컴파일된 ES5 자바스크립트 코드는 웹브라우저와 노드제이에스에서 양쪽에서 동작해야 한다.</li>
  <li>하지만, 웹브라우저와 노드제이에스는 동작방식이 다르다. (웹 브라우저: <code class="language-plaintext highlighter-rouge">amd</code>, 노드제이에스: <code class="language-plaintext highlighter-rouge">commonjs</code> )</li>
  <li>따라서, module키로 동작 대상 플랫폼이 무엇인지 구분해주는 역할을 한다.</li>
</ul>

<h3 id="-moduleresolution-키">▪ moduleResolution 키</h3>
<ul>
  <li>moduule이 어떤 값을 가지느냐에 따라 다르게 설정된다.</li>
  <li><code class="language-plaintext highlighter-rouge">commonjs</code>는 <code class="language-plaintext highlighter-rouge">node</code>로 설정하고, <code class="language-plaintext highlighter-rouge">amd</code>는 <code class="language-plaintext highlighter-rouge">classic</code>으로 설정한다.</li>
</ul>

<h3 id="-target-키">▪ target 키</h3>
<ul>
  <li>트랜스파일할 대상 자바스크립트의 버전을 설정한다.</li>
  <li>보통 es5를 설정한다.</li>
</ul>

<h3 id="-baseurl--outdir-키">▪ baseUrl &amp; OutDir 키</h3>
<ul>
  <li>트랜스파일된 자바스크립트 파일을 저장하는 경로</li>
  <li><code class="language-plaintext highlighter-rouge">OutDir</code>은 baseUrl 설정값을 기준으로 하위 디렉토리를 뜻한다.</li>
</ul>

<h3 id="-paths-키">▪ paths 키</h3>
<ul>
  <li>소스 파일의 import 문에서 from 부분을 해석할 때 찾아야 하는 디렉토리를 설정한다.</li>
  <li><code class="language-plaintext highlighter-rouge">node-module</code>을 포함한 이유는 찾아야하는 소스가 외부 패키지일 경우를 위해 설정한 것이다.</li>
</ul>

<h3 id="-esmoduleinterop-키">▪ esModuleInterop 키</h3>
<ul>
  <li>웹 브라우저에서 동작한다는 가정으로 만들어진 오픈소스 자바스크립트 라이브러리가 CommonJS방식으로 동작하는 타입스크립트 코드에서 실행될 수 있도록 설정</li>
</ul>

<h3 id="-sourcemap-키">▪ sourceMap 키</h3>
<ul>
  <li>소스맵 파일 생성 유무를 설정한다.</li>
  <li>소스맵 파일에는 변환된 자바스크립트 코드가 타입스크립트 코드의 어느 부분에 해당하는지 보여준다.</li>
</ul>

<h3 id="-downleveliteration-키">▪ downlevelIteration 키</h3>
<ul>
  <li>타입스크립트의 생성기(generator) 구문이 정상적으로 동작하도록 설정</li>
</ul>

<h3 id="-nolmplicitany-키">▪ nolmplicitAny 키</h3>
<ul>
  <li>지정하지 않은 타입을 암시적으로 <code class="language-plaintext highlighter-rouge">any</code>로 설정하게 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">false</code>로 설정하면 타입을 지정하지 않았을 때, 에러메세지가 표시되지 않고 넘어간다.</li>
</ul>

<h2 id="참고">참고</h2>

<ul>
  <li>Do It 타입스크립트 프로그래밍 (책)</li>
</ul>]]></content><author><name>Sujin Kim</name></author><category term="TypeScript" /><category term="tsconfig" /><summary type="html"><![CDATA[tsconfig.json 파일 구조를 살펴보자]]></summary></entry><entry><title type="html">[모여봐요 코딩의 늪] useState 비동기 에러 처리하기</title><link href="http://localhost:4000/coding-swamp/projects-codingswamp-useState-asynchronous/" rel="alternate" type="text/html" title="[모여봐요 코딩의 늪] useState 비동기 에러 처리하기" /><published>2023-03-21T00:00:00+09:00</published><updated>2023-03-21T22:06:00+09:00</updated><id>http://localhost:4000/coding-swamp/projects-codingswamp-useState-asynchronous</id><content type="html" xml:base="http://localhost:4000/coding-swamp/projects-codingswamp-useState-asynchronous/"><![CDATA[<h2 id="-문제발생">🐞 문제발생</h2>

<p>사용자의 프로필을 수정하는 과정에서 <code class="language-plaintext highlighter-rouge">useState</code>를 사용해 form을 변경하는데, state가 업데이트 되지 않았다.</p>

<h3 id="-문제-코드">▪ 문제 코드</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="p">...</span>
<span class="kd">const</span> <span class="nx">initialEditForm</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">profileUrl</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
  <span class="na">imageFile</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="na">username</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
  <span class="na">imageUrl</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="p">[</span><span class="nx">memberForm</span><span class="p">,</span> <span class="nx">setMemberForm</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="nx">initialEditForm</span><span class="p">)</span>

<span class="p">...</span>

<span class="kd">const</span> <span class="nx">onChangeProfileImg</span> <span class="o">=</span> <span class="nf">useCallback</span><span class="p">(</span>
    <span class="nf">async </span><span class="p">(</span><span class="nx">e</span><span class="p">:</span> <span class="nx">ChangeEvent</span><span class="o">&lt;</span><span class="nx">HTMLElement</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">ImageFiles</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span> <span class="k">as</span> <span class="nx">HTMLInputElement</span><span class="p">).</span><span class="nx">files</span>
      <span class="nf">if </span><span class="p">(</span><span class="nx">ImageFiles</span> <span class="o">&amp;&amp;</span> <span class="nx">ImageFiles</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">URL</span><span class="p">.</span><span class="nf">createObjectURL</span><span class="p">(</span><span class="nx">ImageFiles</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="nf">setMemberForm</span><span class="p">({</span> <span class="p">...</span><span class="nx">memberForm</span><span class="p">,</span> <span class="na">imageFile</span><span class="p">:</span> <span class="nx">ImageFiles</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">})</span> <span class="c1">// 문제부분</span>
        <span class="nf">setMemberForm</span><span class="p">({</span> <span class="p">...</span><span class="nx">memberForm</span><span class="p">,</span> <span class="na">imageUrl</span><span class="p">:</span> <span class="nx">url</span> <span class="p">})</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="p">[</span><span class="nx">imgInputRef</span><span class="p">],</span>
  <span class="p">)</span>

</code></pre></div></div>

<p>이 부분을 해결하려고 imageFile만 담는 state를 생성했을 때는 값이 바뀌는 것을 확인했는데,
도대체 왜 처음 작성했던 코드에서는 state가 변경되지 않는지 너무 궁금해서 꽤 오래 코드를 수정하고 손봤다.</p>

<p>그래도 해결이 안되서 <a href="https://okky.kr/questions/1417086#answer-661188">오키</a>에 질문글을 작성하고 이유를 알 수 있었다.</p>

<h2 id="-문제해결">🔨 문제해결</h2>

<p>문제는 <strong><code class="language-plaintext highlighter-rouge">useState</code>의 비동기 처리 방식</strong>이었다.</p>

<p><code class="language-plaintext highlighter-rouge">useState</code>가 비동기로 동작한다는 것을 어렴풋이 알고있었지만 어떻게 처리가 진행되는지 몰라서 문제가 어디서 발생했는지 정확히 모르고 애먼 코드들만 뜯어보고 답답해했다.<br /> 왜 <code class="language-plaintext highlighter-rouge">imageUrl</code>은 변경이 적용되고 첫번째 setState를 호출해서 적용한 <code class="language-plaintext highlighter-rouge">imageFile</code>은 변경이 안될까?</p>

<p>💡 useState는 비동기적으로 처리가 진행되기 때문에 useState를 두번 호출할 때, 마지막 호출시 처음 state의 변경분은 반영되지 않기 때문이다!</p>

<p>리액트는 성능을 최적화하기 위해 setState가 연속 호출되면 배치처리를 통해 한번에 렌더링한다고 한다.</p>

<blockquote>
  <p>배치(batch)란? 리액트가 여러개의 state 업데이트를 하나의 리렌더링으로 묶는 것</p>
</blockquote>

<p>따라서, 위 코드에서 문제가 발생한 이유는 기존 <code class="language-plaintext highlighter-rouge">memberForm</code>에 imageFile이 더해진 상태로 변경된 것이 state에 적용되기 전에 <strong>다시 <code class="language-plaintext highlighter-rouge">memberForm</code>을 재사용</strong>하기 때문에 imageFile에 관한 변경사항이 적용되지 않고 imageUrl이 더해진 값으로 state가 적용되기 때문이었던 것이다.</p>

<h3 id="-변경된-코드">▪ 변경된 코드</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">setMemberForm</span><span class="p">({</span> <span class="p">...</span><span class="nx">memberForm</span><span class="p">,</span> <span class="na">imageFile</span><span class="p">:</span> <span class="p">...,</span> <span class="na">imageUrl</span><span class="p">:</span> <span class="nx">url</span> <span class="p">})</span>
</code></pre></div></div>

<p>setState를 한번만 호출해서 비동기 상황을 발생시키지 않게 고쳤고, 문제는 해결되었다.<br />
비동기에 관한 삽질은 api통신을 할 때만 생길줄 알았던 내 안일한 생각이 가장 큰 문제였다.<br />
안다고 다 아는게 아니라는 것을 다시 한번 뇌에 새기게 되었다.</p>]]></content><author><name>Sujin Kim</name></author><category term="coding-swamp" /><category term="모코늪" /><category term="useState" /><category term="비동기" /><summary type="html"><![CDATA[redux에서 관리하는 state를 객체로 다시 구조화]]></summary></entry><entry><title type="html">[모여봐요 코딩의 늪] 사용자 폼 관련 Slice 리팩토링 (state 객체로 관리하기)</title><link href="http://localhost:4000/coding-swamp/projects-coding-swamp/" rel="alternate" type="text/html" title="[모여봐요 코딩의 늪] 사용자 폼 관련 Slice 리팩토링 (state 객체로 관리하기)" /><published>2023-03-10T00:00:00+09:00</published><updated>2023-03-10T22:06:00+09:00</updated><id>http://localhost:4000/coding-swamp/projects-coding-swamp</id><content type="html" xml:base="http://localhost:4000/coding-swamp/projects-coding-swamp/"><![CDATA[<h2 id="-리팩토링-이유">❔ 리팩토링 이유</h2>

<p>좋은 코드는 코드만 보고 어떤 일을 하는지 알 수 있는 코드라고 배웠다.</p>

<p>하지만 나의 코드는 코드만 보고 무슨일을 하는 지 알 수 없었다.</p>

<h3 id="기존의-memberform-데이터-구조">기존의 MemberForm 데이터 구조</h3>

<h4 id="-storemembermemberformslicets">💾 store/member/memberFormSlice.ts</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">initialMemberForm</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">value</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">imageFile</span><span class="dl">"</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="na">isValidate</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
    <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">username</span><span class="dl">"</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span> <span class="na">isValidate</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="na">emailAuth</span><span class="p">:</span> <span class="kc">false</span> <span class="p">},</span>
    <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">email</span><span class="dl">"</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span> <span class="na">isValidate</span><span class="p">:</span> <span class="kc">false</span> <span class="p">},</span>
    <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">password</span><span class="dl">"</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span> <span class="na">isValidate</span><span class="p">:</span> <span class="kc">false</span> <span class="p">},</span>
  <span class="p">],</span>
<span class="p">};</span>
</code></pre></div></div>

<p>데이터 구조가 이렇게 되어있으면 값에 접근할 때 값의 이름이 아니라 <code class="language-plaintext highlighter-rouge">index</code>로 접근해야 했다.</p>

<p>처음 프로젝트를 시작할때 <code class="language-plaintext highlighter-rouge">File</code> 타입에 <code class="language-plaintext highlighter-rouge">null</code>이 할당되지 않아 객체 안에 굳이 <code class="language-plaintext highlighter-rouge">key</code>라는 이름의 <code class="language-plaintext highlighter-rouge">key</code>를 생성했다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">imageFile</span><span class="p">:</span> <span class="nx">File</span><span class="p">:</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">// error</span>
</code></pre></div></div>

<p>아마 내가 ‘imageFile’의 타입을 오로지 File로만 했던 모양인데 시간이 지나고 보니 코드가 굉장히 가독성이 없다는 것이 보였다.</p>

<h4 id="-componentssignupform">💾 Components/SignUpForm</h4>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">result</span><span class="p">:</span> <span class="nx">UserParam</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">imageFile</span><span class="p">:</span> <span class="nx">userData</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">value</span><span class="p">,</span>
  <span class="na">username</span><span class="p">:</span> <span class="nx">userData</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">value</span><span class="o">!</span><span class="p">,</span>
  <span class="na">email</span><span class="p">:</span> <span class="nx">userData</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">value</span><span class="o">!</span><span class="p">,</span>
  <span class="na">password</span><span class="p">:</span> <span class="nx">userData</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">value</span><span class="o">!</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">userData</code>에 <code class="language-plaintext highlighter-rouge">index</code>로 접근하기 때문에 해당 변수가 어떤 값을 가지고 있는지 알 수 없다.</p>

<p>이를 고치기 위해선 memberForm의 state 구조를 변경해야 했다.</p>

<h2 id="-리팩토링-결과">❕ 리팩토링 결과</h2>

<h4 id="-storemembermemberformslicets-1">💾 store/member/memberFormSlice.ts</h4>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">initialMemberForm</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">memberForm</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">imageFile</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">email</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
  <span class="p">}</span> <span class="k">as</span> <span class="nb">Omit</span><span class="o">&lt;</span><span class="nx">MemberFormParam</span><span class="p">,</span> <span class="dl">"</span><span class="s2">profileUrl</span><span class="dl">"</span> <span class="o">&amp;</span> <span class="dl">"</span><span class="s2">imageUrl</span><span class="dl">"</span><span class="o">&gt;</span><span class="p">,</span>
  <span class="na">emailAuth</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="na">isEditMode</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div>

<h4 id="-componentssignupform-1">💾 Components/SignUpForm</h4>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">result</span><span class="p">:</span> <span class="nx">UserParam</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">imageFile</span><span class="p">:</span> <span class="nx">memberForm</span><span class="p">.</span><span class="nx">imageFile</span><span class="p">,</span>
  <span class="na">username</span><span class="p">:</span> <span class="nx">memberForm</span><span class="p">.</span><span class="nx">username</span><span class="p">,</span>
  <span class="na">email</span><span class="p">:</span> <span class="nx">memberForm</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
  <span class="na">password</span><span class="p">:</span> <span class="nx">memberForm</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div>

<p>값에 이름으로 접근하니 어떤 데이터가 할당되는지 알 수 있게 되었다.</p>

<h2 id="-나의-생각">💬 나의 생각</h2>

<p>분명 코드를 작성할 때는 최선인 것 같았는데 지나고 보니 아닌 경우가 꽤 많다.</p>

<p>완성된 프로젝트라 하더라도 다시 보고 리팩토링을 계속 해주는 것이 좋겠다.</p>]]></content><author><name>Sujin Kim</name></author><category term="coding-swamp" /><category term="모코늪" /><category term="redux-toolkit" /><category term="데이터구조" /><summary type="html"><![CDATA[redux에서 관리하는 state를 객체로 다시 구조화]]></summary></entry></feed>