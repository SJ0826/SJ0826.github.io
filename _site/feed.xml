<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-03-07T16:19:37+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">SUJIN DEV NOTE 📝</title><subtitle>주니어 개발자의 꼼질꼼질 성장일지 👻</subtitle><author><name>수진‍ (水珍)</name></author><entry><title type="html">[NestJS] NestJS로 배우는 백엔드 프로그래밍 완독 후기</title><link href="http://localhost:4000/nestjs/nestjs-NestJS%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%B0%B1%EC%97%94%EB%93%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%8A%A4%ED%84%B0%EB%94%94-%EB%85%B8%ED%8A%B8/" rel="alternate" type="text/html" title="[NestJS] NestJS로 배우는 백엔드 프로그래밍 완독 후기" /><published>2025-02-09T00:00:00+09:00</published><updated>2025-02-09T22:06:00+09:00</updated><id>http://localhost:4000/nestjs/nestjs-NestJS%EB%A1%9C%20%EB%B0%B0%EC%9A%B0%EB%8A%94%20%EB%B0%B1%EC%97%94%EB%93%9C%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EC%8A%A4%ED%84%B0%EB%94%94%20%EB%85%B8%ED%8A%B8</id><content type="html" xml:base="http://localhost:4000/nestjs/nestjs-NestJS%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%B0%B1%EC%97%94%EB%93%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%8A%A4%ED%84%B0%EB%94%94-%EB%85%B8%ED%8A%B8/"><![CDATA[<p><img src="/assets/image/posts/nestjs-book.jpg" alt="img.png" /></p>

<h2 id="️-책을-완독하고-나서">◾️ 책을 완독하고 나서</h2>
<p><a href="https://polyester-archduke-ab6.notion.site/NestJS-NestJS-191f73e111b3809a8d32ffa142b53c2d?pvs=4">📒노션 스터디 노트</a></p>

<p><a href="https://github.com/SJ0826/nestjs-auth">🐱 실습 프로젝트 Github</a></p>

<h3 id="-추천-대상">😀 추천 대상</h3>
<ul>
  <li>공식문서읽는게 힘들다.</li>
  <li>Nestjs의 기본 핵심개념을 한권으로 정리하고 싶다.</li>
  <li>Typescript 문법에 익숙하다.</li>
</ul>

<h3 id="-비추천-대상">🤨 비추천 대상</h3>
<ul>
  <li>개발이 아예 처음이다.</li>
  <li>Typescript를 전혀 모른다.</li>
  <li>Nestjs의 심화 개념을 공부하고 싶다.</li>
</ul>

<p>NestJS는 먼저 공식문서로 접했습니다.<br />
공식문서가 워낙 잘되어있는터라 기본개념을 쌓기에는 문제가 없지만 한글로 정리된 문서로 개념을 읽고싶어 책을 찾아보게 되었습니다.<br />
책의 구조는 개념 -&gt; 프로젝트 적용 -&gt; 심화 개념 순서로 이루어져 있습니다.<br />
가장 좋았던 점은 책을 완독하면 유저 (인증) 프로젝트를 완성할 수 있어 성취감을 느낄 수 있다는 것이었습니다.<br />
다만 타입스크립트를 다루는 책이 아니기에 어느정도 개발경험이 있어야 속도감있게 책을 읽을 수 있어 개발 입문자에게는 다소 버거울 수 있을 것 같습니다.</p>]]></content><author><name>수진‍ (水珍)</name></author><category term="NestJS" /><category term="NestJS" /><category term="공부" /></entry><entry><title type="html">[NestJS] NestJS가 env 파일을 읽어오지 못했을 때</title><link href="http://localhost:4000/nestjs/nestjs-NestJS%EA%B0%80-env-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%9D%BD%EC%96%B4%EC%98%A4%EC%A7%80-%EB%AA%BB%ED%96%88%EC%9D%84-%EB%95%8C/" rel="alternate" type="text/html" title="[NestJS] NestJS가 env 파일을 읽어오지 못했을 때" /><published>2025-02-08T00:00:00+09:00</published><updated>2025-02-08T22:06:00+09:00</updated><id>http://localhost:4000/nestjs/nestjs-NestJS%EA%B0%80%20env%20%ED%8C%8C%EC%9D%BC%EC%9D%84%20%EC%9D%BD%EC%96%B4%EC%98%A4%EC%A7%80%20%EB%AA%BB%ED%96%88%EC%9D%84%20%EB%95%8C</id><content type="html" xml:base="http://localhost:4000/nestjs/nestjs-NestJS%EA%B0%80-env-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%9D%BD%EC%96%B4%EC%98%A4%EC%A7%80-%EB%AA%BB%ED%96%88%EC%9D%84-%EB%95%8C/"><![CDATA[<h2 id="-문제상황-프로젝트가-env-파일에-접근을-하지-못한다">🪹 문제상황: 프로젝트가 env 파일에 접근을 하지 못한다.</h2>

<p>🐞 error message</p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">ERROR</span> <span class="p">[</span><span class="nx">ExceptionHandler</span><span class="p">]</span> <span class="nb">Error</span><span class="p">:</span> <span class="nx">Config</span> <span class="nx">validation</span> <span class="nx">error</span><span class="p">:</span> <span class="dl">"</span><span class="s2">EMAIL_SERVICE</span><span class="dl">"</span> <span class="k">is</span> <span class="nx">required</span><span class="p">.</span> <span class="dl">"</span><span class="s2">EMAIL_AUTH_USER</span><span class="dl">"</span> <span class="k">is</span> <span class="nx">required</span><span class="p">.</span> <span class="dl">"</span><span class="s2">EMAIL_AUTH_PASSWORD</span><span class="dl">"</span> <span class="k">is</span> <span class="nx">required</span><span class="p">.</span> <span class="dl">"</span><span class="s2">EMAIL_BASE_URL</span><span class="dl">"</span> <span class="k">is</span> <span class="nx">required</span>
</code></pre></div></div>
<p><br /></p>

<p>💾 app.module.ts</p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Module</span><span class="p">({</span>
  <span class="na">imports</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">UsersModule</span><span class="p">,</span>
    <span class="nx">EmailModule</span><span class="p">,</span>
    <span class="nx">ConfigModule</span><span class="p">.</span><span class="nx">forRoot</span><span class="p">({</span>
      <span class="na">envFilePath</span><span class="p">:</span> <span class="p">[</span><span class="s2">`</span><span class="p">${</span><span class="nx">__dirname</span><span class="p">}</span><span class="s2">/config/env/.</span><span class="p">${</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span><span class="p">}</span><span class="s2">.env`</span><span class="p">],</span> 
      <span class="na">load</span><span class="p">:</span> <span class="p">[</span><span class="nx">emailConfig</span><span class="p">],</span>
      <span class="na">isGlobal</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 전역모듈로 설정</span>
      <span class="nx">validationSchema</span><span class="p">,</span> <span class="c1">// joi를 이용해 유효성검사</span>
    <span class="p">}),</span>
    <span class="nx">TypeOrmModule</span><span class="p">.</span><span class="nx">forRoot</span><span class="p">({</span>
      <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">mysql</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">host</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DATABASE_HOST</span><span class="p">,</span>
      <span class="na">port</span><span class="p">:</span> <span class="mi">3306</span><span class="p">,</span>
      <span class="na">username</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DATABASE_USERNAME</span><span class="p">,</span>
      <span class="na">password</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DATABASE_PASSWORD</span><span class="p">,</span>
      <span class="na">database</span><span class="p">:</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">entities</span><span class="p">:</span> <span class="p">[</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/**/*.entity{.ts,.js}</span><span class="dl">'</span><span class="p">],</span> <span class="c1">// TypeORM이 구동될 때 인식하도록 할 엔티티 클래스 경로</span>
      <span class="na">synchronize</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DATABASE_SYNCHRONIZE</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">true</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// dev | 서비스가 실행될 때 DB가 초기화된다.</span>
    <span class="p">}),</span>
  <span class="p">],</span>
  <span class="na">controllers</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[],</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">AppModule</span> <span class="p">{}</span>
</code></pre></div></div>

<p>nest-auth 프로젝트 실행 도중 프로젝트가 env파일을 읽어오지 못했습니다.</p>

<p><code class="language-plaintext highlighter-rouge">cat src/config/env/.development.env</code> ⇒ 성공 <br />
<code class="language-plaintext highlighter-rouge">echo $NODE_ENV</code> ⇒ 성공 (development)</p>

<p>터미널을 통해 env파일을 읽는 것은 성공했지만 ConfigModule에서 env파일에 접근을 하지 못해 경로문제일 것이라 판단했습니다.</p>

<p><br /></p>

<h2 id="-문제-이유-env-파일-경로-문제">🪹 문제 이유: .env 파일 경로 문제</h2>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">envFilePath</span><span class="p">:</span> <span class="p">[</span><span class="s2">`</span><span class="p">${</span><span class="nx">__dirname</span><span class="p">}</span><span class="s2">/config/env/.</span><span class="p">${</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span><span class="p">}</span><span class="s2">.env`</span><span class="p">]</span>
</code></pre></div></div>
<p><strong>ts-node</strong>를 사용할 경우 <strong>__dirname</strong>은 각각 다음과 같은 위치를 가리킵니다.</p>

<ul>
  <li>빌드 전: src 폴더</li>
  <li>빌드 후: dist 폴더</li>
</ul>

<p>빌드 후 src폴더일 것이라는 예상과 달리  <strong>__dirname</strong>가 dist 폴더를 가리키게 되어 env파일을 찾지 못하고 에러가 발생한 것입니다.</p>

<p><br /></p>

<h2 id="-문제-해결-envfilepath-경로-재설정">🪺 문제 해결: envFilePath 경로 재설정</h2>
<p>envFilePath 경로를 재설정해 현재 작업 디렉토리(process.cwd())를 기준으로 경로를 지정하겠습니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">envFilePath</span><span class="p">:</span> <span class="p">[</span><span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">(),</span> <span class="s2">`src/config/env/.</span><span class="p">${</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span><span class="p">}</span><span class="s2">.env`</span><span class="p">)]</span>
</code></pre></div></div>

<p>문제없이 프로젝트가 실행되었습니다.</p>

<p><img src="/assets/image/posts/nextjs-env-bug.png" alt="image" /></p>]]></content><author><name>수진‍ (水珍)</name></author><category term="NestJS" /><category term="NestJS" /><category term="env" /><category term="error" /><summary type="html"><![CDATA[빌드 전 envFilePath 경로와 빌드 후 envFilePath 경로가 달라요]]></summary></entry><entry><title type="html">[Next.js 14] npm 패키지 배포 가이드</title><link href="http://localhost:4000/nextjs/nextjs-npm-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%B0%B0%ED%8F%AC-%EA%B0%80%EC%9D%B4%EB%93%9C/" rel="alternate" type="text/html" title="[Next.js 14] npm 패키지 배포 가이드" /><published>2024-11-25T00:00:00+09:00</published><updated>2024-07-10T22:06:00+09:00</updated><id>http://localhost:4000/nextjs/nextjs-npm%20%ED%8C%A8%ED%82%A4%EC%A7%80%20%EB%B0%B0%ED%8F%AC%20%EA%B0%80%EC%9D%B4%EB%93%9C</id><content type="html" xml:base="http://localhost:4000/nextjs/nextjs-npm-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%B0%B0%ED%8F%AC-%EA%B0%80%EC%9D%B4%EB%93%9C/"><![CDATA[<h2 id="-목적">■ 목적</h2>
<ul>
  <li>어드민 디자인 시스템 컴포넌트와 에셋을 패키지로 배포해 관리</li>
  <li>아토믹 디자인 패턴을 사용해 컴포넌트를 체계적으로 설계 및 개발</li>
  <li>컴포넌트 유지보수성을 높이고, 일관된 UI/UX를 제공하며, 개발 속도를 향상</li>
</ul>

<h2 id="-프로젝트-환경">■ 프로젝트 환경</h2>
<ul>
  <li>next.js 14</li>
  <li>react 18</li>
  <li>tailwindcss 3.4.1</li>
</ul>

<h2 id="-배포-순서">■ 배포 순서</h2>

<h3 id="1-srcexportts-를-생성합니다">1. src/export.ts 를 생성합니다</h3>

<p>패키지로 배포할 컴포넌트를 export.ts 파일에 선언합니다. (파일 경로와 이름은 변경가능합니다)</p>

<p><strong>💾 src/export.ts</strong></p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="p">{</span><span class="k">default</span> <span class="k">as</span> <span class="nx">SujinButton</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./app/components/common/Button</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="2-tsconfigbuildjson-을-생성합니다">2. tsconfig.build.json 을 생성합니다.</h3>

<ul>
  <li>(기존) tsconfig.json: Next.js 어플리케이션 코드 빌드용</li>
  <li>(생성) tsconfig.build.json: 패키지 배포 코드 빌드용</li>
</ul>

<p><strong>💾 tsconfig.build.json</strong></p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="dl">"</span><span class="s2">compilerOptions</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">lib</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">dom</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">dom.iterable</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">esnext</span><span class="dl">"</span><span class="p">],</span> <span class="c1">// 프로젝트에서 사용할 JavaScript 표준 라이브러리</span>
    <span class="dl">"</span><span class="s2">target</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ESNext</span><span class="dl">"</span><span class="p">,</span>  <span class="c1">// 컴파일 대상 ECMAScript 버전</span>
    <span class="dl">"</span><span class="s2">allowJs</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// JavaScript 파일을 TypeScript 코드로 포함할 수 있도록 허용</span>
    <span class="dl">"</span><span class="s2">skipLibCheck</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 외부 라이브러리 타입 검사 건너뛰기</span>
    <span class="dl">"</span><span class="s2">strict</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>  <span class="c1">// 엄격 모드 활성화</span>
    <span class="dl">"</span><span class="s2">noEmit</span><span class="dl">"</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="c1">// 컴파일된 출력 파일 생성 여부</span>
    <span class="dl">"</span><span class="s2">allowSyntheticDefaultImports</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 기본(default) 내보내기를 허용할지 여부</span>
    <span class="dl">"</span><span class="s2">esModuleInterop</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// CommonJS(require)와 ES Module(import) 간의 호환성 설정</span>
    <span class="dl">"</span><span class="s2">forceConsistentCasingInFileNames</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 파일 이름 대소문자 불일치를 방지</span>
    <span class="dl">"</span><span class="s2">noFallthroughCasesInSwitch</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// switch 문에서 case가 누락되지 않도록 방지</span>
    <span class="dl">"</span><span class="s2">module</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">esnext</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// 사용할 모듈 시스템</span>
    <span class="dl">"</span><span class="s2">moduleResolution</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">node</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// 모듈 해석 방식을 정의</span>
    <span class="dl">"</span><span class="s2">resolveJsonModule</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// JSON 파일을 모듈로 가져오기 허용</span>
    <span class="dl">"</span><span class="s2">isolatedModules</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 개별 파일을 독립적으로 컴파일</span>
    <span class="dl">"</span><span class="s2">jsx</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">react-jsx</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// React JSX 구문 설정 - React 17+의 새로운 JSX 변환 방식 사용</span>
    <span class="dl">"</span><span class="s2">incremental</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// TypeScript 이전 빌드 결과를 재사용하여 빌드 속도 향상(증분 빌드)</span>
    <span class="dl">"</span><span class="s2">outDir</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">dist</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// 컴파일된 파일의 출력 디렉토리</span>
    <span class="dl">"</span><span class="s2">declaration</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 타입 정의 파일 생성 여부 (.d.ts)</span>
    <span class="dl">"</span><span class="s2">plugins</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">next</span><span class="dl">"</span>
      <span class="p">}</span>
    <span class="p">],</span>
    <span class="dl">"</span><span class="s2">paths</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
      <span class="dl">"</span><span class="s2">@/*</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">./src/*</span><span class="dl">"</span><span class="p">]</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="dl">"</span><span class="s2">include</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span> <span class="dl">"</span><span class="s2">**/tailwind.config.ts</span><span class="dl">"</span><span class="p">,</span>  <span class="dl">"</span><span class="s2">src/export.ts</span><span class="dl">"</span><span class="p">],</span>
  <span class="dl">"</span><span class="s2">exclude</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">node_modules</span><span class="dl">"</span><span class="p">]</span>
<span class="p">}</span>

</code></pre></div></div>
<ul>
  <li>include
    <ul>
      <li><code class="language-plaintext highlighter-rouge">**/tailwind.config.ts</code> : tailwind 설정 (asset, font) 공유</li>
      <li><code class="language-plaintext highlighter-rouge">src/export.ts</code> : 컴포넌트 공유</li>
    </ul>
  </li>
</ul>

<h3 id="3-packagejson을-수정합니다">3. package.json을 수정합니다.</h3>

<p><strong>💾 package.json</strong></p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">sujin-design-system</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">version</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">0.1.5</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// 패키지를 새로 배포할 때마다 버전을 업그레이드 해야합니다.</span>
  <span class="dl">"</span><span class="s2">main</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">dist/src/export.js</span><span class="dl">"</span><span class="p">,</span> 
  <span class="dl">"</span><span class="s2">types</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">dist/src/export.d.ts</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">files</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
    <span class="dl">"</span><span class="s2">dist</span><span class="dl">"</span>
  <span class="p">],</span>
  <span class="dl">"</span><span class="s2">scripts</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">dev</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">next dev</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">next:build</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">next build</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">start</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">next start</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">lint</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">next lint</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">build</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">rm -rf dist &amp;&amp; tsc -p tsconfig.build.json</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">prepublishOnly</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">npm run build</span><span class="dl">"</span>
  <span class="p">},</span>
  <span class="dl">"</span><span class="s2">dependencies</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^18</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">react-dom</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^18</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">next</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">14.2.18</span><span class="dl">"</span>
  <span class="p">},</span>
  <span class="dl">"</span><span class="s2">devDependencies</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">typescript</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^5</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">@types/node</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^20</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">@types/react</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^18</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">@types/react-dom</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^18</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">postcss</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^8</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">tailwindcss</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^3.4.1</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">eslint</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^8</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">eslint-config-next</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">14.2.18</span><span class="dl">"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">main</code>: 패키지를 설치한 후 패키지를 사용할 때 진입점. 가장 먼저 로드되는 파일을 지정.</li>
  <li><code class="language-plaintext highlighter-rouge">types</code> : 타입스크립트 타입 정의 파일</li>
</ul>

<p>package.json을 수정하고 npm run build 스크립트를 실행하면 dist폴더가 생성됩니다.</p>

<p><img src="/assets/image/posts/nextjs-npm-deploy.png" alt="image" /></p>

<h3 id="4-npm에-패키지-배포하기">4. npm에 패키지 배포하기</h3>

<ol>
  <li><code class="language-plaintext highlighter-rouge">npm login</code> : 스크립트를 실행하고 브라우저에서 로그인합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">npm build</code> : 패키지에 필요한 빌드파일을 생성합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">npm publish</code> : 생성한 빌드 파일을 npm에 배포합니다.</li>
</ol>

<p>배포에 성공하면 <a href="https://www.npmjs.com/">npm</a>에서 배포한 패키지를 확인 할 수 있습니다.</p>

<p><img src="/assets/image/posts/nextjs-npm-deploy-2.png" alt="image" /></p>

<h3 id="5-배포한-패키지-사용하기">5. 배포한 패키지 사용하기</h3>

<p>먼저 배포한 패키지를 사용할 프로젝트에서 패키지를 다운받습니다.</p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">i</span> <span class="nx">sujin</span><span class="o">-</span><span class="nx">design</span><span class="o">-</span><span class="nx">system</span>
</code></pre></div></div>

<p>tailwind.config.ts 파일에서 패키지를 presets에 적용합니다.</p>

<p><strong>💾 tailwind.config.ts</strong></p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">sujin</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">sujin-design-system/dist/tailwind.config</span><span class="dl">'</span><span class="p">;</span>

<span class="kr">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">presets</span><span class="p">:</span> <span class="p">[</span><span class="nx">sujin</span><span class="p">],</span> <span class="c1">// ✅ preset으로 패키지의 tailwind 설정 적용</span>
  <span class="na">content</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">./src/**/*.{js,jsx,ts,tsx}</span><span class="dl">'</span><span class="p">],</span>

</code></pre></div></div>

<p>설정을 완료하면 패키지의 에셋과 컴포넌트를 사용할 수 있습니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">SujinButton</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">sujin-design-system</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// 👍</span>
</code></pre></div></div>
<h2 id="참고">참고</h2>
<ul>
  <li><a href="https://blacksheepcode.com/posts/publish_a_react_package_using_nextjs_as_a_base">blacksheepcode - publish_a_react_package_using_nextjs_as_a_base</a></li>
</ul>]]></content><author><name>수진‍ (水珍)</name></author><category term="Nextjs" /><category term="npm" /><category term="배포" /><summary type="html"><![CDATA[컴포넌트를 패키지로 배포해 다른 프로젝트에 공유하기]]></summary></entry><entry><title type="html">[Next.js 13] 클라이언트 컴포넌트가 정말 클라이언트 사이드에서만 렌더링 될까 ?</title><link href="http://localhost:4000/nextjs/nextjs-Error-occured-prerendering-page/" rel="alternate" type="text/html" title="[Next.js 13] 클라이언트 컴포넌트가 정말 클라이언트 사이드에서만 렌더링 될까 ?" /><published>2024-07-10T00:00:00+09:00</published><updated>2024-07-10T22:06:00+09:00</updated><id>http://localhost:4000/nextjs/nextjs-Error%20occured%20prerendering%20page</id><content type="html" xml:base="http://localhost:4000/nextjs/nextjs-Error-occured-prerendering-page/"><![CDATA[<h2 id="️문제-발생">◾️문제 발생</h2>

<p>react-draft-wysiwyg 를 사용한 컴포넌트를 페이지 컴포넌트에 import했습니다.
페이지는 성공적으로 렌더링 되었지만 터미널에서 에러를 확인할 수 있었습니다. 빌드시에도 동일한 에러가 발생합니다.</p>

<p><img src="/assets/image/posts/nextjs-prerendering-error.png" alt="image" /></p>

<p><code class="language-plaintext highlighter-rouge">use client</code>를 최상단에 선언했었기에, 클리이언트 컴포넌라고 생각했고 서버 컴포넌트에서 날 법한 프리렌더링 에러가 발생하는 것이 이해가 가지 않았습니다.</p>

<h2 id="️-문제-원인">◾️ 문제 원인</h2>

<p>문제가 발생한 이유는 다음과 같습니다.</p>

<ul>
  <li>Next.js 13 컴포넌트는 <strong>서버에서 사전 렌더링</strong>되고 <strong>클라이언트에서 하이드레이션</strong>된다.</li>
  <li>따라서 <code class="language-plaintext highlighter-rouge">use client</code> 를 선언한다고해서 클라이언트에서만 렌더링 되는 것은 아니다.</li>
</ul>

<p>컴포넌트에서 window객체에 접근하는데, 서버에서 사전 렌더링되는 과정에서 window객체를 찾지 못해 에러가 발생한 것이었습니다.
클라이언트 단에서만 실행되어야하는 코드는 서버에서 실행되지 않도록 설정이 필요합니다.</p>

<h2 id="️-문제-해결">◾️ 문제 해결</h2>

<h3 id="️-방법-1-dynamic-import-동적-임포트로-ssr-옵션-끄기">✔️ 방법 1. dynamic import (동적 임포트)로 SSR 옵션 끄기</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">NoticeForm</span> <span class="o">=</span> <span class="nx">dynamic</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="k">import</span><span class="p">(</span><span class="dl">'</span><span class="s1">@/components/notice/NoticeForm</span><span class="dl">'</span><span class="p">),</span> <span class="p">{</span>
  <span class="na">ssr</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Next.js 의 <strong>dynamic import</strong> 기능을 활용해 <strong>서버 측 렌더링을 비활성화</strong>했습니다.
dynamic import는 컴포넌트 외부에서 선언해야합니다.</p>

<p>다만 이 방법은 해당 에러가 발생하는 모든 컴포넌트를 동적으로 import해야하는 번거로움이 있었고, 에러 원인을 찾던 중 전역으로 설정해주는 방법이 있었습니다.</p>

<h3 id="️-방법-2-컨텍스트를-사용한-custom-hook-만들기">✔️ 방법 2. 컨텍스트를 사용한 custom hook 만들기</h3>

<p>동적 임포트 매커니즘을 컴포넌트마다 반복적으로 구현하는 대신, <strong>컨텍스트를 사용해 전역에서 관리</strong>하는 방법도 있습니다.</p>

<p>useEffect와 useState 훅을 사용한 커스텀 훅을 통해 클라이언트 환경을 실행조건으로 설정할 수 있었습니다.</p>

<p>이렇게하면 서버에서의 사전렌더링과 클라이언트의 첫번째 렌더링이 일치해 하이드레이션 오류도 방지할 수 있습니다.</p>

<p><strong>💾 useIsClient.tsx</strong></p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">'</span><span class="s1">use client</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">createContext</span><span class="p">,</span> <span class="nx">useContext</span><span class="p">,</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">IsClientCtx</span> <span class="o">=</span> <span class="nx">createContext</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">IsClientCtxProvider</span> <span class="o">=</span> <span class="p">({</span>
  <span class="nx">children</span><span class="p">,</span>
<span class="p">}:</span> <span class="p">{</span>
  <span class="nl">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span><span class="p">;</span>
<span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">isClient</span><span class="p">,</span> <span class="nx">setIsClient</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">setIsClient</span><span class="p">(</span><span class="kc">true</span><span class="p">),</span> <span class="p">[]);</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">IsClientCtx</span><span class="p">.</span><span class="nx">Provider</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">isClient</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">children</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/IsClientCtx.Provider</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nx">useIsClient</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">useContext</span><span class="p">(</span><span class="nx">IsClientCtx</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>💾 app/layout.tsx</strong></p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="kd">type</span> <span class="p">{</span> <span class="nx">Metadata</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">'</span><span class="s1">./globals.css</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">IsClientCtxProvider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/hooks/useIsClient</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">metadata</span><span class="p">:</span> <span class="nx">Metadata</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Project</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">description</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Generated by create next app</span><span class="dl">'</span><span class="p">,</span>
<span class="p">};</span>


<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">RootLayout</span><span class="p">({</span>
  <span class="nx">children</span><span class="p">,</span>
<span class="p">}:</span> <span class="nb">Readonly</span><span class="o">&lt;</span><span class="p">{</span>
  <span class="na">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span><span class="p">;</span>
<span class="p">}</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">html</span> <span class="nx">lang</span><span class="o">=</span><span class="dl">"</span><span class="s2">en</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">IsClientCtxProvider</span><span class="o">&gt;</span>
					<span class="p">{</span><span class="nx">children</span><span class="p">}</span>
        <span class="o">&lt;</span><span class="sr">/IsClientCtxProvider</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/body</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/html</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>💾 사용예시</strong></p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useIsClient</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./is-client-ctx</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">MyComponent</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">isClient</span> <span class="o">=</span> <span class="nx">useIsClient</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">scrollPosition</span> <span class="o">=</span> <span class="nx">useScrollPosition</span><span class="p">();</span> <span class="c1">// 예시를 위한 가상 훅</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="p">{</span><span class="nx">scrollPosition</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">&lt;</span><span class="nx">FirstModule</span> <span class="o">/&gt;</span><span class="p">}</span>
      <span class="p">{</span><span class="nx">isClient</span> <span class="o">&amp;&amp;</span> <span class="nx">scrollPosition</span> <span class="o">&gt;=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="o">&lt;</span><span class="nx">SecondModule</span> <span class="o">/&gt;</span><span class="p">}</span>
    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<p>useIsClient.tsx 훅을 통해 서버에서 렌더링할 수 있는 부분을 먼저 렌더링 후, 클라이언트 조건에 따라 업데이트 (두번째 렌더링)을 실행합니다. 이 방식을 통해 하이드레이션 오류를 피하면서 필요한 경우 클라이언트 측 업데이트를 수행할 수 있었습니다.</p>

<h2 id="참고">참고</h2>
<ul>
  <li><a href="https://stackoverflow.com/questions/75692116/next-js-13-window-is-not-defined">stackoverflow - next-js-13-window-is-not-defined</a></li>
</ul>]]></content><author><name>수진‍ (水珍)</name></author><category term="Nextjs" /><category term="prerendering" /><category term="서버 컴포넌트" /><category term="use client" /><category term="에러" /><summary type="html"><![CDATA[클라이언트 컴포넌트에서 prerendering 에러가 발생한 이유]]></summary></entry><entry><title type="html">[JS] 이벤트 루프와 비동기 통신</title><link href="http://localhost:4000/javascript/javascript-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84%EC%99%80-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%86%B5%EC%8B%A0/" rel="alternate" type="text/html" title="[JS] 이벤트 루프와 비동기 통신" /><published>2024-06-29T00:00:00+09:00</published><updated>2024-06-29T22:06:00+09:00</updated><id>http://localhost:4000/javascript/javascript-%EC%9D%B4%EB%B2%A4%ED%8A%B8%20%EB%A3%A8%ED%94%84%EC%99%80%20%EB%B9%84%EB%8F%99%EA%B8%B0%20%ED%86%B5%EC%8B%A0</id><content type="html" xml:base="http://localhost:4000/javascript/javascript-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84%EC%99%80-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%86%B5%EC%8B%A0/"><![CDATA[<h2 id="-싱글-스레드-자바스크립트">📝 싱글 스레드 자바스크립트</h2>

<p>자바스크립트는 <strong>싱글 스레드 언어</strong>다.</p>

<p>하나의 프로세스안에 여러개의 스레드가 있을 수 있다. 하지만 자바스크립트는 싱글 스레드 언어이므로 하나의 스레드만 존재한다.</p>

<p>여러개의 스레드가 있다면 메모리를 공유해 동시에 여러작업이 가능하지만 하나의 스레드만 가지고 있는 자바스크립트 엔진은 작업을 병렬로 처리할 수 없다.</p>

<p>자바스크립트 코드는 한줄한줄 순서대로 처리되며 하나의 작업이 끝나기전까지 다음 작업이 실행되지 않는다.</p>

<p>만약 하나의 작업이 너무 오래걸리면 뒤에 있는 작업이 실행되지 않는데, 이는 <strong>Run-to-Completion</strong>이라고 불리는 자바스크립트의 특징이다.</p>

<ul>
  <li>프로세스
    <ul>
      <li>메모리를 사용하는 독립적인 실행 단위</li>
      <li>다른 프로세스와 자원을 공유하지 않는다.</li>
    </ul>
  </li>
  <li>스레드
    <ul>
      <li>하나의 프로세스 안에 존재하는 작은 실행 단위</li>
      <li>스레드끼리 자원을 공유할 수 있다.</li>
      <li>하나의 프로세스가 병렬로 작업을 처리할 수 있게 한다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="-메모리-힙과-콜-스택---자바스크립트가-작업을-수행하는-방법">◆ 메모리 힙과 콜 스택  | 자바스크립트가 작업을 수행하는 방법</h3>

<p>■ 메모리 힙 (Memory Heap)</p>
<ul>
  <li>선언된 변수들의 메모리 할당이 이루어진다.</li>
  <li>비구조적으로 데이터가 저장된다.</li>
</ul>

<p>■ 콜 스택 (Call Stack)</p>
<ul>
  <li>함수들이 실행 순서에 따라 쌓인다.</li>
  <li>LIFO(선입후출)의 구조로 진행된다.</li>
</ul>

<p><img src="/assets/image/posts/js-event-loop.png" alt="image" /></p>

<p><br /></p>

<h2 id="-이벤트-루프--자바스크립트가-비동기-통신을-하는-방법">📝 이벤트 루프 | 자바스크립트가 비동기 통신을 하는 방법</h2>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">bar</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">bar</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">baz</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">baz</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">foo</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">foo</span><span class="dl">'</span><span class="p">)</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">bar</span><span class="p">(),</span> <span class="mi">0</span><span class="p">)</span>
    <span class="nx">baz</span><span class="p">()</span>
<span class="p">}</span>

<span class="nx">foo</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>출력 순서: foo → baz → bar</li>
</ul>

<p>bar의 실행을 기다리지 않고 다음줄인 baz가 실행된 이유는 setTimeout 함수는 바로 콜스택에 들어가는 것이아니라 태스크큐에 들어가기 때문이다.</p>
<ul>
  <li>태스크큐에 저장되는 작업들: setTimeout, setInterval, setImmediate</li>
</ul>

<p><br /></p>

<h3 id="-브라우저-이벤트-동작-순서">◆ 브라우저 이벤트 동작 순서</h3>
<p><img src="/assets/image/posts/js-event-loop-2.png" alt="image" /></p>

<ol>
  <li><strong>콜스택</strong> 실행</li>
  <li>콜스택이 비어있으면 <strong>마이크로 태스크 큐</strong> 확인. 큐가 빌 때까지 모든 마이크로 태스크 실행
    <ul>
      <li>프로미스의 <code class="language-plaintext highlighter-rouge">then</code>이나 <code class="language-plaintext highlighter-rouge">catch</code>, <code class="language-plaintext highlighter-rouge">MutationObserver</code> 등</li>
    </ul>
  </li>
  <li><strong>태스크 큐</strong> 확인. 큐가 빌 때까지 모든 태스크 실행
    <ul>
      <li><code class="language-plaintext highlighter-rouge">setTimeout</code>, <code class="language-plaintext highlighter-rouge">setInterval</code>, I/O 작업, DOM 이벤트 등</li>
    </ul>
  </li>
  <li><strong>Request Animation Frame</strong>에서 대기중인 콜백 실행
    <ul>
      <li>Request Animation Frame: 애니메이션을 효율적으로 실행하기 위해 제공하는 함수로 브라우저가 다음 리페인트(Repaint) 전에 지정된 콜백 함수를 실행하도록 예약</li>
    </ul>
  </li>
  <li>모든 작업이 완료되면 브라우저는 <strong>렌더링</strong>을 수행해 화면을 업데이트한다.</li>
</ol>

<p><br /></p>

<h3 id="-함수가-마이크로-태스크-큐에-저장될-경우">◆ 함수가 마이크로 태스크 큐에 저장될 경우</h3>

<ol>
  <li>콜 스택에서 프로미스를 만들고 프로미스에 등록된 콜백, 즉 프로미스가 다 수행이 되고나면 실행되는 <code class="language-plaintext highlighter-rouge">then</code>과 <code class="language-plaintext highlighter-rouge">mutation observer</code>라는 웹 API에 등록된 콜백이 마이크로 큐에 들어온다.</li>
  <li>이벤트루프는 마이크로 태스크 큐에 있는 프로미스 then 콜백을 비어있는 콜스택으로 가져간다.</li>
  <li>프로미스 <code class="language-plaintext highlighter-rouge">then</code>이 끝나면 <code class="language-plaintext highlighter-rouge">mutation obsever</code>를 콜 스택으로 가져간다.</li>
</ol>

<p><strong>⭐️ 포인트 1</strong> 이 과정에서 마이크로 태스크 큐에 새로운 함수가 들어온다면, 나중에 들어온 함수도 모두 끝날때까지 계속 콜스택으로 가지고 와서 수행한다. <br />
<strong>⭐️ 포인트 2</strong> 마이크로 태스크 큐가 텅텅비면 테스크 큐로 넘어간다.(태스크 큐와의 차이점: 태스크 큐에서는 아이템 하나만 콜스택으로 보내고 기다린다.)</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">handleClick</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">handleClick</span><span class="dl">"</span><span class="p">);</span>
  <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">// promise 의 콜백은 Microtask que를 이용한다.</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">then</span><span class="dl">"</span><span class="p">);</span>
      <span class="nx">handleClick</span><span class="p">();</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">button</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">handleClick</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div></div>

<p>이벤트루프는 마이크로태스크 큐에 등록된 콜백이 모두 빌때까지 기다리기때문에 이벤트루프가 멈춰 브라우저가 반응하지 않는다.</p>

<p><br /></p>

<h3 id="-함수가-태스크-큐에-저장될-경우">◆ 함수가 태스크 큐에 저장될 경우</h3>

<ol>
  <li>브라우저에서 지정된 이벤트가 발생한다.</li>
  <li>웹 API는 콜백함수를 태스크 큐에 넣어준다.</li>
  <li>이벤트 루프는 계속 관찰을 하다가 콜 스택에 할일이 남아 있으면 콜스택이 비워질 떄까지 기다린다.</li>
  <li>콜스택이 비어서 자바스크립트 엔진이 더이상 일을 하지 않을 때 태스크 큐에 있는 함수를 콜 스택으로 가져온다.</li>
  <li>자바스크립트 엔진이 콜 스택에 들어온 콜백함수를 실행한다.</li>
</ol>

<p><strong>⭐️ 포인트 1</strong> 이벤트 루프는 콜스택에 있는 함수를 <strong>하나씩만</strong> 가져온다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">handleClick</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">handleClick</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">setTimeout</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">handleClick</span><span class="p">();</span> <span class="c1">// 콜스택에 무한으로 추가되어 동일한 내용의 이벤트루프가 반복된다.</span>
  <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">button</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">handleClick</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div></div>
<p>콜백함수 내에서 다시 콜백함수를 호출하기 때문에 Task Queue에 무한으로 함수가 추가된다.</p>

<p><br /></p>

<h3 id="-함수가-request-animation-frame-queue에-저장될-경우">◆ 함수가 Request Animation Frame Queue에 저장될 경우</h3>

<p>브라우저를 다시 업데이트 할 때는 render안의 request Animation Frame 에 등록된 콜백들을 거친 후 렌더 트리를 만들고 그 트리를 이용해서 레이아웃을 계산한 뒤에 페인트를 통해서 브라우저에 업데이트를 한 다음에 이벤트루프가 재개된다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">button</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">requestAnimationFrame</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// 렌더링이 되기 전 브라우저가 콜백함수를 실행하는 것을 보장해준다.</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">beige</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">});</span>
  <span class="nx">requestAnimationFrame</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">orange</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">});</span>
  <span class="nx">requestAnimationFrame</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>큐는 FIFO의 구조를 가지고 있기 때문에 마지막에 들어온 코드가 가장 먼저 적용되기 때문에 최종적으로 빨간색이 적용된 상태에서 렌더트리가 만들어지고 브라우저에 표기가 완료된다.</p>

<h2 id="출처">출처</h2>

<ul>
  <li>드림코딩</li>
  <li>모던 리액트 딥다이브</li>
  <li>모던 자바스크립트 딥다이브</li>
</ul>]]></content><author><name>수진‍ (水珍)</name></author><category term="JavaScript" /><category term="비동기" /><category term="이벤트루프" /><summary type="html"><![CDATA[자바스크립트가 비동기 통신을 하는 방법]]></summary></entry><entry><title type="html">[JS] MSW(Mock Service Worker, v 2.0) - API Mocking 하기</title><link href="http://localhost:4000/javascript/javascript-MSW(Mock-Service-Worker,-v-2.0)/" rel="alternate" type="text/html" title="[JS] MSW(Mock Service Worker, v 2.0) - API Mocking 하기" /><published>2024-06-24T00:00:00+09:00</published><updated>2024-06-24T22:06:00+09:00</updated><id>http://localhost:4000/javascript/javascript-MSW(Mock%20Service%20Worker,%20v%202.0)</id><content type="html" xml:base="http://localhost:4000/javascript/javascript-MSW(Mock-Service-Worker,-v-2.0)/"><![CDATA[<h2 id="-msw란">📄 MSW란?</h2>

<p><a href="https://mswjs.io/">MSW</a>는 Mock Service Worker의 약자로 <strong>API 모킹</strong>을 위한 자바스크립트 라이브러리 입니다.</p>

<p>다음과 같은 상황에서 사용할 수 있습니다.</p>

<ul>
  <li>백엔드 API가 미완성일 경우 미리 로직을 구성해야할 때</li>
  <li>특정 에러를 발생시켜 에러 핸들링 테스트 할 때</li>
</ul>

<p>MSW는 <strong>Service Worker API</strong>를 사용하여 브라우저에서 발생하는 네트워크 요청을 가로챕니다. 실제 서버 대신 가짜 응답을 만들어 프론트엔드 개발자가 API 테스트를 할 수 있는 환경을 만들어줍니다.</p>

<p>사내 프로젝트에서 API 전달이 늦어지며 프론트엔드에서 API 요청 로직을 미리 구현하고 테스트하기 위해 MSW를 도입했습니다. 미리 DTO를 전달받으면 추후 실제 API를 전달받았을 때 큰 공수없이 바로 API를 연결 할 수 있었습니다. 다만, 리액트 쿼리처럼 전역으로 설정을 해 예상치 못한 네트워크를 가로채는 상황을 피하기 위해 개발 환경에서만 사용하고 실제 릴리즈되는 브랜치에서는 사용하지 않았습니다.</p>

<p><br /></p>

<h2 id="msw-설치-nextjs-app-router-환경-기준">📄MSW 설치 (Next.js App Router 환경 기준)</h2>

<p>Next.js에서 MSW를 사용할 경우 클라이언트/서버 환경 모두 요구되는데, 글 작성 시점 기준 서버 사이드에서 msw과 매끄럽게 호환하는 방법이 없어 node 서버와 함께 사용합니다.</p>

<div style="border-left: 5px solid #3498db; padding: 10px; background: #f0f8ff;">
<strong>ℹ️ Notice:</strong> Next.js에서 MSW를 사용할 경우 클라이언트/서버 환경 모두 요구되는데, 글 작성 시점 기준 서버 사이드에서 msw과 매끄럽게 호환하는 방법이 없어 node 서버와 함께 사용합니다.
</div>

<h3 id="1-설치하기">1. 설치하기</h3>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="nx">msw</span><span class="p">@</span><span class="nd">latest</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span>
</code></pre></div></div>

<h3 id="2-public-폴더에-초기화">2. public 폴더에 초기화</h3>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="nx">npx</span> <span class="nx">msw</span> <span class="nx">init</span> <span class="k">public</span><span class="sr">/ --sav</span><span class="err">e
</span></code></pre></div></div>
<ul>
  <li>public 폴더에 설치</li>
  <li><strong>mockServiceWorker.js</strong> 가 자동으로 생성
    <ul>
      <li>http 요청을 가로채 서버와의 통신을 모방한다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">--save</code> : package.json 에 등록되어 msw를 업데이트 할 때마다 자동으로 업데이트</li>
</ul>

<p><br /></p>

<h2 id="-msw-세팅">📄 MSW 세팅</h2>

<h3 id="-srcmocksbrowserts">💾 src/mocks/browser.ts</h3>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">setupWorker</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">msw/browser</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">handlers</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./handlers</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// This configures a Service Worker with the given request handlers.</span>
<span class="kd">const</span> <span class="nx">worker</span> <span class="o">=</span> <span class="nx">setupWorker</span><span class="p">(...</span><span class="nx">handlers</span><span class="p">);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">worker</span><span class="p">;</span>
</code></pre></div></div>
<ul>
  <li>CSR 네트워크 요청용</li>
  <li>serviceWorker가 가로챈 브라우저 요청을 전달받는다.</li>
</ul>

<h3 id="-srcmockshttpts">💾 src/mocks/http.ts</h3>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createMiddleware</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@mswjs/http-middleware</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">express</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">cors</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">cors</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">handlers</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./handlers</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="mi">9090</span><span class="p">;</span> <span class="c1">// 서버 포트</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">cors</span><span class="p">({</span> <span class="na">origin</span><span class="p">:</span> <span class="dl">'</span><span class="s1">http://localhost:3000</span><span class="dl">'</span><span class="p">,</span> <span class="na">optionsSuccessStatus</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="na">credentials</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}));</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">createMiddleware</span><span class="p">(...</span><span class="nx">handlers</span><span class="p">));</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Mock server is running on port: </span><span class="p">${</span><span class="nx">port</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
</code></pre></div></div>
<ul>
  <li>SSR 네트워크 요청용 =  서버 컴포넌트에서 사용</li>
  <li>CSR만 사용할 경우 필수는 아님</li>
</ul>

<h3 id="-srcmockshandlerts">💾 src/mocks/handler.ts</h3>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">http</span><span class="p">,</span> <span class="nx">HttpResponse</span><span class="p">,</span> <span class="nx">StrictResponse</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">msw</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">faker</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@faker-js/faker</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">generateDate</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">lastWeek</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">());</span>
  <span class="nx">lastWeek</span><span class="p">.</span><span class="nx">setDate</span><span class="p">(</span><span class="nx">lastWeek</span><span class="p">.</span><span class="nx">getDate</span><span class="p">()</span> <span class="o">-</span> <span class="mi">7</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">faker</span><span class="p">.</span><span class="nx">date</span><span class="p">.</span><span class="nx">between</span><span class="p">({</span>
    <span class="na">from</span><span class="p">:</span> <span class="nx">lastWeek</span><span class="p">,</span>
    <span class="na">to</span><span class="p">:</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">(),</span>
  <span class="p">});</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="dl">'</span><span class="s1">elonmusk</span><span class="dl">'</span><span class="p">,</span> <span class="na">nickname</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Elon Musk</span><span class="dl">'</span><span class="p">,</span> <span class="na">image</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/yRsRRjGO.jpg</span><span class="dl">'</span><span class="p">},</span>
  <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="dl">'</span><span class="s1">zerohch0</span><span class="dl">'</span><span class="p">,</span> <span class="na">nickname</span><span class="p">:</span> <span class="dl">'</span><span class="s1">제로초</span><span class="dl">'</span><span class="p">,</span> <span class="na">image</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/5Udwvqim.jpg</span><span class="dl">'</span><span class="p">},</span>
  <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="dl">'</span><span class="s1">leoturtle</span><span class="dl">'</span><span class="p">,</span> <span class="na">nickname</span><span class="p">:</span> <span class="dl">'</span><span class="s1">레오</span><span class="dl">'</span><span class="p">,</span> <span class="na">image</span><span class="p">:</span> <span class="nx">faker</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">avatar</span><span class="p">()},</span>
<span class="p">]</span>
<span class="kd">const</span> <span class="nx">Posts</span> <span class="o">=</span> <span class="p">[];</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">handlers</span> <span class="o">=</span> <span class="p">[</span>
  <span class="nx">http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/login</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">로그인</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">HttpResponse</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">User</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="p">{</span>
      <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">'</span><span class="s1">Set-Cookie</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">connect.sid=msw-cookie;HttpOnly;Path=/</span><span class="dl">'</span>
      <span class="p">}</span>
    <span class="p">})</span>
  <span class="p">}),</span>
  <span class="nx">http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/logout</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">로그아웃</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nx">HttpResponse</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">'</span><span class="s1">Set-Cookie</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">connect.sid=;HttpOnly;Path=/;Max-Age=0</span><span class="dl">'</span>
      <span class="p">}</span>
    <span class="p">})</span>
  <span class="p">}),</span>
<span class="c1">// ...</span>
<span class="p">];</span>
</code></pre></div></div>
<ul>
  <li>API 요청과 응답 정의</li>
</ul>

<h3 id="쿼리-파라미터-처리하기">쿼리 파라미터 처리하기</h3>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">http</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/test/search</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">({</span> <span class="nx">request</span><span class="p">,</span> <span class="nx">params</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">URL</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">keword</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">searchParams</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">keyword</span><span class="dl">'</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">page</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">url</span><span class="p">.</span><span class="nx">searchParams</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">page</span><span class="dl">'</span><span class="p">));</span>
        <span class="kd">const</span> <span class="nx">size</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">url</span><span class="p">.</span><span class="nx">searchParams</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">size</span><span class="dl">'</span><span class="p">));</span>
        <span class="kd">const</span> <span class="nx">totalCount</span> <span class="o">=</span> <span class="nx">searchParams</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
        <span class="kd">const</span> <span class="nx">totalPages</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">totalCount</span> <span class="o">/</span> <span class="nx">size</span><span class="p">);</span>


        <span class="k">return</span> <span class="nx">HttpResponse</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span>
            <span class="na">result</span><span class="p">:</span> <span class="dl">'</span><span class="s1">SUCCESS</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">resultCode</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
            <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">성공</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">contents</span><span class="p">:</span> <span class="nx">test</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">page</span> <span class="o">*</span> <span class="nx">size</span><span class="p">,</span> <span class="p">(</span><span class="nx">page</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="nx">size</span><span class="p">),</span>
            <span class="na">pageNumber</span><span class="p">:</span> <span class="nx">page</span><span class="p">,</span>
            <span class="na">pageSize</span><span class="p">:</span> <span class="nx">size</span><span class="p">,</span>
            <span class="nx">totalPages</span><span class="p">,</span>
            <span class="nx">totalCount</span><span class="p">,</span>
            <span class="na">isLastPage</span><span class="p">:</span> <span class="nx">totalPages</span> <span class="o">&lt;=</span> <span class="nx">page</span><span class="p">,</span>
            <span class="na">isFirstPage</span><span class="p">:</span> <span class="nx">page</span> <span class="o">===</span> <span class="mi">0</span><span class="p">,</span>
        <span class="p">});</span>

    <span class="p">})</span>
</code></pre></div></div>
<ul>
  <li>url 객체 생성 후 searchParams을 통해 처리합니다.</li>
</ul>

<p><br /></p>

<h2 id="-msw-서버-실행">📄 MSW 서버 실행</h2>

<h3 id="1-packagejson-스크립트-추가">1. package.json 스크립트 추가</h3>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">scripts</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
  <span class="dl">"</span><span class="s2">dev</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">next dev</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">build</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">next build</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">start</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">next start</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">lint</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">next lint</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">mock</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">npx tsx watch ./src/mocks/http.ts</span><span class="dl">"</span>
<span class="p">},</span>
</code></pre></div></div>
<ul>
  <li>watch : 서버 코드가 수정되면 자동으로 재시작</li>
</ul>

<h3 id="2-실행">2. 실행</h3>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">run</span> <span class="nx">mock</span>
</code></pre></div></div>
<p><br /></p>

<h2 id="-msw-사용-분기처리">📄 MSW 사용 분기처리</h2>

<h3 id="-srcapp_componentmswcoponenttsx">💾 src\app_component\MSWCoponent.tsx</h3>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">use client</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useEffect</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">MSWComponent</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nb">window</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">undefined</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_API_MOCKING</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">enabled</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
			 <span class="nx">worker</span><span class="p">.</span><span class="nx">start</span><span class="p">({</span> <span class="na">onUnhandledRequest</span><span class="p">:</span> <span class="dl">"</span><span class="s2">bypass</span><span class="dl">"</span> <span class="p">});</span> <span class="c1">// msw 핸들러로 요청하지 않은 request는 무시. console 경고를 없앨 수 있다</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>
<ul>
  <li>MSW는 개발환경에서만 사용한다</li>
</ul>

<h3 id="-envlocal">💾 env.local</h3>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">NEXT_PUBLIC_API_MOCKING</span><span class="o">=</span><span class="nx">enabled</span> 
</code></pre></div></div>
<ul>
  <li>로컬 환경에서만 돌아가는 환경변수 파일</li>
  <li>개발 환경에서만 읽어올 수 있는 브라우저 환경 변수를 설정하여 배포환경일때는 MSW를 사용하지 않는다.</li>
</ul>

<h3 id="-srcapplayouttsx">💾 src\app\layout.tsx</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">RootLayout</span><span class="p">({</span> <span class="nx">children</span> <span class="p">}:</span> <span class="nx">Props</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">html</span> <span class="nx">lang</span><span class="o">=</span><span class="dl">"</span><span class="s2">en</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">body</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nx">inter</span><span class="p">.</span><span class="nx">className</span><span class="p">}</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">MSWComponent</span> <span class="o">/&gt;</span> <span class="c1">// ✅</span>
          <span class="p">{</span><span class="nx">children</span><span class="p">}</span>
        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/body</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/html</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="출처">출처</h2>

<ul>
  <li>Next.js + ReactQuery로 SNS 서비스 만들기 (인프런)</li>
</ul>]]></content><author><name>수진‍ (水珍)</name></author><category term="JavaScript" /><category term="MSW" /><category term="Mock" /><summary type="html"><![CDATA[프론트 작업을 완료했는데 백엔드 API 작업이 늦어질 때]]></summary></entry><entry><title type="html">[Next.js] 클라이언트 컴포넌트에서 서버 컴포넌트 유지하는 방법</title><link href="http://localhost:4000/nextjs/nextjs-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-%EC%84%9C%EB%B2%84-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%9C%A0%EC%A7%80%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/" rel="alternate" type="text/html" title="[Next.js] 클라이언트 컴포넌트에서 서버 컴포넌트 유지하는 방법" /><published>2024-04-01T00:00:00+09:00</published><updated>2024-04-01T22:06:00+09:00</updated><id>http://localhost:4000/nextjs/nextjs-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%20%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C%20%EC%84%9C%EB%B2%84%20%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%20%EC%9C%A0%EC%A7%80%ED%95%98%EB%8A%94%20%EB%B0%A9%EB%B2%95</id><content type="html" xml:base="http://localhost:4000/nextjs/nextjs-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-%EC%84%9C%EB%B2%84-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%9C%A0%EC%A7%80%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/"><![CDATA[<h2 id="-클라이언트-컴포넌트-내에서-서버-컴포넌트-다루기">📄 클라이언트 컴포넌트 내에서 서버 컴포넌트 다루기</h2>

<p>컴포넌트를 구현할 때마다 여러 난관에 부딪힌 경험이 있습니다.</p>

<p>서버 컴포넌트를 작성한 후에도 이벤트 리스너를 추가하거나 훅을 적용해야 하는 경우, 결국 클라이언트 컴포넌트로 전환해야 했습니다.</p>

<p>여러가지 방법을 찾아보다가 클라이언트 컴포넌트 내부에서도 서버 컴포넌트를 충분히 활용할 수 있다는 점을 발견했습니다.</p>

<h3 id="-서버-컴포넌트를-children으로-받아오기">◾ 서버 컴포넌트를 children으로 받아오기</h3>

<p>단순한 방법이지만 큰 차이였습니다. 
<strong>import</strong>문으로 컴포넌트를 서버 컴포넌트를 가져오면 클라이언트 컴포넌트로 자동 변환됩니다.</p>

<p>서버 컴포넌트를 <strong>children</strong>으로 받아오면 클라이언트 컴포넌트를 유지하면서 서버컴포넌트를 사용할 수 있습니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">'</span><span class="s1">use client</span><span class="dl">'</span>
 
<span class="k">import</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
 
<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">ClientComponent</span><span class="p">({</span>
  <span class="nx">children</span><span class="p">,</span>
<span class="p">}:</span> <span class="p">{</span>
  <span class="nl">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span>
<span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
 
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">count</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>      <span class="p">{</span><span class="nx">children</span><span class="p">}</span>
    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">ClientComponent</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./client-component</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">ServerComponent</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./server-component</span><span class="dl">'</span>
 
<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Page</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">ClientComponent</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">ServerComponent</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/ClientComponent</span><span class="err">&gt;
</span>  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이렇게 하면 굳이 전체 컴포넌트를 클라이언트 컴포넌트로 전환할 필요 없이 서버 컴포넌트를 children으로 전달하여 활용할 수 있습니다.</p>

<h2 id="참고">참고</h2>
<ul>
  <li><a href="https://nextjs.org/docs/app/building-your-application/rendering/composition-patterns">Next.js 공식 문서 - Server and Client Composition Patterns</a></li>
  <li>Next.js + ReactQuery로 SNS 서비스 만들기 (인프런)</li>
</ul>]]></content><author><name>수진‍ (水珍)</name></author><category term="Nextjs" /><category term="middleware" /><category term="서버 컴포넌트" /><summary type="html"><![CDATA[클라이언트 컴포넌트로 서버 컴포넌트를 감싸보자]]></summary></entry><entry><title type="html">[Next.js] 서버 컴포넌트에서 Redirect 구현하기 with middleware</title><link href="http://localhost:4000/nextjs/nextjs-%EC%84%9C%EB%B2%84-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-Redirect-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-with-middleware/" rel="alternate" type="text/html" title="[Next.js] 서버 컴포넌트에서 Redirect 구현하기 with middleware" /><published>2024-02-07T00:00:00+09:00</published><updated>2025-03-07T22:06:00+09:00</updated><id>http://localhost:4000/nextjs/nextjs-%EC%84%9C%EB%B2%84%20%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C%20Redirect%20%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0%20with%20middleware</id><content type="html" xml:base="http://localhost:4000/nextjs/nextjs-%EC%84%9C%EB%B2%84-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-Redirect-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-with-middleware/"><![CDATA[<h2 id="-문제-발생">🚨 문제 발생</h2>

<p>페이지 인증 로직을 구현하면서 권한이 없는 사용자를 로그인 페이지로 리다이렉트하는 기능이 필요했습니다.</p>

<p>클라이언트 컴포넌트에서는 useRouter를 사용하여 리다이렉트할 수 있었지만, 서버 컴포넌트에서는 useRouter를 사용할 수 없었습니다. 따라서 서버에서 인증을 처리하는 적절한 방법을 찾아야 했습니다.</p>

<p><img src="/assets/image/posts/nextjs-middleware.png" alt="image" /></p>

<h2 id="시도-1--redirect">시도 1 | redirect</h2>

<p>가장 간단하게 사용할 수 있어보이는 redirect를 사용해 보았습니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">await</span> <span class="nx">reissueTokenAPI</span><span class="p">(</span><span class="nx">REFRESH_TOKEN</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">accessToken</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">cookieStore</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="nx">REFRESH_TOKEN</span><span class="p">,</span> <span class="nx">res</span><span class="p">.</span><span class="nx">refreshToken</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">redirect</span><span class="p">(</span><span class="nx">Url</span><span class="p">.</span><span class="nx">SignIn</span><span class="p">);</span>
      <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>
<p><br /></p>

<p>문제가 없을 줄 알았지만 콘솔에서 에러가 발생했습니다.</p>

<p><img src="/assets/image/posts/nextjs-middleware-error.png" alt="image" /></p>

<blockquote>
  <p>Invoking the redirect() function throws a NEXT_REDIRECT error and terminates rendering of the route segment in which it was thrown. by Next.js</p>
</blockquote>

<p><del>왜 redirect api 표에서는 severcomponet가 포함되어있는지 잘 모르겠지만 아무래도 서버 컴포넌트에서는 redirect()를 사용할 수 없는 것 같습니다.</del> <br />
(2025.03.07 수정) 
서버 컴포넌트임에도 redirect()를 사용할 수 없었던 이유는 await을 사용하는 비동기 코드 내부에서 redirect()를 호출했기 때문입니다. 
redirect() 함수는 페이지가 서버에서 렌더링되는 도중에 실행되어야합니다.</p>

<h2 id="시도-2--nextresponseredirect-in-middleware">시도 2 | NextResponse.redirect in Middleware</h2>

<p>미들웨어는 페이지 요청이 완료되기 전에 실행되므로, 페이지가 서버에서 렌더링되기 전에 필요한 로직을 처리할 수 있습니다.</p>

<p>그러나 미들웨어에서는 axios의 기본 설정으로 AJAX 요청을 보낼 수 없었으며, 이를 사용하려고 하면 다음과 같은 에러가 발생했습니다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nx">TypeError</span><span class="p">]</span> <span class="nx">adapter</span> <span class="k">is</span> <span class="nx">not</span> <span class="nx">a</span> <span class="kd">function</span>
</code></pre></div></div>

<p>따라서 fetch 함수를 사용하여 API 요청을 처리하는 방식으로 해결했습니다.
저의 경우에는 미들웨어에서 사용하는 인증관련 로직을 분리했습니다.
<br /></p>

<p><strong>💾 withAuth.ts</strong></p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">NextRequest</span><span class="p">,</span> <span class="nx">NextResponse</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/server</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nx">withAuth</span><span class="p">(</span><span class="nx">request</span><span class="p">:</span> <span class="nx">NextRequest</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">redirectUrl</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">nextUrl</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span> <span class="c1">// 1</span>
    <span class="nx">redirectUrl</span><span class="p">.</span><span class="nx">pathname</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">리다이렉트</span> <span class="nx">경로</span><span class="p">}</span><span class="s2">`</span>

    <span class="kd">const</span> <span class="nx">refreshToken</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">cookies</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">refreshToken</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 2</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">refreshToken</span><span class="p">)</span> <span class="k">return</span> <span class="nx">NextResponse</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="nx">redirectUrl</span><span class="p">);</span>

    <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">refreshToken</span> <span class="nx">갱신</span> <span class="nx">api</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span> <span class="c1">// 3</span>
    <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">refreshToken</span><span class="p">:</span> <span class="nx">refreshToken</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span>
    <span class="p">};</span>
    <span class="kd">const</span> <span class="nx">requestOptions</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">),</span>
    <span class="p">};</span>

    <span class="kd">const</span> <span class="nx">apiResponse</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">requestOptions</span><span class="p">);</span>
    <span class="kd">const</span> <span class="na">responseData</span><span class="p">:</span> <span class="kr">any</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">responseData</span><span class="p">.</span><span class="nx">resultCode</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 4</span>
			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">succeed</span><span class="dl">'</span><span class="p">)</span>

      <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">NextResponse</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>

      <span class="nx">response</span><span class="p">.</span><span class="nx">cookies</span><span class="p">?.</span><span class="kd">set</span><span class="p">(</span>
        <span class="dl">'</span><span class="s1">refreshToken</span><span class="dl">'</span><span class="p">,</span>
        <span class="nx">responseData</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">refreshToken</span>
      <span class="p">);</span>
      <span class="nx">response</span><span class="p">.</span><span class="nx">cookies</span><span class="p">?.</span><span class="kd">set</span><span class="p">(</span>
        <span class="dl">'</span><span class="s1">accessToken</span><span class="dl">'</span><span class="p">,</span>
        <span class="nx">responseData</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">accessToken</span>
      <span class="p">);</span>

      <span class="k">return</span> <span class="nx">response</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">failed</span><span class="dl">'</span><span class="p">);</span>

      <span class="k">return</span> <span class="nx">NextResponse</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="nx">redirectUrl</span><span class="p">);</span> <span class="c1">// 5</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">err: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">error</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<ol>
  <li>객체의 참조를 공유하지 않고 안전하게 nextUrl를 사용하고자 clone 메서드를 사용해 값을 복사한다.</li>
  <li>서버에 요청 (request)할때 브라우저 쿠키에 저장된 refreshToken을 가져온다.</li>
  <li>서버에서 api요청을 처리해 refreshToken을 갱신한다.</li>
  <li>refreshToken 갱신 성공시, 쿠키에 새로운 토큰을 저장해 클라이언트에 응답 (response)을 내려보낸다.</li>
  <li>refreshToken 갱신 실패시, 설정한 경로로 리다이렉트 한다.</li>
</ol>

<p>이전에는 서버에서 쿠키를 다루기 위해 별도의 라이브러리를 설치하거나, 각 페이지 컴포넌트에서 getServerSideProps의 request를 통해 관리해야 했습니다.</p>

<p>그러나 이번에 미들웨어를 사용하면서, 원하는 페이지를 요청할 때 공통된 비즈니스 로직을 처리할 수 있게 되었고, 쿠키를 다루는 과정이 번거롭지 않아 작업이 훨씬 간편해졌습니다.</p>

<p>또한, 서버에서 인증을 처리할 수 있기 때문에, 브라우저에서 추가적인 화면을 렌더링하지 않고 즉시 로그인 페이지로 리다이렉트할 수 있어, 사용자는 바로 로그인을 진행할 수 있습니다.</p>

<p>만약 리다이렉트 후 사용자에게 추가적인 메시지를 전달하고 싶다면, 응답(Response)을 커스텀하여 메시지를 포함할 수도 있습니다.</p>

<p><strong>💾 middleware.ts</strong></p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">NextRequest</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/server</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">isAuthenticated</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@lib/auth</span><span class="dl">'</span>
 
<span class="c1">// Limit the middleware to paths starting with `/api/`</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">matcher</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/api/:function*</span><span class="dl">'</span><span class="p">,</span>
<span class="p">}</span>
 
<span class="k">export</span> <span class="kd">function</span> <span class="nx">middleware</span><span class="p">(</span><span class="nx">request</span><span class="p">:</span> <span class="nx">NextRequest</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Call our authentication function to check the request</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isAuthenticated</span><span class="p">(</span><span class="nx">request</span><span class="p">))</span> <span class="p">{</span>
    <span class="c1">// Respond with JSON indicating an error message</span>
    <span class="k">return</span> <span class="nx">Response</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span>
      <span class="p">{</span> <span class="na">success</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">authentication failed</span><span class="dl">'</span> <span class="p">},</span>
      <span class="p">{</span> <span class="na">status</span><span class="p">:</span> <span class="mi">401</span> <span class="p">}</span>
    <span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>공식 문서를 참고하며 작업을 진행하는 과정에서, 현재까지 Next.js의 기능을 절반 정도만 활용하고 있었다는 것을 깨달았습니다.</p>

<p>미들웨어는 단순히 리다이렉트를 처리하는 용도뿐만 아니라, 다양한 기능을 제공하고 있습니다. 이를 적극적으로 활용하여 프로젝트를 더욱 효율적으로 진행하고 싶습니다.</p>

<h2 id="참고">참고</h2>
<ul>
  <li><a href="https://nextjs.org/docs/app/building-your-application/routing/middleware">Next.js 공식 문서 - middleware</a></li>
  <li><a href="https://www.reddit.com/r/nextjs/comments/tx1pcp/using_axios_in_middleware_not_working/">reddit - using_axios_in_middleware_not_working</a></li>
</ul>]]></content><author><name>수진‍ (水珍)</name></author><category term="Nextjs" /><category term="middleware" /><category term="서버 컴포넌트" /><summary type="html"><![CDATA[권한이 없는 페이지 미들웨어로 리다이렉트 시키기]]></summary></entry><entry><title type="html">[React] 리액트팀은 왜 가상 돔을 만들었을까?</title><link href="http://localhost:4000/react/react-react-virtual-dom/" rel="alternate" type="text/html" title="[React] 리액트팀은 왜 가상 돔을 만들었을까?" /><published>2023-12-26T00:00:00+09:00</published><updated>2023-09-25T22:06:00+09:00</updated><id>http://localhost:4000/react/react-react%20virtual%20dom</id><content type="html" xml:base="http://localhost:4000/react/react-react-virtual-dom/"><![CDATA[<h2 id="사용자가-브라우저-주소창에-주소를-입력하면-어떤-일이-발생할까">사용자가 브라우저 주소창에 주소를 입력하면 어떤 일이 발생할까?</h2>

<p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/cc5d46e7-ab57-462d-8b26-582a91f86f80/9fe21a7c-7ed2-4caa-82d0-cf0dcff5a192/Untitled.png" alt="Untitled" /></p>

<ol>
  <li>브라우저가 사용자가 요청한 주소를 방문해 html을 다운받는다.</li>
  <li>브라우저의 렌더링 엔진이 html 을 파싱해 DOM 트리를 만든다.</li>
  <li>2 과정에서 CSS 파일을 만나면 CSS 파일을 다운받는다.</li>
  <li>브라우저의 렌더링 엔진이 CSS 트리인 CSSOM을 만든다.</li>
  <li>브라우저는 만들어진 DOM트리를 순회한다. 이 과정에서 사용자의 눈에 보여지는 부분만 순회한다. 이를 통해 트리를 분석하는 과정을 빠르게 할 수 있다.</li>
  <li>DOM 트리에서 눈에 보이는 노드에 대한 CSSOM 정보를 찾아 노드에 적용해 렌더트리를 만든다.
    <ol>
      <li>레이아웃(Reflow): 노드가 브라우저 화면에 어느 좌표에 위치해야하는지 계산하는 과정</li>
      <li>페인팅(Repaint): 레이아웃단계를 거친 노드에 색, 이미지 같은 유효한 모습을 그리는 과정</li>
    </ol>
  </li>
</ol>

<h2 id="사용자-인터렉션에-의해-dom이-변경되었을-때는-어떻게-동작할까">사용자 인터렉션에 의해 DOM이 변경되었을 때는 어떻게 동작할까?</h2>

<p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/cc5d46e7-ab57-462d-8b26-582a91f86f80/4de94b71-c719-428e-a646-db7dfecd76b8/Untitled.png" alt="Untitled" /></p>

<p>어떠한 인터렉션에 의해 DOM에 변화가 생길 때, 브라우저는 위 과정을 반복하며 렌더 트리를 다시 만든다.</p>

<ol>
  <li>Layout부터 발생하는 경우 (Reflow): 레이아웃의 높이, 너비 등 변화</li>
  <li>Paint부터 발생하는 경우 (Refaint): 이미지, 색상 등 변화</li>
  <li>레이어의 합성만 다시 발생하는 경우 (Composite): transform, opacity 속성 등</li>
</ol>

<p>composite(합성) 단계는 여러 레이어로 나누어진 픽셀값들을 우리가 실제로 보는 화면처럼 합성해주는 단계이다. paint단계에서 만들어진 레이어들을 순서대로 합성해 유저에게 보여준다.</p>

<p>이 과정을 이해하고 있다면 렌더링 최적화 과정을 진행할 수 있다.</p>

<p>예시로 애니메이션을 구현할 때, <code class="language-plaintext highlighter-rouge">position</code>과 <code class="language-plaintext highlighter-rouge">transform</code>을 선택할 수 있는데 <code class="language-plaintext highlighter-rouge">position</code>의 경우는 layout이 변경되어 reflow단계부터 트리가 재구조화된다면, <code class="language-plaintext highlighter-rouge">transform</code>은 coposite단계부터 변화가 적용되어 레이아웃과 페인트 과정을 감소시킬 수 있기 때문이다.</p>

<h2 id="왜-리액트팀은-가상-dom을-만들게-되었을까">왜 리액트팀은 가상 DOM을 만들게 되었을까?</h2>

<p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/cc5d46e7-ab57-462d-8b26-582a91f86f80/8c2f8bd5-c3b9-46d7-8d4c-bcb825db568b/Untitled.png" alt="Untitled" /></p>

<p>과거 전통적인 웹사이트는 하나의 문서에 전달되는 정보의 양이 적었다. 그렇기 때문에 DOM이 변경되어도 서버에서 완전히 새로운 페이지를 내려주는 방법이 가능했지만, 현대 웹 사이트는 유저 인터렉션이 빈번하게 발생할 뿐더러 다뤄지는 데이터 양도 많다.</p>

<p>이러한 문제를 해결하기 위해 SPA가 등장했다. SPA는 ‘단일 페이지 어플리케이션’으로 웹 사이트에서 전체 페이지를 하나의 페이지에 담아 동적으로 화면을 변경하는 기술이다. 이러한 SPA 방식은 하나의 페이지에서 모든게 이루어지기 때문에 자바스크립트에 의한 DOM 조작이 빈번하게 발생해 브라우저의 성능을 저하시킨다.</p>

<p>이러한 단점을 극복하기 위해, 리액트 팀은 가상(Virtual) DOM을 만들었다. 가상 DOM의 장점은 변경된 부분만 실제 브라우저 DOM에 적용할 수 있다는 것이다. 또한, 가상 DOM은 실제 브라우저 DOM에 직접 접근하는 것이 아니라 메모리에 저장되는 객체이므로, 가상 DOM에 접근하고 수정하는 과정은 매우 빠르게 이루어진다.</p>

<p>리액트는 두개의 가상 DOM을 가지고 있다.</p>

<p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/cc5d46e7-ab57-462d-8b26-582a91f86f80/b6f75ce8-648b-4018-9f62-e572e8335c24/Untitled.png" alt="Untitled" /></p>

<ol>
  <li>렌더링 이전 화면 구조를 나타내는 가상 DOM (Virtual DOM)</li>
  <li>렌더링 이후 화면 구조를 나타내는 가상 DOM (New Virtual DOM)</li>
</ol>

<p><strong>Reconciliation: 재조정</strong></p>

<p>리액트는 상태가 변경되어 리렌더링이 일어날 때 마다 실제 브라우저가 그려지기 전에 두개의 가상 DOM을 생성한다. 이후 diffing알고리즘을 통해 변화가 발생한 노드만 실제 브라우저 DOM에 적용한다.</p>

<p><strong>Batch Update</strong></p>

<p>10개의 노드가 변경 되었다고 가정했을 때, 하나씩 순서대로 적용되는 것이 아니라 변경 사항을 한번에 모아서 실제 DOM에 적용한다.</p>

<h2 id="정리">정리</h2>

<p>리액트 가상 DOM은 자바스크립트 객체이기 때문에 접근하고 수정하는 속도가 빨라 실제 변경된 부분을 빠르게 파악할 수 있다. 이 변경된 부분만 한번에 모아서 실제 DOM에 적용시키기 때문에 브라우저 성능도 개선할 수 있다. 다만 UI 변경이 적고 브라우저에서 보여주는 데이터가 적을 경우에는 SPA 프레임워크없이 기존 웹 사이트 개발 방식을 선택해 개발하는 것도 좋은 방법이다.</p>]]></content><author><name>수진‍ (水珍)</name></author><category term="React" /><category term="브라우저" /><category term="virtual dom" /><category term="가상돔" /><summary type="html"><![CDATA[브라우저 렌더링과 리액트 가상 돔?]]></summary></entry><entry><title type="html">[Next.js] 🚨 이벤트가 함수가 prop로 전달되지 않는 이유</title><link href="http://localhost:4000/nextjs/nextjs-event%ED%95%A8%EC%88%98%EB%8A%94-%EC%99%9C-props%EB%A1%9C-%EC%A0%84%EB%8B%AC%EB%90%98%EC%A7%80-%EC%95%8A%EC%9D%84%EA%B9%8C/" rel="alternate" type="text/html" title="[Next.js] 🚨 이벤트가 함수가 prop로 전달되지 않는 이유" /><published>2023-11-10T00:00:00+09:00</published><updated>2023-11-13T22:06:00+09:00</updated><id>http://localhost:4000/nextjs/nextjs-event%ED%95%A8%EC%88%98%EB%8A%94%20%EC%99%9C%20props%EB%A1%9C%20%EC%A0%84%EB%8B%AC%EB%90%98%EC%A7%80%20%EC%95%8A%EC%9D%84%EA%B9%8C</id><content type="html" xml:base="http://localhost:4000/nextjs/nextjs-event%ED%95%A8%EC%88%98%EB%8A%94-%EC%99%9C-props%EB%A1%9C-%EC%A0%84%EB%8B%AC%EB%90%98%EC%A7%80-%EC%95%8A%EC%9D%84%EA%B9%8C/"><![CDATA[<h2 id="-문제-발생">🚨 문제 발생</h2>

<p>Next.js를 사용해 프로젝트를 진행하는데 에러가 발생했다.</p>

<p><img src="https://github.com/SJ0826/coding-swamp-/assets/56298540/c2095e9c-76fb-4671-aa4b-e8a4d69afa99" alt="스크린샷 2023-11-10 오전 11 04 49" /></p>

<p>프로젝트 환경은 다음과 같다.</p>

<ul>
  <li>Next.js (app routing)</li>
  <li>TS</li>
</ul>

<p>이벤트 함수를 컴포넌트 간 props로 전달하는 과정에서 발생했다.</p>

<h2 id="문제-원인">❔문제 원인</h2>

<ol>
  <li>Server Component에서 Client Component로 함수를 전달 할 수 없다.</li>
  <li>각 컴포넌트 간 props로 전달되는 함수는 직렬화 할 수 없기 때문이다.</li>
</ol>

<p>이 때 궁금한점.</p>

<ol>
  <li>난 Client Component로 컴포넌트를 변환한 적이 없는데?</li>
  <li>함수 직렬화가 무엇이지?</li>
</ol>

<h3 id="1-난-client-component로-컴포넌트를-변환한-적이-없는데--client-component로-실행되는-조건">1. 난 Client Component로 컴포넌트를 변환한 적이 없는데? | Client Component로 실행되는 조건</h3>

<p>next.js는 따로 설정하지 않으면 기본적으로 서버 컴포넌트로 실행된다. 하지만 위와 같은 에러가 발생했고 이유를 찾아보았다.</p>

<p>하위 컴포넌트인 <code class="language-plaintext highlighter-rouge">Modal.tsx</code>는 <strong>onClick 이벤트</strong>를 발생시키는 컴포넌트를 포함하고 있다. onClick 이벤트는 자바스크립트 이벤트 핸들러로 웹 브라우저 상에서 사용자에 의해 컨트롤된다.</p>

<p>사용자와 상호작용하는 이벤트 핸들러는 브라우저 환경에서 실행되는 클라이언트 측 코드에서 사용되어야 한다</p>

<p>⭐️ 이벤트 핸들러가 실행되는 함수는 자동으로 클라이언트 컴포넌트로 변환된다!</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">MyModal</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">:</span> <span class="nx">IModal</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">isOpen</span><span class="p">,</span> <span class="nx">onRequestClose</span><span class="p">,</span> <span class="nx">contentLabel</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">props</span><span class="p">;</span> <span class="c1">// 👀</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">contentLabel</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>...모달내용...<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">onRequestClose</span><span class="si">}</span><span class="p">&gt;</span>닫기<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span> // 👀
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<p>에러가 발생한 포인트는 props전달 과정에 있다. props전달 과정에서 어떤 일이 발생하길래 서버 ↔️ 클라이언트 컴포넌트 간 props를 전달 할 수 없는 것일까?</p>

<h3 id="2-함수-직렬화가-무엇이지--서버-️-클라이언트-컴포넌트-간-props를-전달할-때-발생하는-일">2. 함수 직렬화가 무엇이지? | 서버 ↔️ 클라이언트 컴포넌트 간 props를 전달할 때 발생하는 일</h3>

<blockquote>
  <p>If you fetch data in a Server Component, you may want to pass data down as props to Client Components. Props passed from the Server to Client Components need to be serializable by React. by. NEXT JS 공식문서</p>
</blockquote>

<p>공식문서에서도 서버 컴포넌트가 클라이언트 컴포넌트로 데이터를 props형태로 전달할때 리액트에 의해 직렬화(serializable)되어야 한다고 말한다.</p>

<p>💡 함수 직렬화란?<br />
함수를 <strong>문자열로 변환</strong>하여 데이터를 직렬화하는 과정을 뜻한다. 자바스크립트에서는 데이터를 JSON형태로 변환하는 것을 직렬화한다고 한다.</p>

<p>하지만 NEXT JS에서 서버 컴포넌트에서 클라이언트 컴포넌트로 데이터를 전달할 때 JSON으로 직렬화되지 않고 React.Element로 전달한다. <br />
전달된 React.Elements는 리액트 컴포넌트를 표현하는 객체로, JS 기본 데이터 형식 이외에도 React에 특화된 데이터를 포함하고 있다.</p>

<p>다시 한번 문제를 정리하자면 다음과 같다.</p>

<ol>
  <li>하위 컴포넌트가 이벤트 함수를 props로 전달받아 클라이언트 컴포넌트로 자동 전환되었다.</li>
  <li>컴포넌트간 데이터를 전달할 때는 직렬화 과정이 필요한데, 이때 서버 컴포넌트에서 클라이언트 컴포넌트로 props로 전달된 데이터는 직렬화 과정을 거치지 않는다.</li>
  <li>이 데이터는 JSON으로 직렬화 되지 않고, React.Elements로 전달되기 때문이다.</li>
</ol>

<p>이 문제를 해결하는 데에 여러 방법이 있다.</p>

<h2 id="-문제-해결">🔨 문제 해결</h2>

<h3 id="1-클라이언트-️-클라이언트-구조-만들기">1. 클라이언트 ↔️ 클라이언트 구조 만들기</h3>

<p>서버 컴포넌트 ↔️ 클라이언트 컴포넌트 구조가 문제라면, ㅊ 구조로 바꾸는 것은 어떨까?</p>

<p>이 때 사용되는 명령어는 다음과 같다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">use client</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p>상위 컴포넌트 파일 상단에 이 명령어를 추가하면 클라이언트 컴포넌트로 선언된다. 여기서 구분을 명확하게 하기 위해 파일 이름도 바꾸어 주면 좋다.</p>

<p><code class="language-plaintext highlighter-rouge">MyModal.tsx</code> -&gt; <code class="language-plaintext highlighter-rouge">MyModal.client.tsx</code></p>

<p>여기서 또 궁금점이 생겼다.</p>

<p>NEXT JS에서 상위 컴포넌트가 클라이언트 컴포넌트라면 하위 컴포넌트는 모두 클라이언트로 설정된다. 이 프로젝트의 가장 상위 컴포넌트인 <code class="language-plaintext highlighter-rouge">Page.tsx</code>에 <code class="language-plaintext highlighter-rouge">use client</code>를 추가했는데, 이러면 NEXT JS 프레임워크를 사용하는 것이 의미가 있을까?</p>

<p>공식문서에 따르면 이를 해결하기 위해 react-query 같은 third-party 라이브러리 사용을 권장한다. 하지만 프로젝트가 작고 상태관리 라이브러리가 굳이 필요하지 않다면 라이브러리를 추가하지 않고 이벤트 핸들러를 props로 전달하는 경우를 최대한 지양하는 편이 좋다는 생각이 들었다.</p>

<h2 id="참고">참고</h2>

<ul>
  <li>
    <p><a href="https://stackoverflow.com/questions/76948441/passing-props-to-onclick-from-server-to-client-component-in-next13">Passing props to onClick from server to client component in Next13</a></p>
  </li>
  <li>
    <p><a href="https://nextjs.org/docs/app/building-your-application/rendering/composition-patterns">Next.js 공식문서 - composition-patterns</a></p>
  </li>
</ul>]]></content><author><name>수진‍ (水珍)</name></author><category term="Nextjs" /><category term="nextjs" /><category term="props" /><category term="error" /><category term="함수의 직렬화" /><category term="서버 컴포넌트" /><category term="클라이언트 컴포넌트" /><summary type="html"><![CDATA[Event handlers cannot be passed to Client Component props]]></summary></entry></feed>